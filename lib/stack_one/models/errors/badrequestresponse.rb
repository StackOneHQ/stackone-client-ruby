# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Errors
    

      class BadRequestResponse
        extend T::Sig
        include Crystalline::MetadataFields

        # Error message
        field :message, ::String, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('message') } }
        # HTTP status code
        field :status_code, ::Float, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('statusCode') } }
        # Timestamp when the error occurred
        field :timestamp, ::DateTime, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('timestamp'), 'decoder': Utils.datetime_from_iso_format(false) } }
        # Error details
        field :data, T.nilable(Models::Errors::Data), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('data') } }
        # List of provider-specific errors
        field :provider_errors, T.nilable(T::Array[Models::Shared::ProviderError]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('provider_errors') } }


        sig { params(message: ::String, status_code: ::Float, timestamp: ::DateTime, data: T.nilable(Models::Errors::Data), provider_errors: T.nilable(T::Array[Models::Shared::ProviderError])).void }
        def initialize(message: nil, status_code: nil, timestamp: nil, data: nil, provider_errors: nil)
          @message = message
          @status_code = status_code
          @timestamp = timestamp
          @data = data
          @provider_errors = provider_errors
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @message == other.message
          return false unless @status_code == other.status_code
          return false unless @timestamp == other.timestamp
          return false unless @data == other.data
          return false unless @provider_errors == other.provider_errors
          true
        end
      end
    end
  end
end
