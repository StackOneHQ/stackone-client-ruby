# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Operations
    
      # ATS Candidate Filter
      class AtsListCandidatesQueryParamFilter
        extend T::Sig
        include Crystalline::MetadataFields

        # Use a string with a date to only select results created after that given date
        field :created_after, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'created_after' } }
        # Filter to select candidates by email
        field :email, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'email' } }
        # Use a string with a date to only select results updated after that given date
        field :updated_after, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'updated_after' } }

        sig { params(created_after: T.nilable(::DateTime), email: T.nilable(::String), updated_after: T.nilable(::DateTime)).void }
        def initialize(created_after: nil, email: nil, updated_after: nil)
          @created_after = created_after
          @email = email
          @updated_after = updated_after
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_after == other.created_after
          return false unless @email == other.email
          return false unless @updated_after == other.updated_after
          true
        end
      end
    end
  end
end
