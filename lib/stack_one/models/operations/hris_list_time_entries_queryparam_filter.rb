# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Operations
    
      # HRIS Time Entries filters
      class HrisListTimeEntriesQueryParamFilter
        extend T::Sig
        include Crystalline::MetadataFields

        # Filter to select time entries by employee_id
        field :employee_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'employee_id' } }
        # Filter to select time entries before a given time
        field :end_time, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'end_time' } }
        # Filter to select time entries after a given time
        field :start_time, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'start_time' } }
        # Use a string with a date to only select results updated after that given date
        field :updated_after, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'updated_after' } }

        sig { params(employee_id: T.nilable(::String), end_time: T.nilable(::String), start_time: T.nilable(::String), updated_after: T.nilable(::DateTime)).void }
        def initialize(employee_id: nil, end_time: nil, start_time: nil, updated_after: nil)
          @employee_id = employee_id
          @end_time = end_time
          @start_time = start_time
          @updated_after = updated_after
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @employee_id == other.employee_id
          return false unless @end_time == other.end_time
          return false unless @start_time == other.start_time
          return false unless @updated_after == other.updated_after
          true
        end
      end
    end
  end
end
