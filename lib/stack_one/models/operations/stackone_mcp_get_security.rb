# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Operations
    

      class StackoneMcpGetSecurity
        extend T::Sig
        include Crystalline::MetadataFields


        field :api_key, Crystalline::Nilable.new(::String), { 'security': { 'scheme': true, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' } }

        field :basic, Crystalline::Nilable.new(Models::Shared::SchemeBasic), { 'security': { 'scheme': true, 'type': 'http', 'sub_type': 'basic' } }

        sig { params(api_key: T.nilable(::String), basic: T.nilable(Models::Shared::SchemeBasic)).void }
        def initialize(api_key: nil, basic: nil)
          @api_key = api_key
          @basic = basic
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @api_key == other.api_key
          return false unless @basic == other.basic
          true
        end
      end
    end
  end
end
