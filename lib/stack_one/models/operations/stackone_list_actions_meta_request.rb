# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Operations
    

      class StackoneListActionsMetaRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Actions Metadata filters
        field :filter, Crystalline::Nilable.new(Models::Operations::Filter), { 'query_param': { 'field_name': 'filter', 'style': 'deepObject', 'explode': true } }
        # Additional data to include in the response
        field :include, Crystalline::Nilable.new(Crystalline::Array.new(Models::Operations::Include)), { 'query_param': { 'field_name': 'include', 'style': 'form', 'explode': true } }
        # The unified cursor
        field :next_, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'next', 'style': 'form', 'explode': true } }
        # The page number of the results to fetch
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :page, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'page', 'style': 'form', 'explode': true } }
        # The number of results per page (default value is 25)
        field :page_size, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': true } }
        # The relation to group the results by
        field :group_by, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'group_by', 'style': 'form', 'explode': true } }

        sig { params(filter: T.nilable(Models::Operations::Filter), include: T.nilable(T::Array[Models::Operations::Include]), next_: T.nilable(::String), page: T.nilable(::String), page_size: T.nilable(::String), group_by: T.nilable(::String)).void }
        def initialize(filter: nil, include: nil, next_: nil, page: nil, page_size: nil, group_by: 'connector')
          @filter = filter
          @include = include
          @next_ = next_
          @page = page
          @page_size = page_size
          @group_by = group_by
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @filter == other.filter
          return false unless @include == other.include
          return false unless @next_ == other.next_
          return false unless @page == other.page
          return false unless @page_size == other.page_size
          return false unless @group_by == other.group_by
          true
        end
      end
    end
  end
end
