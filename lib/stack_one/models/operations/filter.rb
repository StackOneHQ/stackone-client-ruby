# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Operations
    
      # Actions Metadata filters
      class Filter
        extend T::Sig
        include Crystalline::MetadataFields

        # A comma-separated list of account IDs to filter the results by.
        field :account_ids, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'account_ids' } }
        # The action key to filter the results by
        field :action_key, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'action_key' } }
        # A comma-separated list of connectors to filter the results by.
        field :connectors, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'connectors' } }

        sig { params(account_ids: T.nilable(::String), action_key: T.nilable(::String), connectors: T.nilable(::String)).void }
        def initialize(account_ids: nil, action_key: nil, connectors: nil)
          @account_ids = account_ids
          @action_key = action_key
          @connectors = connectors
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_ids == other.account_ids
          return false unless @action_key == other.action_key
          return false unless @connectors == other.connectors
          true
        end
      end
    end
  end
end
