# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Operations
    

      class StackoneListLinkedAccountsRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # The providers list of the results to fetch
        field :account_ids, T.nilable(T::Array[::String]), { 'query_param': { 'field_name': 'account_ids', 'style': 'form', 'explode': true } }
        # The origin owner identifier of the results to fetch
        field :origin_owner_id, T.nilable(::String), { 'query_param': { 'field_name': 'origin_owner_id', 'style': 'form', 'explode': true } }
        # The origin owner identifiers of the results to fetch (supports multiple IDs)
        field :origin_owner_ids, T.nilable(T::Array[::String]), { 'query_param': { 'field_name': 'origin_owner_ids', 'style': 'form', 'explode': true } }
        # The page number of the results to fetch
        field :page, T.nilable(::Float), { 'query_param': { 'field_name': 'page', 'style': 'form', 'explode': true } }
        # The number of results per page
        field :page_size, T.nilable(::Float), { 'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': true } }
        # The provider of the results to fetch
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :provider, T.nilable(::String), { 'query_param': { 'field_name': 'provider', 'style': 'form', 'explode': true } }
        # The providers list of the results to fetch
        field :providers, T.nilable(T::Array[::String]), { 'query_param': { 'field_name': 'providers', 'style': 'form', 'explode': true } }
        # The status of the results to fetch
        field :status, T.nilable(T::Array[::String]), { 'query_param': { 'field_name': 'status', 'style': 'form', 'explode': true } }


        sig { params(account_ids: T.nilable(T::Array[::String]), origin_owner_id: T.nilable(::String), origin_owner_ids: T.nilable(T::Array[::String]), page: T.nilable(::Float), page_size: T.nilable(::Float), provider: T.nilable(::String), providers: T.nilable(T::Array[::String]), status: T.nilable(T::Array[::String])).void }
        def initialize(account_ids: nil, origin_owner_id: nil, origin_owner_ids: nil, page: nil, page_size: nil, provider: nil, providers: nil, status: nil)
          @account_ids = account_ids
          @origin_owner_id = origin_owner_id
          @origin_owner_ids = origin_owner_ids
          @page = page
          @page_size = page_size
          @provider = provider
          @providers = providers
          @status = status
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_ids == other.account_ids
          return false unless @origin_owner_id == other.origin_owner_id
          return false unless @origin_owner_ids == other.origin_owner_ids
          return false unless @page == other.page
          return false unless @page_size == other.page_size
          return false unless @provider == other.provider
          return false unless @providers == other.providers
          return false unless @status == other.status
          true
        end
      end
    end
  end
end
