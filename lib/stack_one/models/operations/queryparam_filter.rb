# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Operations
    
      # Filter parameters that allow greater customisation of the list response
      class QueryParamFilter
        extend T::Sig
        include Crystalline::MetadataFields

        # A comma-separated list of account IDs to filter the results by.
        field :account_ids, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'account_ids' } }
        # A comma-separated list of actions to filter the results by.
        field :actions, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'actions' } }
        # A comma-separated list of categories to filter the results by.
        field :categories, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'categories' } }
        # A ISO8601 date string to filter the results by end_date.
        field :end_date, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'end_date' } }
        # A comma-separated list of HTTP methods to filter the results by.
        field :http_methods, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'http_methods' } }
        # The field to order the results by.
        field :order_by, Crystalline::Nilable.new(Models::Operations::StackoneListPlatformLogsQueryParamRequestLogsOrderBy), { 'query_param': { 'field_name': 'order_by' } }
        # The direction to order the results by.
        field :order_direction, Crystalline::Nilable.new(Models::Operations::StackoneListPlatformLogsQueryParamRequestLogsOrderDirection), { 'query_param': { 'field_name': 'order_direction' } }
        # A comma-separated list of request IDs to filter the results by.
        field :request_ids, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'request_ids' } }
        # A comma-separated list of resources to filter the results by.
        field :resources, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'resources' } }
        # A comma-separated list of source IDs to filter the results by.
        field :source_ids, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'source_ids' } }
        # A comma-separated list of source types to filter the results by.
        field :source_types, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'source_types' } }
        # A comma-separated list of source values to filter the results by.
        field :source_values, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'source_values' } }
        # A ISO8601 date string to filter the results by start_date.
        field :start_date, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'start_date' } }
        # A comma-separated list of status codes to filter the results by.
        field :status_codes, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'status_codes' } }
        # A boolean value to filter the results by success or failure.
        field :success, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'query_param': { 'field_name': 'success' } }

        sig { params(account_ids: T.nilable(::String), actions: T.nilable(::String), categories: T.nilable(::String), end_date: T.nilable(::DateTime), http_methods: T.nilable(::String), order_by: T.nilable(Models::Operations::StackoneListPlatformLogsQueryParamRequestLogsOrderBy), order_direction: T.nilable(Models::Operations::StackoneListPlatformLogsQueryParamRequestLogsOrderDirection), request_ids: T.nilable(::String), resources: T.nilable(::String), source_ids: T.nilable(::String), source_types: T.nilable(::String), source_values: T.nilable(::String), start_date: T.nilable(::DateTime), status_codes: T.nilable(::String), success: T.nilable(T::Boolean)).void }
        def initialize(account_ids: nil, actions: nil, categories: nil, end_date: nil, http_methods: nil, order_by: nil, order_direction: nil, request_ids: nil, resources: nil, source_ids: nil, source_types: nil, source_values: nil, start_date: nil, status_codes: nil, success: nil)
          @account_ids = account_ids
          @actions = actions
          @categories = categories
          @end_date = end_date
          @http_methods = http_methods
          @order_by = order_by
          @order_direction = order_direction
          @request_ids = request_ids
          @resources = resources
          @source_ids = source_ids
          @source_types = source_types
          @source_values = source_values
          @start_date = start_date
          @status_codes = status_codes
          @success = success
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_ids == other.account_ids
          return false unless @actions == other.actions
          return false unless @categories == other.categories
          return false unless @end_date == other.end_date
          return false unless @http_methods == other.http_methods
          return false unless @order_by == other.order_by
          return false unless @order_direction == other.order_direction
          return false unless @request_ids == other.request_ids
          return false unless @resources == other.resources
          return false unless @source_ids == other.source_ids
          return false unless @source_types == other.source_types
          return false unless @source_values == other.source_values
          return false unless @start_date == other.start_date
          return false unless @status_codes == other.status_codes
          return false unless @success == other.success
          true
        end
      end
    end
  end
end
