# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class TaskCommentApiModel
        extend T::Sig
        include Crystalline::MetadataFields

        # The Employee ID of the author of the comment
        field :author_employee_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('author_employee_id') } }
        # The text of the comment
        field :comment, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('comment') } }
        # The creation date of this comment
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(author_employee_id: T.nilable(::String), comment: T.nilable(::String), created_at: T.nilable(::DateTime)).void }
        def initialize(author_employee_id: nil, comment: nil, created_at: nil)
          @author_employee_id = author_employee_id
          @comment = comment
          @created_at = created_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @author_employee_id == other.author_employee_id
          return false unless @comment == other.comment
          return false unless @created_at == other.created_at
          true
        end
      end
    end
  end
end
