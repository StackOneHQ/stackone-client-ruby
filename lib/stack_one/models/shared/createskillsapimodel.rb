# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class CreateSkillsApiModel
        extend T::Sig
        include Crystalline::MetadataFields

        # The hierarchal level of the skill
        field :hierarchy, Crystalline::Nilable.new(Models::Shared::CreateSkillsApiModelHierarchy), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('hierarchy') } }
        # The ID associated with this skill
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The language associated with this skill
        field :language, Crystalline::Nilable.new(Models::Shared::CreateSkillsApiModelLanguage), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('language') } }
        # The hierarchal level of the skill
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :level, Crystalline::Nilable.new(Models::Shared::CreateSkillsApiModelLevel), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('level') } }
        # The name associated with this skill
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }

        sig { params(hierarchy: T.nilable(Models::Shared::CreateSkillsApiModelHierarchy), id: T.nilable(::String), language: T.nilable(Models::Shared::CreateSkillsApiModelLanguage), level: T.nilable(Models::Shared::CreateSkillsApiModelLevel), name: T.nilable(::String)).void }
        def initialize(hierarchy: nil, id: nil, language: nil, level: nil, name: nil)
          @hierarchy = hierarchy
          @id = id
          @language = language
          @level = level
          @name = name
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @hierarchy == other.hierarchy
          return false unless @id == other.id
          return false unless @language == other.language
          return false unless @level == other.level
          return false unless @name == other.name
          true
        end
      end
    end
  end
end
