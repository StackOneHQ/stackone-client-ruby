# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AtsDocumentApiModel
        extend T::Sig
        include Crystalline::MetadataFields

        # The category of the the document
        field :category, Crystalline::Nilable.new(Models::Shared::AtsDocumentApiModelCategory), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('category') } }
        # The categoryId of the documents
        field :category_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('category_id') } }
        # The content of the file. Deprecated, use `url` and `file_format` one level up instead
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :contents, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::Content)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('contents') } }
        # The creation date of the file
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The file format of the file
        field :file_format, Crystalline::Nilable.new(Models::Shared::FileFormat), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_format') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The name of the file
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # URL where the file content is located
        field :remote_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_url') } }
        # The content type of the document
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :type, Crystalline::Nilable.new(Models::Shared::AtsDocumentApiModelType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }
        # The update date of the file
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(category: T.nilable(Models::Shared::AtsDocumentApiModelCategory), category_id: T.nilable(::String), contents: T.nilable(T::Array[Models::Shared::Content]), created_at: T.nilable(::DateTime), file_format: T.nilable(Models::Shared::FileFormat), id: T.nilable(::String), name: T.nilable(::String), remote_id: T.nilable(::String), remote_url: T.nilable(::String), type: T.nilable(Models::Shared::AtsDocumentApiModelType), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object]), updated_at: T.nilable(::DateTime)).void }
        def initialize(category: nil, category_id: nil, contents: nil, created_at: nil, file_format: nil, id: nil, name: nil, remote_id: nil, remote_url: nil, type: nil, unified_custom_fields: nil, updated_at: nil)
          @category = category
          @category_id = category_id
          @contents = contents
          @created_at = created_at
          @file_format = file_format
          @id = id
          @name = name
          @remote_id = remote_id
          @remote_url = remote_url
          @type = type
          @unified_custom_fields = unified_custom_fields
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @category == other.category
          return false unless @category_id == other.category_id
          return false unless @contents == other.contents
          return false unless @created_at == other.created_at
          return false unless @file_format == other.file_format
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @remote_id == other.remote_id
          return false unless @remote_url == other.remote_url
          return false unless @type == other.type
          return false unless @unified_custom_fields == other.unified_custom_fields
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
