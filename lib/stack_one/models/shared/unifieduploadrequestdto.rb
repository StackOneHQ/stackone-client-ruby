# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class UnifiedUploadRequestDto < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The confidentiality level of the file to be uploaded
      field :confidential, T.nilable(::StackOne::Shared::UnifiedUploadRequestDtoConfidential), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('confidential') } }
      # The base64 encoded content of the file to upload
      field :content, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('content') } }
      # The comma separated list of fields to return in the response (if empty, all fields are returned)
      field :fields_, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('fields') } }
      # The file format of the file
      field :file_format, T.nilable(::StackOne::Shared::UnifiedUploadRequestDtoFileFormat), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_format') } }
      # The filename of the file to upload
      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # The unified cursor
      field :next_, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('next') } }
      # The page number of the results to fetch
      # 
      # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
      field :page, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('page') } }
      # The number of results per page
      field :page_size, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('page_size') } }
      # The location, category or path for the file to be uploaded to
      field :path, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('path') } }
      # Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
      field :proxy, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('proxy') } }
      # Indicates that the raw request result is returned
      field :raw, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('raw') } }
      # Use a string with a date to only select results updated after that given date
      field :updated_after, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_after') } }


      sig { params(confidential: T.nilable(::StackOne::Shared::UnifiedUploadRequestDtoConfidential), content: T.nilable(::String), fields_: T.nilable(::String), file_format: T.nilable(::StackOne::Shared::UnifiedUploadRequestDtoFileFormat), name: T.nilable(::String), next_: T.nilable(::String), page: T.nilable(::String), page_size: T.nilable(::String), path: T.nilable(::String), proxy: T.nilable(T::Hash[Symbol, ::Object]), raw: T.nilable(T::Boolean), updated_after: T.nilable(::String)).void }
      def initialize(confidential: nil, content: nil, fields_: nil, file_format: nil, name: nil, next_: nil, page: nil, page_size: nil, path: nil, proxy: nil, raw: nil, updated_after: nil)
        @confidential = confidential
        @content = content
        @fields_ = fields_
        @file_format = file_format
        @name = name
        @next_ = next_
        @page = page
        @page_size = page_size
        @path = path
        @proxy = proxy
        @raw = raw
        @updated_after = updated_after
      end
    end
  end
end
