# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class BackgroundCheckOrder
        extend T::Sig
        include Crystalline::MetadataFields


        field :application, T.nilable(Models::Shared::BackgroundCheckOrderApplication), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('application') } }

        field :candidate, T.nilable(Models::Shared::BackgroundCheckOrderCandidate), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('candidate') } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }

        field :job, T.nilable(Models::Shared::BackgroundCheckOrderJob), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('job') } }

        field :package, T.nilable(Models::Shared::BackgroundCheckOrderPackage), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('package') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }

        field :requester, T.nilable(Models::Shared::BackgroundCheckOrderRequester), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('requester') } }
        # Results update url
        field :results_update_url, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('results_update_url') } }


        sig { params(application: T.nilable(Models::Shared::BackgroundCheckOrderApplication), candidate: T.nilable(Models::Shared::BackgroundCheckOrderCandidate), id: T.nilable(::String), job: T.nilable(Models::Shared::BackgroundCheckOrderJob), package: T.nilable(Models::Shared::BackgroundCheckOrderPackage), remote_id: T.nilable(::String), requester: T.nilable(Models::Shared::BackgroundCheckOrderRequester), results_update_url: T.nilable(::String)).void }
        def initialize(application: nil, candidate: nil, id: nil, job: nil, package: nil, remote_id: nil, requester: nil, results_update_url: nil)
          @application = application
          @candidate = candidate
          @id = id
          @job = job
          @package = package
          @remote_id = remote_id
          @requester = requester
          @results_update_url = results_update_url
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @application == other.application
          return false unless @candidate == other.candidate
          return false unless @id == other.id
          return false unless @job == other.job
          return false unless @package == other.package
          return false unless @remote_id == other.remote_id
          return false unless @requester == other.requester
          return false unless @results_update_url == other.results_update_url
          true
        end
      end
    end
  end
end
