# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class JsonRpcMessageDto
        extend T::Sig
        include Crystalline::MetadataFields

        # JSON-RPC protocol version
        field :jsonrpc, ::String, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('jsonrpc'), required: true } }
        # JSON-RPC method name
        field :method, ::String, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('method'), required: true } }
        # Request id (arbitrary JSON scalar)
        field :id, Crystalline::Nilable.new(Models::Shared::Id), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Method parameters (arbitrary JSON)
        field :params, Crystalline::Nilable.new(Models::Shared::Params), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('params') } }

        sig { params(jsonrpc: ::String, method: ::String, id: T.nilable(Models::Shared::Id), params: T.nilable(Models::Shared::Params)).void }
        def initialize(jsonrpc:, method:, id: nil, params: nil)
          @jsonrpc = jsonrpc
          @method = method
          @id = id
          @params = params
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @jsonrpc == other.jsonrpc
          return false unless @method == other.method
          return false unless @id == other.id
          return false unless @params == other.params
          true
        end
      end
    end
  end
end
