# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class TicketingAttachment
        extend T::Sig
        include Crystalline::MetadataFields

        # The timestamp when the record was created
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The type of the file
        field :file_format, Crystalline::Nilable.new(Models::Shared::TicketingAttachmentFileFormat), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_format') } }
        # The name of the file
        field :file_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_name') } }
        # The resource URL of the file
        field :file_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_url') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # The size of the file
        field :size, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('size') } }
        # The reference ticket ID the attachment belongs to
        field :ticket_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('ticket_id') } }
        # The timestamp when the record was last updated
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The user who uploaded the file
        field :user_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('user_id') } }

        sig { params(created_at: T.nilable(::DateTime), file_format: T.nilable(Models::Shared::TicketingAttachmentFileFormat), file_name: T.nilable(::String), file_url: T.nilable(::String), id: T.nilable(::String), remote_id: T.nilable(::String), size: T.nilable(::Float), ticket_id: T.nilable(::String), updated_at: T.nilable(::DateTime), user_id: T.nilable(::String)).void }
        def initialize(created_at: nil, file_format: nil, file_name: nil, file_url: nil, id: nil, remote_id: nil, size: nil, ticket_id: nil, updated_at: nil, user_id: nil)
          @created_at = created_at
          @file_format = file_format
          @file_name = file_name
          @file_url = file_url
          @id = id
          @remote_id = remote_id
          @size = size
          @ticket_id = ticket_id
          @updated_at = updated_at
          @user_id = user_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @file_format == other.file_format
          return false unless @file_name == other.file_name
          return false unless @file_url == other.file_url
          return false unless @id == other.id
          return false unless @remote_id == other.remote_id
          return false unless @size == other.size
          return false unless @ticket_id == other.ticket_id
          return false unless @updated_at == other.updated_at
          return false unless @user_id == other.user_id
          true
        end
      end
    end
  end
end
