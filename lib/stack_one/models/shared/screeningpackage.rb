# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class ScreeningPackage
        extend T::Sig
        include Crystalline::MetadataFields

        # The name of the screening package
        field :name, ::String, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name'), required: true } }
        # The description of the screening package
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }

        sig { params(name: ::String, description: T.nilable(::String), id: T.nilable(::String), remote_id: T.nilable(::String), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object])).void }
        def initialize(name:, description: nil, id: nil, remote_id: nil, unified_custom_fields: nil)
          @name = name
          @description = description
          @id = id
          @remote_id = remote_id
          @unified_custom_fields = unified_custom_fields
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @description == other.description
          return false unless @id == other.id
          return false unless @remote_id == other.remote_id
          return false unless @unified_custom_fields == other.unified_custom_fields
          true
        end
      end
    end
  end
end
