# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    
      # The type of employment
      class CreateEmploymentApiModelType
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The label of the employment type
        field :label, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('label') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # The type of employment (e.g., contractor, permanent)
        field :type, Crystalline::Nilable.new(Models::Shared::CreateEmploymentApiModelSchemasType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }

        sig { params(id: T.nilable(::String), label: T.nilable(::String), remote_id: T.nilable(::String), type: T.nilable(Models::Shared::CreateEmploymentApiModelSchemasType)).void }
        def initialize(id: nil, label: nil, remote_id: nil, type: nil)
          @id = id
          @label = label
          @remote_id = remote_id
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @label == other.label
          return false unless @remote_id == other.remote_id
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
