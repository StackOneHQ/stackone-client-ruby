# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class ActionsMeta
        extend T::Sig
        include Crystalline::MetadataFields

        # The list of actions available for this provider
        field :actions, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::ActionMetaItem)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('actions') } }
        # The authentication methods supported by the provider
        field :authentication, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AuthenticationMetaItem)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('authentication') } }
        # The description of the provider
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # The icon URL for the provider
        field :icon, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('icon') } }
        # The unique key for the provider
        field :key, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('key') } }
        # The name of the provider
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # The version of the actions metadata
        field :version, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('version') } }

        sig { params(actions: T.nilable(T::Array[Models::Shared::ActionMetaItem]), authentication: T.nilable(T::Array[Models::Shared::AuthenticationMetaItem]), description: T.nilable(::String), icon: T.nilable(::String), key: T.nilable(::String), name: T.nilable(::String), version: T.nilable(::String)).void }
        def initialize(actions: nil, authentication: nil, description: nil, icon: nil, key: nil, name: nil, version: nil)
          @actions = actions
          @authentication = authentication
          @description = description
          @icon = icon
          @key = key
          @name = name
          @version = version
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @actions == other.actions
          return false unless @authentication == other.authentication
          return false unless @description == other.description
          return false unless @icon == other.icon
          return false unless @key == other.key
          return false unless @name == other.name
          return false unless @version == other.version
          true
        end
      end
    end
  end
end
