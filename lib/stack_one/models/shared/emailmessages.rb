# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class EmailMessages < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # Unique identifier
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }

      field :message_content, T.nilable(::StackOne::Shared::MessageContent), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('message_content') } }

      field :message_type, T.nilable(::StackOne::Shared::EmailMessagesMessageType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('message_type') } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # Provider's unique identifier
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }


      sig { params(id: T.nilable(::String), message_content: T.nilable(::StackOne::Shared::MessageContent), message_type: T.nilable(::StackOne::Shared::EmailMessagesMessageType), name: T.nilable(::String), remote_id: T.nilable(::String)).void }
      def initialize(id: nil, message_content: nil, message_type: nil, name: nil, remote_id: nil)
        @id = id
        @message_content = message_content
        @message_type = message_type
        @name = name
        @remote_id = remote_id
      end
    end
  end
end
