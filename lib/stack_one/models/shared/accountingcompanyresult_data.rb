# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AccountingCompanyResultData
        extend T::Sig
        include Crystalline::MetadataFields

        # Default currency for the company
        field :base_currency, Crystalline::Nilable.new(Models::Shared::AccountingCompanyResultBaseCurrency), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('base_currency') } }
        # Fiscal year start day (1-31)
        field :fiscal_year_start_day, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('fiscal_year_start_day') } }
        # Fiscal year start month (1-12)
        field :fiscal_year_start_month, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('fiscal_year_start_month') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Name of the company
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }

        sig { params(base_currency: T.nilable(Models::Shared::AccountingCompanyResultBaseCurrency), fiscal_year_start_day: T.nilable(::Float), fiscal_year_start_month: T.nilable(::Float), id: T.nilable(::String), name: T.nilable(::String), remote_id: T.nilable(::String)).void }
        def initialize(base_currency: nil, fiscal_year_start_day: nil, fiscal_year_start_month: nil, id: nil, name: nil, remote_id: nil)
          @base_currency = base_currency
          @fiscal_year_start_day = fiscal_year_start_day
          @fiscal_year_start_month = fiscal_year_start_month
          @id = id
          @name = name
          @remote_id = remote_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @base_currency == other.base_currency
          return false unless @fiscal_year_start_day == other.fiscal_year_start_day
          return false unless @fiscal_year_start_month == other.fiscal_year_start_month
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @remote_id == other.remote_id
          true
        end
      end
    end
  end
end
