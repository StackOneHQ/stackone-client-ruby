# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class CustomFields
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The name of the custom field.
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Provider's unique identifier for the value of the custom field.
        field :remote_value_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_value_id') } }
        # The value associated with the custom field.
        field :value, Crystalline::Nilable.new(Crystalline::Union.new(::String, ::Float, Crystalline::Boolean.new, Models::Shared::CustomFields4, Crystalline::Array.new(::Object), ::DateTime)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value') } }
        # The unique identifier for the value of the custom field.
        field :value_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value_id') } }

        sig { params(id: T.nilable(::String), name: T.nilable(::String), remote_id: T.nilable(::String), remote_value_id: T.nilable(::String), value: T.nilable(T.any(::String, ::Float, T::Boolean, Models::Shared::CustomFields4, T::Array[::Object], ::DateTime)), value_id: T.nilable(::String)).void }
        def initialize(id: nil, name: nil, remote_id: nil, remote_value_id: nil, value: nil, value_id: nil)
          @id = id
          @name = name
          @remote_id = remote_id
          @remote_value_id = remote_value_id
          @value = value
          @value_id = value_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @remote_id == other.remote_id
          return false unless @remote_value_id == other.remote_value_id
          return false unless @value == other.value
          return false unless @value_id == other.value_id
          true
        end
      end
    end
  end
end
