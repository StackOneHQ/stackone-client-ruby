# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AtsCreateCandidatesAssessmentsRequestDtoApplication
        extend T::Sig
        include Crystalline::MetadataFields


        field :application_status, Crystalline::Nilable.new(Models::Shared::AtsCreateCandidatesAssessmentsRequestDtoApplicationStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('application_status') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Value to pass through to the provider
        field :passthrough, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('passthrough') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }

        sig { params(application_status: T.nilable(Models::Shared::AtsCreateCandidatesAssessmentsRequestDtoApplicationStatus), id: T.nilable(::String), passthrough: T.nilable(T::Hash[Symbol, ::Object]), remote_id: T.nilable(::String)).void }
        def initialize(application_status: nil, id: nil, passthrough: nil, remote_id: nil)
          @application_status = application_status
          @id = id
          @passthrough = passthrough
          @remote_id = remote_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @application_status == other.application_status
          return false unless @id == other.id
          return false unless @passthrough == other.passthrough
          return false unless @remote_id == other.remote_id
          true
        end
      end
    end
  end
end
