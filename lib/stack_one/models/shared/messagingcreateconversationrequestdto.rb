# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class MessagingCreateConversationRequestDto
        extend T::Sig
        include Crystalline::MetadataFields

        # Name or title of the conversation
        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # List of participant user IDs in the conversation
        field :participants, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('participants') } }
        # Whether the conversation is private
        field :private, T.nilable(T.any(T::Boolean, Models::Shared::MessagingCreateConversationRequestDto2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('private') } }


        sig { params(name: T.nilable(::String), participants: T.nilable(T::Array[::String]), private: T.nilable(T.any(T::Boolean, Models::Shared::MessagingCreateConversationRequestDto2))).void }
        def initialize(name: nil, participants: nil, private: nil)
          @name = name
          @participants = participants
          @private = private
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @participants == other.participants
          return false unless @private == other.private
          true
        end
      end
    end
  end
end
