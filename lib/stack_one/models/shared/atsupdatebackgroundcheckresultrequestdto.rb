# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class AtsUpdateBackgroundCheckResultRequestDto < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :attachments, T.nilable(T::Array[::StackOne::Shared::Attachment]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('attachments') } }

      field :candidate, T.nilable(::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoCandidate), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('candidate') } }
      # Unique identifier
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # Value to pass through to the provider
      field :passthrough, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('passthrough') } }

      field :result, T.nilable(::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoResult), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('result') } }
      # The test`s result url
      field :result_url, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('result_url') } }

      field :score, T.nilable(::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoScore), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('score') } }
      # The start date of the candidate test
      field :start_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The submission date of the candidate test
      field :submission_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('submission_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The summary about the result of the test
      field :summary, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('summary') } }


      sig { params(attachments: T.nilable(T::Array[::StackOne::Shared::Attachment]), candidate: T.nilable(::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoCandidate), id: T.nilable(::String), passthrough: T.nilable(T::Hash[Symbol, ::Object]), result: T.nilable(::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoResult), result_url: T.nilable(::String), score: T.nilable(::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoScore), start_date: T.nilable(::DateTime), submission_date: T.nilable(::DateTime), summary: T.nilable(::String)).void }
      def initialize(attachments: nil, candidate: nil, id: nil, passthrough: nil, result: nil, result_url: nil, score: nil, start_date: nil, submission_date: nil, summary: nil)
        @attachments = attachments
        @candidate = candidate
        @id = id
        @passthrough = passthrough
        @result = result
        @result_url = result_url
        @score = score
        @start_date = start_date
        @submission_date = submission_date
        @summary = summary
      end
    end
  end
end
