# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class InterviewsResult
        extend T::Sig
        include Crystalline::MetadataFields


        field :data, Models::Shared::Interview, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('data'), required: true } }

        field :raw, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::RawResponse)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('raw') } }

        sig { params(data: Models::Shared::Interview, raw: T.nilable(T::Array[Models::Shared::RawResponse])).void }
        def initialize(data:, raw: nil)
          @data = data
          @raw = raw
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @data == other.data
          return false unless @raw == other.raw
          true
        end
      end
    end
  end
end
