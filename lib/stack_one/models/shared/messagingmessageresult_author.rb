# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    
      # Author of the message
      class MessagingMessageResultAuthor
        extend T::Sig
        include Crystalline::MetadataFields

        # The user active status
        field :active, T.nilable(T.any(T::Boolean, Models::Shared::MessagingMessageResult2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('active') } }
        # The created_at date
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The user email
        field :email, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('email') } }
        # The external ID associated with this user
        field :external_reference, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('external_reference') } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The user name
        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # The user phone number
        field :phone_number, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('phone_number') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }
        # The updated_at date
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


        sig { params(active: T.nilable(T.any(T::Boolean, Models::Shared::MessagingMessageResult2)), created_at: T.nilable(::DateTime), email: T.nilable(::String), external_reference: T.nilable(::String), id: T.nilable(::String), name: T.nilable(::String), phone_number: T.nilable(::String), remote_id: T.nilable(::String), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object]), updated_at: T.nilable(::DateTime)).void }
        def initialize(active: nil, created_at: nil, email: nil, external_reference: nil, id: nil, name: nil, phone_number: nil, remote_id: nil, unified_custom_fields: nil, updated_at: nil)
          @active = active
          @created_at = created_at
          @email = email
          @external_reference = external_reference
          @id = id
          @name = name
          @phone_number = phone_number
          @remote_id = remote_id
          @unified_custom_fields = unified_custom_fields
          @updated_at = updated_at
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @active == other.active
          return false unless @created_at == other.created_at
          return false unless @email == other.email
          return false unless @external_reference == other.external_reference
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @phone_number == other.phone_number
          return false unless @remote_id == other.remote_id
          return false unless @unified_custom_fields == other.unified_custom_fields
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
