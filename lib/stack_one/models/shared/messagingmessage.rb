# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class MessagingMessage
        extend T::Sig
        include Crystalline::MetadataFields

        # List of attachments in the message
        field :attachments, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('attachments') } }
        # Author of the message
        field :author, T.nilable(Models::Shared::Author), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('author') } }
        # Content of the message
        field :content, T.nilable(Models::Shared::MessagingMessageContent), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('content') } }
        # Timestamp when the message was created
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # ID of the parent message if this is a reply
        field :parent_message_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('parent_message_id') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Timestamp when the message was last updated
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


        sig { params(attachments: T.nilable(T::Array[::String]), author: T.nilable(Models::Shared::Author), content: T.nilable(Models::Shared::MessagingMessageContent), created_at: T.nilable(::DateTime), id: T.nilable(::String), parent_message_id: T.nilable(::String), remote_id: T.nilable(::String), updated_at: T.nilable(::DateTime)).void }
        def initialize(attachments: nil, author: nil, content: nil, created_at: nil, id: nil, parent_message_id: nil, remote_id: nil, updated_at: nil)
          @attachments = attachments
          @author = author
          @content = content
          @created_at = created_at
          @id = id
          @parent_message_id = parent_message_id
          @remote_id = remote_id
          @updated_at = updated_at
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @attachments == other.attachments
          return false unless @author == other.author
          return false unless @content == other.content
          return false unless @created_at == other.created_at
          return false unless @id == other.id
          return false unless @parent_message_id == other.parent_message_id
          return false unless @remote_id == other.remote_id
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
