# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class JobPosting
        extend T::Sig
        include Crystalline::MetadataFields


        field :compensation, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::JobPostingCompensation)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('compensation') } }

        field :content, Crystalline::Nilable.new(Models::Shared::JobPostingContent), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('content') } }
        # Date of creation
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :employment_contract_type, Crystalline::Nilable.new(Models::Shared::JobPostingEmploymentContractType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employment_contract_type') } }

        field :employment_type, Crystalline::Nilable.new(Models::Shared::JobPostingEmploymentType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employment_type') } }

        field :external_apply_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('external_apply_url') } }

        field :external_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('external_url') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }

        field :internal, Crystalline::Nilable.new(Models::Shared::Internal), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('internal'), 'decoder': Utils.enum_from_string(Models::Shared::Internal, true) } }

        field :job_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('job_id') } }

        field :locations, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::JobPostingLocation)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('locations') } }

        field :questionnaires, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::JobPostingQuestionnaire)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('questionnaires') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Provider's unique identifier of the job posting
        field :remote_job_posting_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_job_posting_id') } }
        # The posting start date
        field :start_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_date'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :status, Crystalline::Nilable.new(Models::Shared::JobPostingStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }

        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('title') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }
        # Date of last update
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(compensation: T.nilable(T::Array[Models::Shared::JobPostingCompensation]), content: T.nilable(Models::Shared::JobPostingContent), created_at: T.nilable(::DateTime), employment_contract_type: T.nilable(Models::Shared::JobPostingEmploymentContractType), employment_type: T.nilable(Models::Shared::JobPostingEmploymentType), external_apply_url: T.nilable(::String), external_url: T.nilable(::String), id: T.nilable(::String), internal: T.nilable(Models::Shared::Internal), job_id: T.nilable(::String), locations: T.nilable(T::Array[Models::Shared::JobPostingLocation]), questionnaires: T.nilable(T::Array[Models::Shared::JobPostingQuestionnaire]), remote_id: T.nilable(::String), remote_job_posting_id: T.nilable(::String), start_date: T.nilable(::DateTime), status: T.nilable(Models::Shared::JobPostingStatus), title: T.nilable(::String), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object]), updated_at: T.nilable(::DateTime)).void }
        def initialize(compensation: nil, content: nil, created_at: nil, employment_contract_type: nil, employment_type: nil, external_apply_url: nil, external_url: nil, id: nil, internal: nil, job_id: nil, locations: nil, questionnaires: nil, remote_id: nil, remote_job_posting_id: nil, start_date: nil, status: nil, title: nil, unified_custom_fields: nil, updated_at: nil)
          @compensation = compensation
          @content = content
          @created_at = created_at
          @employment_contract_type = employment_contract_type
          @employment_type = employment_type
          @external_apply_url = external_apply_url
          @external_url = external_url
          @id = id
          @internal = internal
          @job_id = job_id
          @locations = locations
          @questionnaires = questionnaires
          @remote_id = remote_id
          @remote_job_posting_id = remote_job_posting_id
          @start_date = start_date
          @status = status
          @title = title
          @unified_custom_fields = unified_custom_fields
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @compensation == other.compensation
          return false unless @content == other.content
          return false unless @created_at == other.created_at
          return false unless @employment_contract_type == other.employment_contract_type
          return false unless @employment_type == other.employment_type
          return false unless @external_apply_url == other.external_apply_url
          return false unless @external_url == other.external_url
          return false unless @id == other.id
          return false unless @internal == other.internal
          return false unless @job_id == other.job_id
          return false unless @locations == other.locations
          return false unless @questionnaires == other.questionnaires
          return false unless @remote_id == other.remote_id
          return false unless @remote_job_posting_id == other.remote_job_posting_id
          return false unless @start_date == other.start_date
          return false unless @status == other.status
          return false unless @title == other.title
          return false unless @unified_custom_fields == other.unified_custom_fields
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
