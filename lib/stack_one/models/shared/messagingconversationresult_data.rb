# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class MessagingConversationResultData
        extend T::Sig
        include Crystalline::MetadataFields

        # Timestamp when the conversation was created
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Timestamp of the last message in the conversation
        field :last_message_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('last_message_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Name or title of the conversation
        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # List of participant user IDs in the conversation
        field :participants, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('participants') } }
        # Whether the conversation is private
        field :private, T.nilable(T.any(T::Boolean, Models::Shared::MessagingConversationResult2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('private') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }


        sig { params(created_at: T.nilable(::DateTime), id: T.nilable(::String), last_message_at: T.nilable(::DateTime), name: T.nilable(::String), participants: T.nilable(T::Array[::String]), private: T.nilable(T.any(T::Boolean, Models::Shared::MessagingConversationResult2)), remote_id: T.nilable(::String)).void }
        def initialize(created_at: nil, id: nil, last_message_at: nil, name: nil, participants: nil, private: nil, remote_id: nil)
          @created_at = created_at
          @id = id
          @last_message_at = last_message_at
          @name = name
          @participants = participants
          @private = private
          @remote_id = remote_id
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @id == other.id
          return false unless @last_message_at == other.last_message_at
          return false unless @name == other.name
          return false unless @participants == other.participants
          return false unless @private == other.private
          return false unless @remote_id == other.remote_id
          true
        end
      end
    end
  end
end
