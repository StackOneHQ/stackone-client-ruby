# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class MessagingUser
        extend T::Sig
        include Crystalline::MetadataFields

        # Whether the user is active
        field :active, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Boolean.new, Models::Shared::MessagingUser2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('active') } }
        # Whether the user is a bot
        field :bot, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Boolean.new, Models::Shared::MessagingUserSchemas2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('bot') } }
        # Email address of the user
        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('email') } }
        # First name of the user
        field :first_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('first_name') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Last name of the user
        field :last_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('last_name') } }
        # Full name of the user
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Username of the user
        field :username, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('username') } }

        sig { params(active: T.nilable(T.any(T::Boolean, Models::Shared::MessagingUser2)), bot: T.nilable(T.any(T::Boolean, Models::Shared::MessagingUserSchemas2)), email: T.nilable(::String), first_name: T.nilable(::String), id: T.nilable(::String), last_name: T.nilable(::String), name: T.nilable(::String), remote_id: T.nilable(::String), username: T.nilable(::String)).void }
        def initialize(active: nil, bot: nil, email: nil, first_name: nil, id: nil, last_name: nil, name: nil, remote_id: nil, username: nil)
          @active = active
          @bot = bot
          @email = email
          @first_name = first_name
          @id = id
          @last_name = last_name
          @name = name
          @remote_id = remote_id
          @username = username
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @active == other.active
          return false unless @bot == other.bot
          return false unless @email == other.email
          return false unless @first_name == other.first_name
          return false unless @id == other.id
          return false unless @last_name == other.last_name
          return false unless @name == other.name
          return false unless @remote_id == other.remote_id
          return false unless @username == other.username
          true
        end
      end
    end
  end
end
