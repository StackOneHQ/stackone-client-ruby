# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class JournalLine
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the ledger account this line references
        field :account_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('account_id') } }
        # Type of the account
        field :account_type, Crystalline::Nilable.new(Models::Shared::JournalLineAccountType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('account_type') } }
        # Amount of the journal line in minor units, e.g. 10010 for 100.10 USD. Positive for debit, negative for credit
        field :amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('amount') } }
        # Currency code for this line
        field :currency_code, Crystalline::Nilable.new(Models::Shared::JournalLineCurrencyCode), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('currency_code') } }
        # Description of the journal line
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # Exchange rate to company base currency
        field :exchange_rate, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('exchange_rate') } }
        # Unique identifier for the journal line
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Tax amount of the line in minor units, e.g. 10010 for 100.10 USD
        field :tax_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('tax_amount') } }
        # Tax rate percentage
        field :tax_rate_percentage, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('tax_rate_percentage') } }

        sig { params(account_id: T.nilable(::String), account_type: T.nilable(Models::Shared::JournalLineAccountType), amount: T.nilable(::Float), currency_code: T.nilable(Models::Shared::JournalLineCurrencyCode), description: T.nilable(::String), exchange_rate: T.nilable(::Float), id: T.nilable(::String), tax_amount: T.nilable(::Float), tax_rate_percentage: T.nilable(::Float)).void }
        def initialize(account_id: nil, account_type: nil, amount: nil, currency_code: nil, description: nil, exchange_rate: nil, id: nil, tax_amount: nil, tax_rate_percentage: nil)
          @account_id = account_id
          @account_type = account_type
          @amount = amount
          @currency_code = currency_code
          @description = description
          @exchange_rate = exchange_rate
          @id = id
          @tax_amount = tax_amount
          @tax_rate_percentage = tax_rate_percentage
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @account_type == other.account_type
          return false unless @amount == other.amount
          return false unless @currency_code == other.currency_code
          return false unless @description == other.description
          return false unless @exchange_rate == other.exchange_rate
          return false unless @id == other.id
          return false unless @tax_amount == other.tax_amount
          return false unless @tax_rate_percentage == other.tax_rate_percentage
          true
        end
      end
    end
  end
end
