# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class Files
        extend T::Sig
        include Crystalline::MetadataFields

        # List of containing parent Folder IDs in descending order
        field :all_parent_folder_ids, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('all_parent_folder_ids') } }
        # The created date of the file
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Default download format
        field :default_download_format, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('default_download_format') } }
        # The description of the file
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # The parent drive ID associated with this file
        field :drive_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('drive_id') } }
        # List of supported export formats
        field :export_formats, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('export_formats') } }
        # The file format of the file
        field :file_format, Crystalline::Nilable.new(Models::Shared::FilesFileFormat), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_format') } }
        # The parent folder ID associated with this file
        field :folder_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('folder_id') } }
        # Whether the file has children
        field :has_children, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Boolean.new, Models::Shared::Files2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('has_children') } }
        # Whether the file has content
        field :has_content, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Boolean.new, Models::Shared::FilesSchemas2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('has_content') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The name associated with this file
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # The user ID of owner of this file
        field :owner_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('owner_id') } }
        # The path where the file is stored
        field :path, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('path') } }
        # Provider's unique identifier of the parent drive associated with this file
        field :remote_drive_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_drive_id') } }
        # Provider's unique identifier of the parent folder associated with this file
        field :remote_folder_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_folder_id') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Provider's unique identifier of the owner of this file
        field :remote_owner_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_owner_id') } }
        # The size of this file
        field :size, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('size') } }
        # The last updated date of the file
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The url of the file
        field :url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('url') } }

        sig { params(all_parent_folder_ids: T.nilable(T::Array[::String]), created_at: T.nilable(::DateTime), default_download_format: T.nilable(::String), description: T.nilable(::String), drive_id: T.nilable(::String), export_formats: T.nilable(T::Array[::String]), file_format: T.nilable(Models::Shared::FilesFileFormat), folder_id: T.nilable(::String), has_children: T.nilable(T.any(T::Boolean, Models::Shared::Files2)), has_content: T.nilable(T.any(T::Boolean, Models::Shared::FilesSchemas2)), id: T.nilable(::String), name: T.nilable(::String), owner_id: T.nilable(::String), path: T.nilable(::String), remote_drive_id: T.nilable(::String), remote_folder_id: T.nilable(::String), remote_id: T.nilable(::String), remote_owner_id: T.nilable(::String), size: T.nilable(::Float), updated_at: T.nilable(::DateTime), url: T.nilable(::String)).void }
        def initialize(all_parent_folder_ids: nil, created_at: nil, default_download_format: nil, description: nil, drive_id: nil, export_formats: nil, file_format: nil, folder_id: nil, has_children: nil, has_content: nil, id: nil, name: nil, owner_id: nil, path: nil, remote_drive_id: nil, remote_folder_id: nil, remote_id: nil, remote_owner_id: nil, size: nil, updated_at: nil, url: nil)
          @all_parent_folder_ids = all_parent_folder_ids
          @created_at = created_at
          @default_download_format = default_download_format
          @description = description
          @drive_id = drive_id
          @export_formats = export_formats
          @file_format = file_format
          @folder_id = folder_id
          @has_children = has_children
          @has_content = has_content
          @id = id
          @name = name
          @owner_id = owner_id
          @path = path
          @remote_drive_id = remote_drive_id
          @remote_folder_id = remote_folder_id
          @remote_id = remote_id
          @remote_owner_id = remote_owner_id
          @size = size
          @updated_at = updated_at
          @url = url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @all_parent_folder_ids == other.all_parent_folder_ids
          return false unless @created_at == other.created_at
          return false unless @default_download_format == other.default_download_format
          return false unless @description == other.description
          return false unless @drive_id == other.drive_id
          return false unless @export_formats == other.export_formats
          return false unless @file_format == other.file_format
          return false unless @folder_id == other.folder_id
          return false unless @has_children == other.has_children
          return false unless @has_content == other.has_content
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @owner_id == other.owner_id
          return false unless @path == other.path
          return false unless @remote_drive_id == other.remote_drive_id
          return false unless @remote_folder_id == other.remote_folder_id
          return false unless @remote_id == other.remote_id
          return false unless @remote_owner_id == other.remote_owner_id
          return false unless @size == other.size
          return false unless @updated_at == other.updated_at
          return false unless @url == other.url
          true
        end
      end
    end
  end
end
