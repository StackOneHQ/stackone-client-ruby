# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class TicketingTicketUpdateRequestDto
        extend T::Sig
        include Crystalline::MetadataFields

        # Agents assigned to the ticket
        field :assignees, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('assignees') } }
        # Components to associate with the ticket
        field :component_ids, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('component_ids') } }
        # Array of content associated with the ticket
        field :content, T.nilable(T::Array[Models::Shared::TicketingContent]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('content') } }
        # ID of the parent ticket if this is a sub-ticket
        field :parent_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('parent_id') } }
        # Priority of the ticket
        field :priority, T.nilable(Models::Shared::TicketingTicketUpdateRequestDtoPriority), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('priority') } }
        # Project the ticket belongs to
        field :project_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('project_id') } }
        # Users who reported the ticket
        field :reporters, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('reporters') } }
        # Current status of the ticket
        field :status, T.nilable(Models::Shared::TicketingTicketUpdateRequestDtoStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # The tags of the ticket
        field :tags, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('tags') } }
        # The title or subject of the ticket
        field :title, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('title') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }


        sig { params(assignees: T.nilable(T::Array[::String]), component_ids: T.nilable(::String), content: T.nilable(T::Array[Models::Shared::TicketingContent]), parent_id: T.nilable(::String), priority: T.nilable(Models::Shared::TicketingTicketUpdateRequestDtoPriority), project_id: T.nilable(::String), reporters: T.nilable(T::Array[::String]), status: T.nilable(Models::Shared::TicketingTicketUpdateRequestDtoStatus), tags: T.nilable(T::Array[::String]), title: T.nilable(::String), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object])).void }
        def initialize(assignees: nil, component_ids: nil, content: nil, parent_id: nil, priority: nil, project_id: nil, reporters: nil, status: nil, tags: nil, title: nil, unified_custom_fields: nil)
          @assignees = assignees
          @component_ids = component_ids
          @content = content
          @parent_id = parent_id
          @priority = priority
          @project_id = project_id
          @reporters = reporters
          @status = status
          @tags = tags
          @title = title
          @unified_custom_fields = unified_custom_fields
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @assignees == other.assignees
          return false unless @component_ids == other.component_ids
          return false unless @content == other.content
          return false unless @parent_id == other.parent_id
          return false unless @priority == other.priority
          return false unless @project_id == other.project_id
          return false unless @reporters == other.reporters
          return false unless @status == other.status
          return false unless @tags == other.tags
          return false unless @title == other.title
          return false unless @unified_custom_fields == other.unified_custom_fields
          true
        end
      end
    end
  end
end
