# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class Task
        extend T::Sig
        include Crystalline::MetadataFields

        # The ID of the employee who assigned this task
        field :assigned_by_employee_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('assigned_by_employee_id') } }
        # The name of the employee who assigned this task
        field :assigned_by_employee_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('assigned_by_employee_name') } }
        # The documents attached to this task
        field :attachments, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::File)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('attachments') } }
        # The comments associated with this task
        field :comments, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::TaskCommentApiModel)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('comments') } }
        # The completion date of the task
        field :completion_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('completion_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The creation date of this task
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The description of the task
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # The due date of the task
        field :due_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('due_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The employee ID associated with this task
        field :employee_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employee_id') } }
        # List of extracted links from the task
        field :extracted_links, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('extracted_links') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Link to the task in the provider system
        field :link_to_task, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('link_to_task') } }
        # The name of the task
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # ID of the next task in sequence
        field :next_task_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('next_task_id') } }
        # Name of the parent process of this task
        field :parent_process_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('parent_process_name') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # The status of the task
        field :status, Crystalline::Nilable.new(Models::Shared::TaskStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # The type of the task
        field :type, Crystalline::Nilable.new(Models::Shared::TaskType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }
        # The last updated date of this task
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(assigned_by_employee_id: T.nilable(::String), assigned_by_employee_name: T.nilable(::String), attachments: T.nilable(T::Array[Models::Shared::File]), comments: T.nilable(T::Array[Models::Shared::TaskCommentApiModel]), completion_date: T.nilable(::DateTime), created_at: T.nilable(::DateTime), description: T.nilable(::String), due_date: T.nilable(::DateTime), employee_id: T.nilable(::String), extracted_links: T.nilable(T::Array[::String]), id: T.nilable(::String), link_to_task: T.nilable(::String), name: T.nilable(::String), next_task_id: T.nilable(::String), parent_process_name: T.nilable(::String), remote_id: T.nilable(::String), status: T.nilable(Models::Shared::TaskStatus), type: T.nilable(Models::Shared::TaskType), updated_at: T.nilable(::DateTime)).void }
        def initialize(assigned_by_employee_id: nil, assigned_by_employee_name: nil, attachments: nil, comments: nil, completion_date: nil, created_at: nil, description: nil, due_date: nil, employee_id: nil, extracted_links: nil, id: nil, link_to_task: nil, name: nil, next_task_id: nil, parent_process_name: nil, remote_id: nil, status: nil, type: nil, updated_at: nil)
          @assigned_by_employee_id = assigned_by_employee_id
          @assigned_by_employee_name = assigned_by_employee_name
          @attachments = attachments
          @comments = comments
          @completion_date = completion_date
          @created_at = created_at
          @description = description
          @due_date = due_date
          @employee_id = employee_id
          @extracted_links = extracted_links
          @id = id
          @link_to_task = link_to_task
          @name = name
          @next_task_id = next_task_id
          @parent_process_name = parent_process_name
          @remote_id = remote_id
          @status = status
          @type = type
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @assigned_by_employee_id == other.assigned_by_employee_id
          return false unless @assigned_by_employee_name == other.assigned_by_employee_name
          return false unless @attachments == other.attachments
          return false unless @comments == other.comments
          return false unless @completion_date == other.completion_date
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @due_date == other.due_date
          return false unless @employee_id == other.employee_id
          return false unless @extracted_links == other.extracted_links
          return false unless @id == other.id
          return false unless @link_to_task == other.link_to_task
          return false unless @name == other.name
          return false unless @next_task_id == other.next_task_id
          return false unless @parent_process_name == other.parent_process_name
          return false unless @remote_id == other.remote_id
          return false unless @status == other.status
          return false unless @type == other.type
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
