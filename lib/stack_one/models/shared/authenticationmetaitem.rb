# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AuthenticationMetaItem
        extend T::Sig
        include Crystalline::MetadataFields

        # The authentication key
        field :key, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('key') } }
        # The authentication label
        field :label, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('label') } }
        # The authentication type
        field :type, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }

        sig { params(key: T.nilable(::String), label: T.nilable(::String), type: T.nilable(::String)).void }
        def initialize(key: nil, label: nil, type: nil)
          @key = key
          @label = label
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @key == other.key
          return false unless @label == other.label
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
