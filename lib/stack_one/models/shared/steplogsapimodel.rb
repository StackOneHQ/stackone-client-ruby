# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class StepLogsApiModel < ::Crystalline::FieldAugmented
      extend T::Sig

      # The account ID of the request
      field :account_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('account_id') } }
      # The requested action
      field :action, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('action') } }
      # The requested child resource
      field :child_resource, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('child_resource') } }
      # The request duration in milliseconds
      field :duration, T.nilable(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('duration') } }
      # The request end time ISO8601 date string
      field :end_time, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('end_time'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The requested HTTP method
      field :http_method, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('http_method') } }
      # The provider request ID
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # The asynchronous worker flag
      field :is_worker, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('is_worker') } }
      # The requested path
      field :path, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('path') } }
      # The project ID of the request
      field :project_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('project_id') } }
      # The requested provider
      field :provider, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('provider') } }
      # The advanced log request data
      field :request, T.nilable(::StackOne::Shared::Request), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('request') } }
      # The request ID
      field :request_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('request_id') } }
      # The requested resource
      field :resource, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('resource') } }
      # The advanced log response data
      field :response, T.nilable(::StackOne::Shared::Response), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('response') } }
      # The requested service
      field :service, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('service') } }
      # The request start time ISO8601 date string
      field :start_time, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_time'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The requests response status code
      field :status, T.nilable(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
      # The requested sub resource
      field :sub_resource, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('sub_resource') } }
      # The request success flag
      field :success, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('success') } }
      # The requested URL
      field :url, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('url') } }


      sig { params(account_id: T.nilable(::String), action: T.nilable(::String), child_resource: T.nilable(::String), duration: T.nilable(::Float), end_time: T.nilable(::DateTime), http_method: T.nilable(::String), id: T.nilable(::String), is_worker: T.nilable(T::Boolean), path: T.nilable(::String), project_id: T.nilable(::String), provider: T.nilable(::String), request: T.nilable(::StackOne::Shared::Request), request_id: T.nilable(::String), resource: T.nilable(::String), response: T.nilable(::StackOne::Shared::Response), service: T.nilable(::String), start_time: T.nilable(::DateTime), status: T.nilable(::Float), sub_resource: T.nilable(::String), success: T.nilable(T::Boolean), url: T.nilable(::String)).void }
      def initialize(account_id: nil, action: nil, child_resource: nil, duration: nil, end_time: nil, http_method: nil, id: nil, is_worker: nil, path: nil, project_id: nil, provider: nil, request: nil, request_id: nil, resource: nil, response: nil, service: nil, start_time: nil, status: nil, sub_resource: nil, success: nil, url: nil)
        @account_id = account_id
        @action = action
        @child_resource = child_resource
        @duration = duration
        @end_time = end_time
        @http_method = http_method
        @id = id
        @is_worker = is_worker
        @path = path
        @project_id = project_id
        @provider = provider
        @request = request
        @request_id = request_id
        @resource = resource
        @response = response
        @service = service
        @start_time = start_time
        @status = status
        @sub_resource = sub_resource
        @success = success
        @url = url
      end
    end
  end
end
