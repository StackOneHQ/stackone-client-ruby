# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class TicketingProject
        extend T::Sig
        include Crystalline::MetadataFields

        # The timestamp when the record was created
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The description of the project
        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The name of the project
        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # The organization id related to the project
        field :organization_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('organization_id') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # The timestamp when the record was last updated
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


        sig { params(created_at: T.nilable(::DateTime), description: T.nilable(::String), id: T.nilable(::String), name: T.nilable(::String), organization_id: T.nilable(::String), remote_id: T.nilable(::String), updated_at: T.nilable(::DateTime)).void }
        def initialize(created_at: nil, description: nil, id: nil, name: nil, organization_id: nil, remote_id: nil, updated_at: nil)
          @created_at = created_at
          @description = description
          @id = id
          @name = name
          @organization_id = organization_id
          @remote_id = remote_id
          @updated_at = updated_at
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @organization_id == other.organization_id
          return false unless @remote_id == other.remote_id
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
