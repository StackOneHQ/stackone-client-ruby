# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class MessagingAttachmentResultData
        extend T::Sig
        include Crystalline::MetadataFields

        # Name of the attached file
        field :file_name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_name') } }
        # Size of the attached file
        field :file_size, T.nilable(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_size') } }
        # MIME type of the attached file
        field :file_type, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_type') } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }


        sig { params(file_name: T.nilable(::String), file_size: T.nilable(::Float), file_type: T.nilable(::String), id: T.nilable(::String), remote_id: T.nilable(::String)).void }
        def initialize(file_name: nil, file_size: nil, file_type: nil, id: nil, remote_id: nil)
          @file_name = file_name
          @file_size = file_size
          @file_type = file_type
          @id = id
          @remote_id = remote_id
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @file_name == other.file_name
          return false unless @file_size == other.file_size
          return false unless @file_type == other.file_type
          return false unless @id == other.id
          return false unless @remote_id == other.remote_id
          true
        end
      end
    end
  end
end
