# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    
      # The employee company
      class EmployeeCompany
        extend T::Sig
        include Crystalline::MetadataFields

        # The created_at date
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The display name of the company
        field :display_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('display_name') } }
        # The full name of the company
        field :full_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('full_name') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The name of the company
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }
        # The updated_at date
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(created_at: T.nilable(::DateTime), display_name: T.nilable(::String), full_name: T.nilable(::String), id: T.nilable(::String), name: T.nilable(::String), remote_id: T.nilable(::String), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object]), updated_at: T.nilable(::DateTime)).void }
        def initialize(created_at: nil, display_name: nil, full_name: nil, id: nil, name: nil, remote_id: nil, unified_custom_fields: nil, updated_at: nil)
          @created_at = created_at
          @display_name = display_name
          @full_name = full_name
          @id = id
          @name = name
          @remote_id = remote_id
          @unified_custom_fields = unified_custom_fields
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @display_name == other.display_name
          return false unless @full_name == other.full_name
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @remote_id == other.remote_id
          return false unless @unified_custom_fields == other.unified_custom_fields
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
