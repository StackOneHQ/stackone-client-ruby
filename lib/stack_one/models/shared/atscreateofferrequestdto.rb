# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AtsCreateOfferRequestDto
        extend T::Sig
        include Crystalline::MetadataFields


        field :application_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('application_id') } }

        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('currency') } }

        field :offer_history, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::OfferHistory)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('offer_history') } }

        field :offer_status, Crystalline::Nilable.new(Models::Shared::OfferStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('offer_status') } }
        # Value to pass through to the provider
        field :passthrough, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('passthrough') } }

        field :salary, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('salary') } }
        # Date of creation
        field :start_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_date'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(application_id: T.nilable(::String), currency: T.nilable(::String), offer_history: T.nilable(T::Array[Models::Shared::OfferHistory]), offer_status: T.nilable(Models::Shared::OfferStatus), passthrough: T.nilable(T::Hash[Symbol, ::Object]), salary: T.nilable(::Float), start_date: T.nilable(::DateTime)).void }
        def initialize(application_id: nil, currency: nil, offer_history: nil, offer_status: nil, passthrough: nil, salary: nil, start_date: nil)
          @application_id = application_id
          @currency = currency
          @offer_history = offer_history
          @offer_status = offer_status
          @passthrough = passthrough
          @salary = salary
          @start_date = start_date
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @application_id == other.application_id
          return false unless @currency == other.currency
          return false unless @offer_history == other.offer_history
          return false unless @offer_status == other.offer_status
          return false unless @passthrough == other.passthrough
          return false unless @salary == other.salary
          return false unless @start_date == other.start_date
          true
        end
      end
    end
  end
end
