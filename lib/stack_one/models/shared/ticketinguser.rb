# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class TicketingUser
        extend T::Sig
        include Crystalline::MetadataFields

        # If the user is active
        field :active, T.nilable(T.any(T::Boolean, Models::Shared::TicketingUser2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('active') } }
        # The timestamp when the record was created
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The unique account reference assigned as an external user (e.g. the customer account identifier registered on the customer-facing site or portal)
        field :customer_account_reference, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('customer_account_reference') } }
        # The first name of the user
        field :first_name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('first_name') } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The last name of the user
        field :last_name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('last_name') } }
        # John Doe
        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # The user's primary email address
        field :primary_email, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('primary_email') } }
        # The user's primary phone number
        field :primary_phone, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('primary_phone') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }

        field :type, T.nilable(Models::Shared::TicketingUserType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }
        # The timestamp when the record was last updated
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The username of the user in the provider system
        field :username, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('username') } }


        sig { params(active: T.nilable(T.any(T::Boolean, Models::Shared::TicketingUser2)), created_at: T.nilable(::DateTime), customer_account_reference: T.nilable(::String), first_name: T.nilable(::String), id: T.nilable(::String), last_name: T.nilable(::String), name: T.nilable(::String), primary_email: T.nilable(::String), primary_phone: T.nilable(::String), remote_id: T.nilable(::String), type: T.nilable(Models::Shared::TicketingUserType), updated_at: T.nilable(::DateTime), username: T.nilable(::String)).void }
        def initialize(active: nil, created_at: nil, customer_account_reference: nil, first_name: nil, id: nil, last_name: nil, name: nil, primary_email: nil, primary_phone: nil, remote_id: nil, type: nil, updated_at: nil, username: nil)
          @active = active
          @created_at = created_at
          @customer_account_reference = customer_account_reference
          @first_name = first_name
          @id = id
          @last_name = last_name
          @name = name
          @primary_email = primary_email
          @primary_phone = primary_phone
          @remote_id = remote_id
          @type = type
          @updated_at = updated_at
          @username = username
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @active == other.active
          return false unless @created_at == other.created_at
          return false unless @customer_account_reference == other.customer_account_reference
          return false unless @first_name == other.first_name
          return false unless @id == other.id
          return false unless @last_name == other.last_name
          return false unless @name == other.name
          return false unless @primary_email == other.primary_email
          return false unless @primary_phone == other.primary_phone
          return false unless @remote_id == other.remote_id
          return false unless @type == other.type
          return false unless @updated_at == other.updated_at
          return false unless @username == other.username
          true
        end
      end
    end
  end
end
