# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class ShiftBreak
        extend T::Sig
        include Crystalline::MetadataFields

        # The date and time the break was created
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The duration of the break in ISO 8601 duration format
        field :duration, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('duration') } }
        # The end time of the break
        field :end_time, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('end_time'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The unique identifier of the break
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Whether the break is paid
        field :is_paid, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Boolean.new, Models::Shared::ShiftBreak2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('is_paid') } }
        # The start time of the break
        field :start_time, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_time'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The date and time the break was last updated
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(created_at: T.nilable(::DateTime), duration: T.nilable(::String), end_time: T.nilable(::DateTime), id: T.nilable(::String), is_paid: T.nilable(T.any(T::Boolean, Models::Shared::ShiftBreak2)), start_time: T.nilable(::DateTime), updated_at: T.nilable(::DateTime)).void }
        def initialize(created_at: nil, duration: nil, end_time: nil, id: nil, is_paid: nil, start_time: nil, updated_at: nil)
          @created_at = created_at
          @duration = duration
          @end_time = end_time
          @id = id
          @is_paid = is_paid
          @start_time = start_time
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @duration == other.duration
          return false unless @end_time == other.end_time
          return false unless @id == other.id
          return false unless @is_paid == other.is_paid
          return false unless @start_time == other.start_time
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
