# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class Question < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # Unique identifier
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }

      field :multiple_choice_answers, T.nilable(T::Array[::StackOne::Shared::QuestionMultipleChoiceAnswers]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('multiple_choice_answers') } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # Provider's unique identifier
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }

      field :required, T.nilable(::Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('required') } }

      field :text, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('text') } }

      field :type, T.nilable(::StackOne::Shared::QuestionType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }


      sig { params(id: T.nilable(::String), multiple_choice_answers: T.nilable(T::Array[::StackOne::Shared::QuestionMultipleChoiceAnswers]), name: T.nilable(::String), remote_id: T.nilable(::String), required: T.nilable(::Object), text: T.nilable(::String), type: T.nilable(::StackOne::Shared::QuestionType)).void }
      def initialize(id: nil, multiple_choice_answers: nil, name: nil, remote_id: nil, required: nil, text: nil, type: nil)
        @id = id
        @multiple_choice_answers = multiple_choice_answers
        @name = name
        @remote_id = remote_id
        @required = required
        @text = text
        @type = type
      end
    end
  end
end
