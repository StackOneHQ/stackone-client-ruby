# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class Question
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }

        field :multiple_choice_answers, T.nilable(T::Array[Models::Shared::QuestionMultipleChoiceAnswers]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('multiple_choice_answers') } }

        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }

        field :parent_question, T.nilable(Models::Shared::ParentQuestion), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('parent_question') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }

        field :required, T.nilable(T.any(T::Boolean, Models::Shared::Question2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('required') } }

        field :text, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('text') } }

        field :type, T.nilable(Models::Shared::QuestionType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }


        sig { params(id: T.nilable(::String), multiple_choice_answers: T.nilable(T::Array[Models::Shared::QuestionMultipleChoiceAnswers]), name: T.nilable(::String), parent_question: T.nilable(Models::Shared::ParentQuestion), remote_id: T.nilable(::String), required: T.nilable(T.any(T::Boolean, Models::Shared::Question2)), text: T.nilable(::String), type: T.nilable(Models::Shared::QuestionType)).void }
        def initialize(id: nil, multiple_choice_answers: nil, name: nil, parent_question: nil, remote_id: nil, required: nil, text: nil, type: nil)
          @id = id
          @multiple_choice_answers = multiple_choice_answers
          @name = name
          @parent_question = parent_question
          @remote_id = remote_id
          @required = required
          @text = text
          @type = type
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @multiple_choice_answers == other.multiple_choice_answers
          return false unless @name == other.name
          return false unless @parent_question == other.parent_question
          return false unless @remote_id == other.remote_id
          return false unless @required == other.required
          return false unless @text == other.text
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
