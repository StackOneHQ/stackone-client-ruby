# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class PatchAccountExternalDto
        extend T::Sig
        include Crystalline::MetadataFields


        field :authentication_config_key, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('authentication_config_key') } }

        field :credentials, Crystalline::Nilable.new(Models::Shared::PatchAccountExternalDtoCredentials), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('credentials') } }

        field :environment, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('environment') } }

        field :label, Crystalline::Nilable.new(Models::Shared::Label), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('label') } }

        field :metadata, Crystalline::Nilable.new(Models::Shared::PatchAccountExternalDtoMetadata), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('metadata') } }

        field :origin_owner_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('origin_owner_id') } }

        field :origin_owner_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('origin_owner_name') } }

        field :origin_username, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('origin_username') } }

        field :provider, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('provider') } }

        field :secrets, Crystalline::Nilable.new(Models::Shared::Secrets), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('secrets') } }

        field :setup_information, Crystalline::Nilable.new(Models::Shared::SetupInformation), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('setup_information') } }
        # The account type
        field :type, Crystalline::Nilable.new(Models::Shared::PatchAccountExternalDtoType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Shared::PatchAccountExternalDtoType, true) } }

        sig { params(authentication_config_key: T.nilable(::String), credentials: T.nilable(Models::Shared::PatchAccountExternalDtoCredentials), environment: T.nilable(::String), label: T.nilable(Models::Shared::Label), metadata: T.nilable(Models::Shared::PatchAccountExternalDtoMetadata), origin_owner_id: T.nilable(::String), origin_owner_name: T.nilable(::String), origin_username: T.nilable(::String), provider: T.nilable(::String), secrets: T.nilable(Models::Shared::Secrets), setup_information: T.nilable(Models::Shared::SetupInformation), type: T.nilable(Models::Shared::PatchAccountExternalDtoType)).void }
        def initialize(authentication_config_key: nil, credentials: nil, environment: nil, label: nil, metadata: nil, origin_owner_id: nil, origin_owner_name: nil, origin_username: nil, provider: nil, secrets: nil, setup_information: nil, type: nil)
          @authentication_config_key = authentication_config_key
          @credentials = credentials
          @environment = environment
          @label = label
          @metadata = metadata
          @origin_owner_id = origin_owner_id
          @origin_owner_name = origin_owner_name
          @origin_username = origin_username
          @provider = provider
          @secrets = secrets
          @setup_information = setup_information
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @authentication_config_key == other.authentication_config_key
          return false unless @credentials == other.credentials
          return false unless @environment == other.environment
          return false unless @label == other.label
          return false unless @metadata == other.metadata
          return false unless @origin_owner_id == other.origin_owner_id
          return false unless @origin_owner_name == other.origin_owner_name
          return false unless @origin_username == other.origin_username
          return false unless @provider == other.provider
          return false unless @secrets == other.secrets
          return false unless @setup_information == other.setup_information
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
