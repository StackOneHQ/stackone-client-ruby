# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AccountingJournalCreateRequestDto
        extend T::Sig
        include Crystalline::MetadataFields

        # Currency code for the journal and all lines
        field :currency_code, Crystalline::Nilable.new(Models::Shared::CurrencyCode), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('currency_code') } }
        # Exchange rate to company base currency to apply to all lines
        field :exchange_rate, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('exchange_rate') } }
        # List of journal lines
        field :lines, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CreateJournalLine)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('lines') } }
        # Memo or description for the journal
        field :memo, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('memo') } }
        # Reference number for the journal
        field :reference, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('reference') } }
        # Date of the journal transaction
        field :transaction_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('transaction_date'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(currency_code: T.nilable(Models::Shared::CurrencyCode), exchange_rate: T.nilable(::Float), lines: T.nilable(T::Array[Models::Shared::CreateJournalLine]), memo: T.nilable(::String), reference: T.nilable(::String), transaction_date: T.nilable(::DateTime)).void }
        def initialize(currency_code: nil, exchange_rate: nil, lines: nil, memo: nil, reference: nil, transaction_date: nil)
          @currency_code = currency_code
          @exchange_rate = exchange_rate
          @lines = lines
          @memo = memo
          @reference = reference
          @transaction_date = transaction_date
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @currency_code == other.currency_code
          return false unless @exchange_rate == other.exchange_rate
          return false unless @lines == other.lines
          return false unless @memo == other.memo
          return false unless @reference == other.reference
          return false unless @transaction_date == other.transaction_date
          true
        end
      end
    end
  end
end
