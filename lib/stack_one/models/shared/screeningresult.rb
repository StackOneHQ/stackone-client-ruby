# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class ScreeningResult
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Order ID associated with this result
        field :order_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('order_id') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # URL to view the detailed result
        field :result_url, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('result_url') } }
        # Score information
        field :score, T.nilable(Models::Shared::ScreeningResultScore), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('score') } }
        # Start date of the screening
        field :start_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Result status
        field :status, T.nilable(Models::Shared::ScreeningResultStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::ScreeningResultStatus, true) } }
        # Submission date of the screening
        field :submission_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('submission_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Summary of the screening result
        field :summary, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('summary') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }


        sig { params(id: T.nilable(::String), order_id: T.nilable(::String), remote_id: T.nilable(::String), result_url: T.nilable(::String), score: T.nilable(Models::Shared::ScreeningResultScore), start_date: T.nilable(::DateTime), status: T.nilable(Models::Shared::ScreeningResultStatus), submission_date: T.nilable(::DateTime), summary: T.nilable(::String), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object])).void }
        def initialize(id: nil, order_id: nil, remote_id: nil, result_url: nil, score: nil, start_date: nil, status: nil, submission_date: nil, summary: nil, unified_custom_fields: nil)
          @id = id
          @order_id = order_id
          @remote_id = remote_id
          @result_url = result_url
          @score = score
          @start_date = start_date
          @status = status
          @submission_date = submission_date
          @summary = summary
          @unified_custom_fields = unified_custom_fields
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @order_id == other.order_id
          return false unless @remote_id == other.remote_id
          return false unless @result_url == other.result_url
          return false unless @score == other.score
          return false unless @start_date == other.start_date
          return false unless @status == other.status
          return false unless @submission_date == other.submission_date
          return false unless @summary == other.summary
          return false unless @unified_custom_fields == other.unified_custom_fields
          true
        end
      end
    end
  end
end
