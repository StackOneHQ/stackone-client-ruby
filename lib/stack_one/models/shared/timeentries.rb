# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class TimeEntries
        extend T::Sig
        include Crystalline::MetadataFields

        # The duration of the break taken during time entry in hours
        field :break_duration, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('break_duration') } }
        # The created_at date
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The employee ID associated with this time entry
        field :employee_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employee_id') } }
        # The end time of the time entry
        field :end_time, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('end_time'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The hours worked in the time entry
        field :hours_worked, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('hours_worked') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The labor type associated with this time entry
        field :labor_type, Crystalline::Nilable.new(Models::Shared::LaborType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('labor_type') } }
        # The location of the time entry
        field :location, Crystalline::Nilable.new(Models::Shared::Location), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('location') } }
        # Provider's unique identifier of the employee associated with this time entry
        field :remote_employee_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_employee_id') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # The start time of the time entry
        field :start_time, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_time'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The status of the time entry
        field :status, Crystalline::Nilable.new(Models::Shared::TimeEntriesStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }
        # The updated_at date
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(break_duration: T.nilable(::Float), created_at: T.nilable(::DateTime), employee_id: T.nilable(::String), end_time: T.nilable(::DateTime), hours_worked: T.nilable(::Float), id: T.nilable(::String), labor_type: T.nilable(Models::Shared::LaborType), location: T.nilable(Models::Shared::Location), remote_employee_id: T.nilable(::String), remote_id: T.nilable(::String), start_time: T.nilable(::DateTime), status: T.nilable(Models::Shared::TimeEntriesStatus), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object]), updated_at: T.nilable(::DateTime)).void }
        def initialize(break_duration: nil, created_at: nil, employee_id: nil, end_time: nil, hours_worked: nil, id: nil, labor_type: nil, location: nil, remote_employee_id: nil, remote_id: nil, start_time: nil, status: nil, unified_custom_fields: nil, updated_at: nil)
          @break_duration = break_duration
          @created_at = created_at
          @employee_id = employee_id
          @end_time = end_time
          @hours_worked = hours_worked
          @id = id
          @labor_type = labor_type
          @location = location
          @remote_employee_id = remote_employee_id
          @remote_id = remote_id
          @start_time = start_time
          @status = status
          @unified_custom_fields = unified_custom_fields
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @break_duration == other.break_duration
          return false unless @created_at == other.created_at
          return false unless @employee_id == other.employee_id
          return false unless @end_time == other.end_time
          return false unless @hours_worked == other.hours_worked
          return false unless @id == other.id
          return false unless @labor_type == other.labor_type
          return false unless @location == other.location
          return false unless @remote_employee_id == other.remote_employee_id
          return false unless @remote_id == other.remote_id
          return false unless @start_time == other.start_time
          return false unless @status == other.status
          return false unless @unified_custom_fields == other.unified_custom_fields
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
