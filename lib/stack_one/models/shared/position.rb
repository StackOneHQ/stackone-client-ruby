# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class Position
        extend T::Sig
        include Crystalline::MetadataFields

        # Department ID associated with the position
        field :department_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('department_id') } }
        # Description of the position
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # Employment type for the position
        field :employment_type, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employment_type') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Job ID from the HRIS provider
        field :job_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('job_id') } }
        # Location ID associated with the position
        field :location_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('location_id') } }
        # Date when the position was posted
        field :posted_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('posted_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Status of the position
        field :status, Crystalline::Nilable.new(Models::Shared::PositionStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # Title of the position
        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('title') } }

        sig { params(department_id: T.nilable(::String), description: T.nilable(::String), employment_type: T.nilable(::String), id: T.nilable(::String), job_id: T.nilable(::String), location_id: T.nilable(::String), posted_date: T.nilable(::DateTime), remote_id: T.nilable(::String), status: T.nilable(Models::Shared::PositionStatus), title: T.nilable(::String)).void }
        def initialize(department_id: nil, description: nil, employment_type: nil, id: nil, job_id: nil, location_id: nil, posted_date: nil, remote_id: nil, status: nil, title: nil)
          @department_id = department_id
          @description = description
          @employment_type = employment_type
          @id = id
          @job_id = job_id
          @location_id = location_id
          @posted_date = posted_date
          @remote_id = remote_id
          @status = status
          @title = title
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @department_id == other.department_id
          return false unless @description == other.description
          return false unless @employment_type == other.employment_type
          return false unless @id == other.id
          return false unless @job_id == other.job_id
          return false unless @location_id == other.location_id
          return false unless @posted_date == other.posted_date
          return false unless @remote_id == other.remote_id
          return false unless @status == other.status
          return false unless @title == other.title
          true
        end
      end
    end
  end
end
