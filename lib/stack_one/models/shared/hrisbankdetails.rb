# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class HRISBankDetails
        extend T::Sig
        include Crystalline::MetadataFields

        # The name of the bank account
        field :account_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('account_name') } }
        # The type of bank account
        field :account_type, Crystalline::Nilable.new(Models::Shared::AccountType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('account_type') } }
        # The name of the bank
        field :bank_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('bank_name') } }
        # Array of clearing codes required by the country
        field :clearing_codes, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::ClearingCode)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('clearing_codes') } }
        # The country code where the bank is located
        field :country_code, Crystalline::Nilable.new(Models::Shared::CountryCode), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('country_code') } }
        # The currency code for the account
        field :currency_code, Crystalline::Nilable.new(Models::Shared::HRISBankDetailsCurrencyCode), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('currency_code') } }
        # International Bank Account Number (IBAN)
        field :iban, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('iban') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Whether this is the primary bank account
        field :is_primary, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('is_primary') } }
        # Local account number (used when IBAN is not available)
        field :local_account_number, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('local_account_number') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # SWIFT/BIC code for international transfers
        field :swift_bic, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('swift_bic') } }

        sig { params(account_name: T.nilable(::String), account_type: T.nilable(Models::Shared::AccountType), bank_name: T.nilable(::String), clearing_codes: T.nilable(T::Array[Models::Shared::ClearingCode]), country_code: T.nilable(Models::Shared::CountryCode), currency_code: T.nilable(Models::Shared::HRISBankDetailsCurrencyCode), iban: T.nilable(::String), id: T.nilable(::String), is_primary: T.nilable(T::Boolean), local_account_number: T.nilable(::String), remote_id: T.nilable(::String), swift_bic: T.nilable(::String)).void }
        def initialize(account_name: nil, account_type: nil, bank_name: nil, clearing_codes: nil, country_code: nil, currency_code: nil, iban: nil, id: nil, is_primary: nil, local_account_number: nil, remote_id: nil, swift_bic: nil)
          @account_name = account_name
          @account_type = account_type
          @bank_name = bank_name
          @clearing_codes = clearing_codes
          @country_code = country_code
          @currency_code = currency_code
          @iban = iban
          @id = id
          @is_primary = is_primary
          @local_account_number = local_account_number
          @remote_id = remote_id
          @swift_bic = swift_bic
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_name == other.account_name
          return false unless @account_type == other.account_type
          return false unless @bank_name == other.bank_name
          return false unless @clearing_codes == other.clearing_codes
          return false unless @country_code == other.country_code
          return false unless @currency_code == other.currency_code
          return false unless @iban == other.iban
          return false unless @id == other.id
          return false unless @is_primary == other.is_primary
          return false unless @local_account_number == other.local_account_number
          return false unless @remote_id == other.remote_id
          return false unless @swift_bic == other.swift_bic
          true
        end
      end
    end
  end
end
