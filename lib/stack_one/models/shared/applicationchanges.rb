# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class ApplicationChanges
        extend T::Sig
        include Crystalline::MetadataFields

        # Timestamp when the change was created
        field :created_at, ::DateTime, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(false) } }
        # The new values for changed application properties. Only includes fields that commonly change over the application lifecycle.
        field :new_values, Models::Shared::ApplicationChangesDataModel, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('new_values') } }
        # The actor who made the change
        field :actor, T.nilable(Models::Shared::Actor), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('actor') } }
        # The type of change that occurred to the application
        field :change_type, T.nilable(Models::Shared::ChangeType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('change_type') } }
        # Timestamp when the change became effective
        field :effective_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('effective_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }


        sig { params(created_at: ::DateTime, new_values: Models::Shared::ApplicationChangesDataModel, actor: T.nilable(Models::Shared::Actor), change_type: T.nilable(Models::Shared::ChangeType), effective_at: T.nilable(::DateTime), id: T.nilable(::String), remote_id: T.nilable(::String)).void }
        def initialize(created_at: nil, new_values: nil, actor: nil, change_type: nil, effective_at: nil, id: nil, remote_id: nil)
          @created_at = created_at
          @new_values = new_values
          @actor = actor
          @change_type = change_type
          @effective_at = effective_at
          @id = id
          @remote_id = remote_id
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @new_values == other.new_values
          return false unless @actor == other.actor
          return false unless @change_type == other.change_type
          return false unless @effective_at == other.effective_at
          return false unless @id == other.id
          return false unless @remote_id == other.remote_id
          true
        end
      end
    end
  end
end
