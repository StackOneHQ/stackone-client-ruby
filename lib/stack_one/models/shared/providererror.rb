# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class ProviderError
        extend T::Sig
        include Crystalline::MetadataFields

        # Response headers
        field :headers, Crystalline::Nilable.new(Models::Shared::Headers), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('headers') } }
        # Raw error response from the provider
        field :raw, Crystalline::Nilable.new(Models::Shared::Raw), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('raw') } }
        # HTTP status code of the provider error
        field :status, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # URL that caused the error
        field :url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('url') } }

        sig { params(headers: T.nilable(Models::Shared::Headers), raw: T.nilable(Models::Shared::Raw), status: T.nilable(::Float), url: T.nilable(::String)).void }
        def initialize(headers: nil, raw: nil, status: nil, url: nil)
          @headers = headers
          @raw = raw
          @status = status
          @url = url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @headers == other.headers
          return false unless @raw == other.raw
          return false unless @status == other.status
          return false unless @url == other.url
          true
        end
      end
    end
  end
end
