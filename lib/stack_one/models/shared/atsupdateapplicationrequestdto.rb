# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AtsUpdateApplicationRequestDto
        extend T::Sig
        include Crystalline::MetadataFields


        field :application_status, Crystalline::Nilable.new(Models::Shared::AtsUpdateApplicationRequestDtoApplicationStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('application_status') } }
        # The application custom fields
        field :custom_fields, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CustomFields)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('custom_fields') } }
        # Value to pass through to the provider
        field :passthrough, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('passthrough') } }

        field :source, Crystalline::Nilable.new(Models::Shared::AtsUpdateApplicationRequestDtoSource), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source') } }

        sig { params(application_status: T.nilable(Models::Shared::AtsUpdateApplicationRequestDtoApplicationStatus), custom_fields: T.nilable(T::Array[Models::Shared::CustomFields]), passthrough: T.nilable(T::Hash[Symbol, ::Object]), source: T.nilable(Models::Shared::AtsUpdateApplicationRequestDtoSource)).void }
        def initialize(application_status: nil, custom_fields: nil, passthrough: nil, source: nil)
          @application_status = application_status
          @custom_fields = custom_fields
          @passthrough = passthrough
          @source = source
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @application_status == other.application_status
          return false unless @custom_fields == other.custom_fields
          return false unless @passthrough == other.passthrough
          return false unless @source == other.source
          true
        end
      end
    end
  end
end
