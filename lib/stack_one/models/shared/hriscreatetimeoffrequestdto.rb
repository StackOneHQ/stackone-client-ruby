# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class HrisCreateTimeOffRequestDto
        extend T::Sig
        include Crystalline::MetadataFields

        # The approver ID
        field :approver_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('approver_id') } }
        # Inclusive end date of the time off request (ISO8601 date-time without timezone). The time off includes this day
        field :end_date, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('end_date') } }
        # True if the end of the time off request ends half way through the day
        field :end_half_day, T.nilable(T.any(T::Boolean, Models::Shared::HrisCreateTimeOffRequestDto2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('end_half_day') } }
        # Value to pass through to the provider
        field :passthrough, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('passthrough') } }

        field :reason, T.nilable(Models::Shared::HrisCreateTimeOffRequestDtoReason), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('reason') } }
        # The start date of the time off request (ISO8601 date-time without timezone)
        field :start_date, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_date') } }
        # True if the start of the time off request begins half way through the day
        field :start_half_day, T.nilable(T.any(T::Boolean, Models::Shared::HrisCreateTimeOffRequestDtoSchemas2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_half_day') } }
        # The status of the time off request
        field :status, T.nilable(Models::Shared::HrisCreateTimeOffRequestDtoStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # The time off policy id associated with this time off request
        field :time_off_policy_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('time_off_policy_id') } }
        # The type of the time off request
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :type, T.nilable(Models::Shared::HrisCreateTimeOffRequestDtoType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }


        sig { params(approver_id: T.nilable(::String), end_date: T.nilable(::String), end_half_day: T.nilable(T.any(T::Boolean, Models::Shared::HrisCreateTimeOffRequestDto2)), passthrough: T.nilable(T::Hash[Symbol, ::Object]), reason: T.nilable(Models::Shared::HrisCreateTimeOffRequestDtoReason), start_date: T.nilable(::String), start_half_day: T.nilable(T.any(T::Boolean, Models::Shared::HrisCreateTimeOffRequestDtoSchemas2)), status: T.nilable(Models::Shared::HrisCreateTimeOffRequestDtoStatus), time_off_policy_id: T.nilable(::String), type: T.nilable(Models::Shared::HrisCreateTimeOffRequestDtoType)).void }
        def initialize(approver_id: nil, end_date: nil, end_half_day: nil, passthrough: nil, reason: nil, start_date: nil, start_half_day: nil, status: nil, time_off_policy_id: nil, type: nil)
          @approver_id = approver_id
          @end_date = end_date
          @end_half_day = end_half_day
          @passthrough = passthrough
          @reason = reason
          @start_date = start_date
          @start_half_day = start_half_day
          @status = status
          @time_off_policy_id = time_off_policy_id
          @type = type
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @approver_id == other.approver_id
          return false unless @end_date == other.end_date
          return false unless @end_half_day == other.end_half_day
          return false unless @passthrough == other.passthrough
          return false unless @reason == other.reason
          return false unless @start_date == other.start_date
          return false unless @start_half_day == other.start_half_day
          return false unless @status == other.status
          return false unless @time_off_policy_id == other.time_off_policy_id
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
