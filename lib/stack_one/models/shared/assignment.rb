# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class Assignment
        extend T::Sig
        include Crystalline::MetadataFields

        # The certification URL associated with this assignment
        field :certificate_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('certificate_url') } }
        # The date the content was completed
        field :completed_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('completed_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The course ID associated with this assignment
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :course_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('course_id') } }
        # The date the assignment was created
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The date the assignment is due to be completed
        field :due_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('due_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The external reference associated with this assignment
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :external_reference, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('external_reference') } }
        # The ID associated with this assignment
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments.
        field :learning_object_external_reference, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('learning_object_external_reference') } }
        # The learning_object_id associated with this assignment. This is not required unless specified in an integration.
        field :learning_object_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('learning_object_id') } }
        # The learning object type of the assignment
        field :learning_object_type, Crystalline::Nilable.new(Models::Shared::LearningObjectType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('learning_object_type') } }
        # The progress associated with this assigment
        field :progress, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('progress') } }
        # Provider's unique identifier of the course related to the assignment
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :remote_course_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_course_id') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Provider's unique identifier of the learning object related to the assignment
        field :remote_learning_object_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_learning_object_id') } }
        # Provider's unique identifier of the user related to the assignment
        field :remote_user_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_user_id') } }
        # The result of the assignment
        field :result, Crystalline::Nilable.new(Models::Shared::Result), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('result') } }
        # The status of the assignment
        field :status, Crystalline::Nilable.new(Models::Shared::AssignmentStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }
        # The date the assignment was last updated
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The user ID associated with this assignment
        field :user_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('user_id') } }

        sig { params(certificate_url: T.nilable(::String), completed_at: T.nilable(::DateTime), course_id: T.nilable(::String), created_at: T.nilable(::DateTime), due_date: T.nilable(::DateTime), external_reference: T.nilable(::String), id: T.nilable(::String), learning_object_external_reference: T.nilable(::String), learning_object_id: T.nilable(::String), learning_object_type: T.nilable(Models::Shared::LearningObjectType), progress: T.nilable(::Float), remote_course_id: T.nilable(::String), remote_id: T.nilable(::String), remote_learning_object_id: T.nilable(::String), remote_user_id: T.nilable(::String), result: T.nilable(Models::Shared::Result), status: T.nilable(Models::Shared::AssignmentStatus), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object]), updated_at: T.nilable(::DateTime), user_id: T.nilable(::String)).void }
        def initialize(certificate_url: nil, completed_at: nil, course_id: nil, created_at: nil, due_date: nil, external_reference: nil, id: nil, learning_object_external_reference: nil, learning_object_id: nil, learning_object_type: nil, progress: nil, remote_course_id: nil, remote_id: nil, remote_learning_object_id: nil, remote_user_id: nil, result: nil, status: nil, unified_custom_fields: nil, updated_at: nil, user_id: nil)
          @certificate_url = certificate_url
          @completed_at = completed_at
          @course_id = course_id
          @created_at = created_at
          @due_date = due_date
          @external_reference = external_reference
          @id = id
          @learning_object_external_reference = learning_object_external_reference
          @learning_object_id = learning_object_id
          @learning_object_type = learning_object_type
          @progress = progress
          @remote_course_id = remote_course_id
          @remote_id = remote_id
          @remote_learning_object_id = remote_learning_object_id
          @remote_user_id = remote_user_id
          @result = result
          @status = status
          @unified_custom_fields = unified_custom_fields
          @updated_at = updated_at
          @user_id = user_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @certificate_url == other.certificate_url
          return false unless @completed_at == other.completed_at
          return false unless @course_id == other.course_id
          return false unless @created_at == other.created_at
          return false unless @due_date == other.due_date
          return false unless @external_reference == other.external_reference
          return false unless @id == other.id
          return false unless @learning_object_external_reference == other.learning_object_external_reference
          return false unless @learning_object_id == other.learning_object_id
          return false unless @learning_object_type == other.learning_object_type
          return false unless @progress == other.progress
          return false unless @remote_course_id == other.remote_course_id
          return false unless @remote_id == other.remote_id
          return false unless @remote_learning_object_id == other.remote_learning_object_id
          return false unless @remote_user_id == other.remote_user_id
          return false unless @result == other.result
          return false unless @status == other.status
          return false unless @unified_custom_fields == other.unified_custom_fields
          return false unless @updated_at == other.updated_at
          return false unless @user_id == other.user_id
          true
        end
      end
    end
  end
end
