# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AccountingTaxRateResultData
        extend T::Sig
        include Crystalline::MetadataFields

        # Whether the tax rate is active
        field :active, T.nilable(T.any(T::Boolean, Models::Shared::AccountingTaxRateResult2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('active') } }
        # External system's tax code
        field :code, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('code') } }
        # ID of the company this tax rate belongs to
        field :company_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('company_id') } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Name of the tax rate
        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Tax rate percentage
        field :percentage, T.nilable(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('percentage') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }


        sig { params(active: T.nilable(T.any(T::Boolean, Models::Shared::AccountingTaxRateResult2)), code: T.nilable(::String), company_id: T.nilable(::String), id: T.nilable(::String), name: T.nilable(::String), percentage: T.nilable(::Float), remote_id: T.nilable(::String)).void }
        def initialize(active: nil, code: nil, company_id: nil, id: nil, name: nil, percentage: nil, remote_id: nil)
          @active = active
          @code = code
          @company_id = company_id
          @id = id
          @name = name
          @percentage = percentage
          @remote_id = remote_id
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @active == other.active
          return false unless @code == other.code
          return false unless @company_id == other.company_id
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @percentage == other.percentage
          return false unless @remote_id == other.remote_id
          true
        end
      end
    end
  end
end
