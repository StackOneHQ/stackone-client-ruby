# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class User < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The date the user was created
      field :created_at, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at') } }
      # The email of the user
      field :email, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('email') } }
      # The user ID
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # The name of the user
      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # The phone number of the user
      field :phone_number, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('phone_number') } }
      # Provider's unique identifier
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
      # The date the user was last updated
      field :updated_at, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at') } }


      sig { params(created_at: T.nilable(::String), email: T.nilable(::String), id: T.nilable(::String), name: T.nilable(::String), phone_number: T.nilable(::String), remote_id: T.nilable(::String), updated_at: T.nilable(::String)).void }
      def initialize(created_at: nil, email: nil, id: nil, name: nil, phone_number: nil, remote_id: nil, updated_at: nil)
        @created_at = created_at
        @email = email
        @id = id
        @name = name
        @phone_number = phone_number
        @remote_id = remote_id
        @updated_at = updated_at
      end
    end
  end
end
