# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class InAppTemplate < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # Unique identifier
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }

      field :messages, T.nilable(T::Array[::StackOne::Shared::InAppMessages]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('messages') } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # Provider's unique identifier
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }

      field :tags, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('tags') } }


      sig { params(id: T.nilable(::String), messages: T.nilable(T::Array[::StackOne::Shared::InAppMessages]), name: T.nilable(::String), remote_id: T.nilable(::String), tags: T.nilable(T::Array[::String])).void }
      def initialize(id: nil, messages: nil, name: nil, remote_id: nil, tags: nil)
        @id = id
        @messages = messages
        @name = name
        @remote_id = remote_id
        @tags = tags
      end
    end
  end
end
