# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class TicketingComment
        extend T::Sig
        include Crystalline::MetadataFields

        # The ticket ID associated with the comment
        field :ticket_id, ::String, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('ticket_id'), required: true } }
        # Array of content associated with the comment
        field :content, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::TicketingContent)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('content') } }
        # The timestamp when the record was created
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Whether the comment is internal
        field :internal, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Boolean.new, Models::Shared::TicketingComment2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('internal') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # The timestamp when the record was last updated
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The user who created the comment
        field :user_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('user_id') } }

        sig { params(ticket_id: ::String, content: T.nilable(T::Array[Models::Shared::TicketingContent]), created_at: T.nilable(::DateTime), id: T.nilable(::String), internal: T.nilable(T.any(T::Boolean, Models::Shared::TicketingComment2)), remote_id: T.nilable(::String), updated_at: T.nilable(::DateTime), user_id: T.nilable(::String)).void }
        def initialize(ticket_id:, content: nil, created_at: nil, id: nil, internal: nil, remote_id: nil, updated_at: nil, user_id: nil)
          @ticket_id = ticket_id
          @content = content
          @created_at = created_at
          @id = id
          @internal = internal
          @remote_id = remote_id
          @updated_at = updated_at
          @user_id = user_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @ticket_id == other.ticket_id
          return false unless @content == other.content
          return false unless @created_at == other.created_at
          return false unless @id == other.id
          return false unless @internal == other.internal
          return false unless @remote_id == other.remote_id
          return false unless @updated_at == other.updated_at
          return false unless @user_id == other.user_id
          true
        end
      end
    end
  end
end
