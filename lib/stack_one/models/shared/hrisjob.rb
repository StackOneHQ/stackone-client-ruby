# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class HrisJob
        extend T::Sig
        include Crystalline::MetadataFields

        # Code of the job
        field :code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('code') } }
        # Date of creation
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Description of the job
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Status of the job
        field :status, Crystalline::Nilable.new(Models::Shared::HrisJobStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # Title of the job
        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('title') } }
        # Date of last update
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(code: T.nilable(::String), created_at: T.nilable(::DateTime), description: T.nilable(::String), id: T.nilable(::String), remote_id: T.nilable(::String), status: T.nilable(Models::Shared::HrisJobStatus), title: T.nilable(::String), updated_at: T.nilable(::DateTime)).void }
        def initialize(code: nil, created_at: nil, description: nil, id: nil, remote_id: nil, status: nil, title: nil, updated_at: nil)
          @code = code
          @created_at = created_at
          @description = description
          @id = id
          @remote_id = remote_id
          @status = status
          @title = title
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @code == other.code
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @id == other.id
          return false unless @remote_id == other.remote_id
          return false unless @status == other.status
          return false unless @title == other.title
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
