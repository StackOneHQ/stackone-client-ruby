# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class MarketingCreatePushTemplateRequestDto
        extend T::Sig
        include Crystalline::MetadataFields


        field :messages, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::PushMessages)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('messages') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Value to pass through to the provider
        field :passthrough, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('passthrough') } }

        field :tags, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('tags') } }

        sig { params(messages: T.nilable(T::Array[Models::Shared::PushMessages]), name: T.nilable(::String), passthrough: T.nilable(T::Hash[Symbol, ::Object]), tags: T.nilable(T::Array[::String])).void }
        def initialize(messages: nil, name: nil, passthrough: nil, tags: nil)
          @messages = messages
          @name = name
          @passthrough = passthrough
          @tags = tags
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @messages == other.messages
          return false unless @name == other.name
          return false unless @passthrough == other.passthrough
          return false unless @tags == other.tags
          true
        end
      end
    end
  end
end
