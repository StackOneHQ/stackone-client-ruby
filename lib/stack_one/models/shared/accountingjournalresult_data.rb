# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class AccountingJournalResultData
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the company this journal belongs to
        field :company_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('company_id') } }
        # Timestamp when the journal was created
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # List of journal lines
        field :lines, T.nilable(T::Array[Models::Shared::JournalLine]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('lines') } }
        # Memo or description for the journal
        field :memo, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('memo') } }
        # Timestamp when the journal was posted
        field :posted_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('posted_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Reference number for the journal
        field :reference, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('reference') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Status of the journal
        field :status, T.nilable(Models::Shared::AccountingJournalResultStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # Date of the journal transaction
        field :transaction_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('transaction_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Timestamp when the journal was last updated
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


        sig { params(company_id: T.nilable(::String), created_at: T.nilable(::DateTime), id: T.nilable(::String), lines: T.nilable(T::Array[Models::Shared::JournalLine]), memo: T.nilable(::String), posted_at: T.nilable(::DateTime), reference: T.nilable(::String), remote_id: T.nilable(::String), status: T.nilable(Models::Shared::AccountingJournalResultStatus), transaction_date: T.nilable(::DateTime), updated_at: T.nilable(::DateTime)).void }
        def initialize(company_id: nil, created_at: nil, id: nil, lines: nil, memo: nil, posted_at: nil, reference: nil, remote_id: nil, status: nil, transaction_date: nil, updated_at: nil)
          @company_id = company_id
          @created_at = created_at
          @id = id
          @lines = lines
          @memo = memo
          @posted_at = posted_at
          @reference = reference
          @remote_id = remote_id
          @status = status
          @transaction_date = transaction_date
          @updated_at = updated_at
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @company_id == other.company_id
          return false unless @created_at == other.created_at
          return false unless @id == other.id
          return false unless @lines == other.lines
          return false unless @memo == other.memo
          return false unless @posted_at == other.posted_at
          return false unless @reference == other.reference
          return false unless @remote_id == other.remote_id
          return false unless @status == other.status
          return false unless @transaction_date == other.transaction_date
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
