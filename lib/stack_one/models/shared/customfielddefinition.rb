# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class CustomFieldDefinition < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
      # Unique identifier
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # An array of possible options for the custom field.
      field :options, T.nilable(T::Array[::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('options') } }
      # Provider's unique identifier
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
      # The type of the custom field.
      field :type, T.nilable(::StackOne::Shared::CustomFieldDefinitionType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }


      sig { params(description: T.nilable(::String), id: T.nilable(::String), name: T.nilable(::String), options: T.nilable(T::Array[::Object]), remote_id: T.nilable(::String), type: T.nilable(::StackOne::Shared::CustomFieldDefinitionType)).void }
      def initialize(description: nil, id: nil, name: nil, options: nil, remote_id: nil, type: nil)
        @description = description
        @id = id
        @name = name
        @options = options
        @remote_id = remote_id
        @type = type
      end
    end
  end
end
