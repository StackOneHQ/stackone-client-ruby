# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class Candidate
        extend T::Sig
        include Crystalline::MetadataFields

        # List of candidate application IDs
        field :application_ids, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('application_ids') } }
        # Candidate company
        field :company, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('company') } }
        # Candidate country
        field :country, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('country') } }
        # Candidate created date
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The candidate custom fields
        field :custom_fields, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CustomFields)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('custom_fields') } }
        # Candidate email
        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('email') } }
        # List of candidate emails
        field :emails, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CandidateEmail)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('emails') } }
        # Candidate first name
        field :first_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('first_name') } }
        # Candidate hired date
        field :hired_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('hired_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Candidate last name
        field :last_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('last_name') } }
        # Candidate name
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Candidate phone number
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :phone, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('phone') } }
        # List of candidate phone numbers including the type of the number when available
        field :phone_numbers, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::PhoneNumber)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('phone_numbers') } }
        # Provider's list of candidate application IDs
        field :remote_application_ids, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_application_ids') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # List of candidate social links
        field :social_links, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::SocialLink)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('social_links') } }
        # List of candidate tags indicating metadata associated with the candidate
        field :tags, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::Tag)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('tags') } }
        # Candidate title
        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('title') } }
        # Custom Unified Fields configured in your StackOne project
        field :unified_custom_fields, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('unified_custom_fields') } }
        # Candidate updated date
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(application_ids: T.nilable(T::Array[::String]), company: T.nilable(::String), country: T.nilable(::String), created_at: T.nilable(::DateTime), custom_fields: T.nilable(T::Array[Models::Shared::CustomFields]), email: T.nilable(::String), emails: T.nilable(T::Array[Models::Shared::CandidateEmail]), first_name: T.nilable(::String), hired_at: T.nilable(::DateTime), id: T.nilable(::String), last_name: T.nilable(::String), name: T.nilable(::String), phone: T.nilable(::String), phone_numbers: T.nilable(T::Array[Models::Shared::PhoneNumber]), remote_application_ids: T.nilable(T::Array[::String]), remote_id: T.nilable(::String), social_links: T.nilable(T::Array[Models::Shared::SocialLink]), tags: T.nilable(T::Array[Models::Shared::Tag]), title: T.nilable(::String), unified_custom_fields: T.nilable(T::Hash[Symbol, ::Object]), updated_at: T.nilable(::DateTime)).void }
        def initialize(application_ids: nil, company: nil, country: nil, created_at: nil, custom_fields: nil, email: nil, emails: nil, first_name: nil, hired_at: nil, id: nil, last_name: nil, name: nil, phone: nil, phone_numbers: nil, remote_application_ids: nil, remote_id: nil, social_links: nil, tags: nil, title: nil, unified_custom_fields: nil, updated_at: nil)
          @application_ids = application_ids
          @company = company
          @country = country
          @created_at = created_at
          @custom_fields = custom_fields
          @email = email
          @emails = emails
          @first_name = first_name
          @hired_at = hired_at
          @id = id
          @last_name = last_name
          @name = name
          @phone = phone
          @phone_numbers = phone_numbers
          @remote_application_ids = remote_application_ids
          @remote_id = remote_id
          @social_links = social_links
          @tags = tags
          @title = title
          @unified_custom_fields = unified_custom_fields
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @application_ids == other.application_ids
          return false unless @company == other.company
          return false unless @country == other.country
          return false unless @created_at == other.created_at
          return false unless @custom_fields == other.custom_fields
          return false unless @email == other.email
          return false unless @emails == other.emails
          return false unless @first_name == other.first_name
          return false unless @hired_at == other.hired_at
          return false unless @id == other.id
          return false unless @last_name == other.last_name
          return false unless @name == other.name
          return false unless @phone == other.phone
          return false unless @phone_numbers == other.phone_numbers
          return false unless @remote_application_ids == other.remote_application_ids
          return false unless @remote_id == other.remote_id
          return false unless @social_links == other.social_links
          return false unless @tags == other.tags
          return false unless @title == other.title
          return false unless @unified_custom_fields == other.unified_custom_fields
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
