# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class Campaign
        extend T::Sig
        include Crystalline::MetadataFields


        field :archived, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Boolean.new, Models::Shared::Campaign2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('archived') } }
        # channels of the Campaign
        field :channels, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::ChannelsEnum)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('channels') } }
        # The created_at date
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }

        field :draft, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Boolean.new, Models::Shared::CampaignSchemas2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('draft') } }
        # The first_sent_at date
        field :first_sent_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('first_sent_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The last_sent_at date
        field :last_sent_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('last_sent_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :messages, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::Message)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('messages') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # The schedule type
        field :schedule_type, Crystalline::Nilable.new(Models::Shared::ScheduleType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('schedule_type') } }
        # Status of the Campaign
        field :status, Crystalline::Nilable.new(Models::Shared::CampaignStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }

        field :tags, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('tags') } }
        # The updated_at date
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(archived: T.nilable(T.any(T::Boolean, Models::Shared::Campaign2)), channels: T.nilable(T::Array[Models::Shared::ChannelsEnum]), created_at: T.nilable(::DateTime), description: T.nilable(::String), draft: T.nilable(T.any(T::Boolean, Models::Shared::CampaignSchemas2)), first_sent_at: T.nilable(::DateTime), id: T.nilable(::String), last_sent_at: T.nilable(::DateTime), messages: T.nilable(T::Array[Models::Shared::Message]), name: T.nilable(::String), remote_id: T.nilable(::String), schedule_type: T.nilable(Models::Shared::ScheduleType), status: T.nilable(Models::Shared::CampaignStatus), tags: T.nilable(T::Array[::String]), updated_at: T.nilable(::DateTime)).void }
        def initialize(archived: nil, channels: nil, created_at: nil, description: nil, draft: nil, first_sent_at: nil, id: nil, last_sent_at: nil, messages: nil, name: nil, remote_id: nil, schedule_type: nil, status: nil, tags: nil, updated_at: nil)
          @archived = archived
          @channels = channels
          @created_at = created_at
          @description = description
          @draft = draft
          @first_sent_at = first_sent_at
          @id = id
          @last_sent_at = last_sent_at
          @messages = messages
          @name = name
          @remote_id = remote_id
          @schedule_type = schedule_type
          @status = status
          @tags = tags
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @archived == other.archived
          return false unless @channels == other.channels
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @draft == other.draft
          return false unless @first_sent_at == other.first_sent_at
          return false unless @id == other.id
          return false unless @last_sent_at == other.last_sent_at
          return false unless @messages == other.messages
          return false unless @name == other.name
          return false unless @remote_id == other.remote_id
          return false unless @schedule_type == other.schedule_type
          return false unless @status == other.status
          return false unless @tags == other.tags
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
