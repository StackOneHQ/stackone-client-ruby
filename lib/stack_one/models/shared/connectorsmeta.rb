# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class ConnectorsMeta < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The provider service category
      field :category, ::StackOne::Shared::ConnectorsMetaCategory, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('category'), 'decoder': Utils.enum_from_string(::StackOne::Shared::ConnectorsMetaCategory, false) } }

      field :models, T::Hash[Symbol, ::Object], { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('models') } }
      # The provider key
      field :provider, ::String, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('provider') } }
      # The provider human-readable label
      field :provider_name, ::String, { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('provider_name') } }
      # Whether this provider has been enabled on the integrations page for the current project
      field :active, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('active') } }
      # Resources for this provider, such as image assets
      field :resources, T.nilable(::StackOne::Shared::Resources), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('resources') } }


      sig { params(category: ::StackOne::Shared::ConnectorsMetaCategory, models: T::Hash[Symbol, ::Object], provider: ::String, provider_name: ::String, active: T.nilable(T::Boolean), resources: T.nilable(::StackOne::Shared::Resources)).void }
      def initialize(category: nil, models: nil, provider: nil, provider_name: nil, active: nil, resources: nil)
        @category = category
        @models = models
        @provider = provider
        @provider_name = provider_name
        @active = active
        @resources = resources
      end
    end
  end
end
