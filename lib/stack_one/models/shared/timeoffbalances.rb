# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  

    class TimeOffBalances < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The date of when the current balance expires
      field :balance_expiry_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('balance_expiry_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The date of when the initial balance quantity was set
      field :balance_start_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('balance_start_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The duration unit of the current balance
      field :balance_unit, T.nilable(::StackOne::Shared::BalanceUnit), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('balance_unit') } }
      # The current numeric balance for the associated employee and time off policy
      field :current_balance, T.nilable(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('current_balance') } }
      # The employee id associated with this balance
      field :employee_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employee_id') } }
      # Unique identifier
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # The initial numeric balance for the associated employee and time off policy as of the balance start date
      field :initial_balance, T.nilable(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('initial_balance') } }
      # The time off policy associated with this balance
      field :policy, T.nilable(::StackOne::Shared::Policy), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('policy') } }
      # The time off policy id associated with this balance
      field :policy_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('policy_id') } }
      # Provider's unique identifier
      field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
      # The updated_at date of this time off balance
      field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(balance_expiry_date: T.nilable(::DateTime), balance_start_date: T.nilable(::DateTime), balance_unit: T.nilable(::StackOne::Shared::BalanceUnit), current_balance: T.nilable(::Float), employee_id: T.nilable(::String), id: T.nilable(::String), initial_balance: T.nilable(::Float), policy: T.nilable(::StackOne::Shared::Policy), policy_id: T.nilable(::String), remote_id: T.nilable(::String), updated_at: T.nilable(::DateTime)).void }
      def initialize(balance_expiry_date: nil, balance_start_date: nil, balance_unit: nil, current_balance: nil, employee_id: nil, id: nil, initial_balance: nil, policy: nil, policy_id: nil, remote_id: nil, updated_at: nil)
        @balance_expiry_date = balance_expiry_date
        @balance_start_date = balance_start_date
        @balance_unit = balance_unit
        @current_balance = current_balance
        @employee_id = employee_id
        @id = id
        @initial_balance = initial_balance
        @policy = policy
        @policy_id = policy_id
        @remote_id = remote_id
        @updated_at = updated_at
      end
    end
  end
end
