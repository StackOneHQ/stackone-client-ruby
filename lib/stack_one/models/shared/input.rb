# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    
      # Input parameters for the action
      class Input
        extend T::Sig
        include Crystalline::MetadataFields

        # Request body for the action
        field :body, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('body') } }
        # Headers for the action
        field :headers, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('headers') } }
        # Query parameters for the action
        field :query, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('query') } }

        sig { params(body: T.nilable(T::Hash[Symbol, ::Object]), headers: T.nilable(T::Hash[Symbol, ::Object]), query: T.nilable(T::Hash[Symbol, ::Object])).void }
        def initialize(body: nil, headers: nil, query: nil)
          @body = body
          @headers = headers
          @query = query
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @body == other.body
          return false unless @headers == other.headers
          return false unless @query == other.query
          true
        end
      end
    end
  end
end
