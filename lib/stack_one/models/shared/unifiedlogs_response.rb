# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Shared
  
    # The advanced log response data
    class UnifiedLogsResponse < ::Crystalline::FieldAugmented
      extend T::Sig


      field :body, T.nilable(::Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('body') } }
      # The custom mapping errors
      field :custom_mapping_errors, T.nilable(T::Array[::StackOne::Shared::CustomMappingError]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('custom_mapping_errors') } }

      field :headers, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('headers') } }
      # The provider errors
      field :provider_errors, T.nilable(T::Array[::StackOne::Shared::ProviderError]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('provider_errors') } }
      # The response status code
      field :status_code, T.nilable(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status_code') } }


      sig { params(body: T.nilable(::Object), custom_mapping_errors: T.nilable(T::Array[::StackOne::Shared::CustomMappingError]), headers: T.nilable(T::Hash[Symbol, ::Object]), provider_errors: T.nilable(T::Array[::StackOne::Shared::ProviderError]), status_code: T.nilable(::Float)).void }
      def initialize(body: nil, custom_mapping_errors: nil, headers: nil, provider_errors: nil, status_code: nil)
        @body = body
        @custom_mapping_errors = custom_mapping_errors
        @headers = headers
        @provider_errors = provider_errors
        @status_code = status_code
      end
    end
  end
end
