# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class Folders
        extend T::Sig
        include Crystalline::MetadataFields

        # List of containing parent Folder IDs in descending order
        field :all_parent_folder_ids, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('all_parent_folder_ids') } }
        # The created date of the folder
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The description of the folder
        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('description') } }
        # The parent drive ID associated with this folder
        field :drive_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('drive_id') } }
        # Whether the folder has children
        field :has_children, T.nilable(T.any(T::Boolean, Models::Shared::Folders2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('has_children') } }
        # Whether the folder has content
        field :has_content, T.nilable(T.any(T::Boolean, Models::Shared::FoldersSchemas2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('has_content') } }
        # Unique identifier
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # Whether the folder is at the root level of the drive
        field :is_root, T.nilable(T.any(T::Boolean, Models::Shared::FoldersSchemasIsRoot2)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('is_root') } }
        # The name associated with this folder
        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
        # The user ID of owner of this folder
        field :owner_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('owner_id') } }
        # The parent folder ID associated with this folder
        field :parent_folder_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('parent_folder_id') } }
        # The path where the folder is stored
        field :path, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('path') } }
        # Provider's unique identifier of the parent drive associated with this folder
        field :remote_drive_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_drive_id') } }
        # Provider's unique identifier
        field :remote_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Provider's unique identifier of the owner of this folder
        field :remote_owner_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_owner_id') } }
        # Provider's unique identifier of the parent folder associated with this folder
        field :remote_parent_folder_id, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_parent_folder_id') } }
        # The size of this folder in bytes
        field :size, T.nilable(::Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('size') } }
        # The last updated date of the folder
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The url of the folder
        field :url, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('url') } }


        sig { params(all_parent_folder_ids: T.nilable(T::Array[::String]), created_at: T.nilable(::DateTime), description: T.nilable(::String), drive_id: T.nilable(::String), has_children: T.nilable(T.any(T::Boolean, Models::Shared::Folders2)), has_content: T.nilable(T.any(T::Boolean, Models::Shared::FoldersSchemas2)), id: T.nilable(::String), is_root: T.nilable(T.any(T::Boolean, Models::Shared::FoldersSchemasIsRoot2)), name: T.nilable(::String), owner_id: T.nilable(::String), parent_folder_id: T.nilable(::String), path: T.nilable(::String), remote_drive_id: T.nilable(::String), remote_id: T.nilable(::String), remote_owner_id: T.nilable(::String), remote_parent_folder_id: T.nilable(::String), size: T.nilable(::Float), updated_at: T.nilable(::DateTime), url: T.nilable(::String)).void }
        def initialize(all_parent_folder_ids: nil, created_at: nil, description: nil, drive_id: nil, has_children: nil, has_content: nil, id: nil, is_root: nil, name: nil, owner_id: nil, parent_folder_id: nil, path: nil, remote_drive_id: nil, remote_id: nil, remote_owner_id: nil, remote_parent_folder_id: nil, size: nil, updated_at: nil, url: nil)
          @all_parent_folder_ids = all_parent_folder_ids
          @created_at = created_at
          @description = description
          @drive_id = drive_id
          @has_children = has_children
          @has_content = has_content
          @id = id
          @is_root = is_root
          @name = name
          @owner_id = owner_id
          @parent_folder_id = parent_folder_id
          @path = path
          @remote_drive_id = remote_drive_id
          @remote_id = remote_id
          @remote_owner_id = remote_owner_id
          @remote_parent_folder_id = remote_parent_folder_id
          @size = size
          @updated_at = updated_at
          @url = url
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @all_parent_folder_ids == other.all_parent_folder_ids
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @drive_id == other.drive_id
          return false unless @has_children == other.has_children
          return false unless @has_content == other.has_content
          return false unless @id == other.id
          return false unless @is_root == other.is_root
          return false unless @name == other.name
          return false unless @owner_id == other.owner_id
          return false unless @parent_folder_id == other.parent_folder_id
          return false unless @path == other.path
          return false unless @remote_drive_id == other.remote_drive_id
          return false unless @remote_id == other.remote_id
          return false unless @remote_owner_id == other.remote_owner_id
          return false unless @remote_parent_folder_id == other.remote_parent_folder_id
          return false unless @size == other.size
          return false unless @updated_at == other.updated_at
          return false unless @url == other.url
          true
        end
      end
    end
  end
end
