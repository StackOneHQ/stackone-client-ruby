# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class HrisShift
        extend T::Sig
        include Crystalline::MetadataFields

        # The approval status of the shift
        field :approval_status, Crystalline::Nilable.new(Models::Shared::ApprovalStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('approval_status') } }
        # The total break duration for this shift in ISO 8601 duration format
        field :break_duration, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('break_duration') } }
        # The breaks taken during this shift
        field :breaks, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::ShiftBreak)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('breaks') } }
        # The company ID associated with this shift
        field :company_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('company_id') } }
        # The date and time the shift was created
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The employee ID associated with this shift
        field :employee_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employee_id') } }
        # The end time of the shift
        field :end_time, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('end_time'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The location ID where this shift takes place
        field :location_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('location_id') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # The start time of the shift
        field :start_time, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_time'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The status of the shift
        field :status, Crystalline::Nilable.new(Models::Shared::HrisShiftStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('status') } }
        # The date and time the shift was last updated
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(approval_status: T.nilable(Models::Shared::ApprovalStatus), break_duration: T.nilable(::String), breaks: T.nilable(T::Array[Models::Shared::ShiftBreak]), company_id: T.nilable(::String), created_at: T.nilable(::DateTime), employee_id: T.nilable(::String), end_time: T.nilable(::DateTime), id: T.nilable(::String), location_id: T.nilable(::String), remote_id: T.nilable(::String), start_time: T.nilable(::DateTime), status: T.nilable(Models::Shared::HrisShiftStatus), updated_at: T.nilable(::DateTime)).void }
        def initialize(approval_status: nil, break_duration: nil, breaks: nil, company_id: nil, created_at: nil, employee_id: nil, end_time: nil, id: nil, location_id: nil, remote_id: nil, start_time: nil, status: nil, updated_at: nil)
          @approval_status = approval_status
          @break_duration = break_duration
          @breaks = breaks
          @company_id = company_id
          @created_at = created_at
          @employee_id = employee_id
          @end_time = end_time
          @id = id
          @location_id = location_id
          @remote_id = remote_id
          @start_time = start_time
          @status = status
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @approval_status == other.approval_status
          return false unless @break_duration == other.break_duration
          return false unless @breaks == other.breaks
          return false unless @company_id == other.company_id
          return false unless @created_at == other.created_at
          return false unless @employee_id == other.employee_id
          return false unless @end_time == other.end_time
          return false unless @id == other.id
          return false unless @location_id == other.location_id
          return false unless @remote_id == other.remote_id
          return false unless @start_time == other.start_time
          return false unless @status == other.status
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
