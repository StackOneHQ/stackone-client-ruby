# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class ProxyRequestBody
        extend T::Sig
        include Crystalline::MetadataFields

        # The body of the request
        field :body, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('body') } }
        # The headers to send in the request
        field :headers, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('headers') } }
        # The method of the request
        field :method, T.nilable(Models::Shared::Method), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('method'), 'decoder': Utils.enum_from_string(Models::Shared::Method, true) } }
        # The path of the request including any query paramters
        field :path, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('path') } }
        # The base url of the request
        field :url, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('url') } }


        sig { params(body: T.nilable(T::Hash[Symbol, ::Object]), headers: T.nilable(T::Hash[Symbol, ::Object]), method: T.nilable(Models::Shared::Method), path: T.nilable(::String), url: T.nilable(::String)).void }
        def initialize(body: nil, headers: nil, method: nil, path: nil, url: nil)
          @body = body
          @headers = headers
          @method = method
          @path = path
          @url = url
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @body == other.body
          return false unless @headers == other.headers
          return false unless @method == other.method
          return false unless @path == other.path
          return false unless @url == other.url
          true
        end
      end
    end
  end
end
