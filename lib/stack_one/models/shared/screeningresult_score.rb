# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    
      # Score information
      class ScreeningResultScore
        extend T::Sig
        include Crystalline::MetadataFields

        # Score label
        field :label, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('label') } }
        # Maximum score value
        field :max, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('max') } }
        # Minimum score value
        field :min, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('min') } }
        # Score value
        field :value, T.nilable(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value') } }


        sig { params(label: T.nilable(::String), max: T.nilable(::String), min: T.nilable(::String), value: T.nilable(::String)).void }
        def initialize(label: nil, max: nil, min: nil, value: nil)
          @label = label
          @max = max
          @min = min
          @value = value
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @label == other.label
          return false unless @max == other.max
          return false unless @min == other.min
          return false unless @value == other.value
          true
        end
      end
    end
  end
end
