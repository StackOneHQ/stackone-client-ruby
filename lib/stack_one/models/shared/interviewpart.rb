# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module StackOne
  module Models
    module Shared
    

      class InterviewPart
        extend T::Sig
        include Crystalline::MetadataFields

        # Interview part created date
        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The specific interview part's end date
        field :end_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('end_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Unique identifier
        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
        # The user (interviewer) IDs taking part in this specific interview.
        field :interviewer_ids, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('interviewer_ids') } }
        # The video meeting provider used for the interview.
        field :meeting_provider, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('meeting_provider') } }
        # The meeting URL for the interview - this may be populated using the underlying location if the location string extracted is a valid url.
        field :meeting_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('meeting_url') } }
        # Provider's unique identifier
        field :remote_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_id') } }
        # Provider's user (interviewer) IDs taking part in this specific interview.
        field :remote_interviewer_ids, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('remote_interviewer_ids') } }
        # The specific interview part's start date
        field :start_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The title of interview, usually corresponding to the title of an associated calendar event
        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('title') } }

        field :type, Crystalline::Nilable.new(Models::Shared::InterviewPartType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }
        # Interview part updated date
        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(created_at: T.nilable(::DateTime), end_at: T.nilable(::DateTime), id: T.nilable(::String), interviewer_ids: T.nilable(T::Array[::String]), meeting_provider: T.nilable(::String), meeting_url: T.nilable(::String), remote_id: T.nilable(::String), remote_interviewer_ids: T.nilable(T::Array[::String]), start_at: T.nilable(::DateTime), title: T.nilable(::String), type: T.nilable(Models::Shared::InterviewPartType), updated_at: T.nilable(::DateTime)).void }
        def initialize(created_at: nil, end_at: nil, id: nil, interviewer_ids: nil, meeting_provider: nil, meeting_url: nil, remote_id: nil, remote_interviewer_ids: nil, start_at: nil, title: nil, type: nil, updated_at: nil)
          @created_at = created_at
          @end_at = end_at
          @id = id
          @interviewer_ids = interviewer_ids
          @meeting_provider = meeting_provider
          @meeting_url = meeting_url
          @remote_id = remote_id
          @remote_interviewer_ids = remote_interviewer_ids
          @start_at = start_at
          @title = title
          @type = type
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @end_at == other.end_at
          return false unless @id == other.id
          return false unless @interviewer_ids == other.interviewer_ids
          return false unless @meeting_provider == other.meeting_provider
          return false unless @meeting_url == other.meeting_url
          return false unless @remote_id == other.remote_id
          return false unless @remote_interviewer_ids == other.remote_interviewer_ids
          return false unless @start_at == other.start_at
          return false unless @title == other.title
          return false unless @type == other.type
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
