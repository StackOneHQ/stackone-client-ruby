# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module StackOne
  extend T::Sig
  class Ats

    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(ats_create_application_request_dto: Shared::AtsCreateApplicationRequestDto, x_account_id: String).returns(Utils::FieldAugmented) }
    def create_application(ats_create_application_request_dto, x_account_id)
      # create_application - Create Application
      request = Operations::AtsCreateApplicationRequest.new(
        
        ats_create_application_request_dto: ats_create_application_request_dto,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/applications"
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :ats_create_application_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsCreateApplicationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateResult)
          res.create_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(ats_create_candidate_request_dto: Shared::AtsCreateCandidateRequestDto, x_account_id: String).returns(Utils::FieldAugmented) }
    def create_candidate(ats_create_candidate_request_dto, x_account_id)
      # create_candidate - Create Candidate (early access)
      request = Operations::AtsCreateCandidateRequest.new(
        
        ats_create_candidate_request_dto: ats_create_candidate_request_dto,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/candidates"
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :ats_create_candidate_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsCreateCandidateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CandidateResult)
          res.candidate_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(ats_create_notes_request_dto: Shared::AtsCreateNotesRequestDto, id: String, x_account_id: String).returns(Utils::FieldAugmented) }
    def create_candidate_note(ats_create_notes_request_dto, id, x_account_id)
      # create_candidate_note - Create Candidate Note
      request = Operations::AtsCreateCandidateNoteRequest.new(
        
        ats_create_notes_request_dto: ats_create_notes_request_dto,
        id: id,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsCreateCandidateNoteRequest,
        base_url,
        '/unified/ats/candidates/{id}/notes',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :ats_create_notes_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsCreateCandidateNoteResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateCandidateNoteResult)
          res.create_candidate_note_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(ats_create_offer_request_dto: Shared::AtsCreateOfferRequestDto, x_account_id: String).returns(Utils::FieldAugmented) }
    def create_offer(ats_create_offer_request_dto, x_account_id)
      # create_offer - Creates an offer
      request = Operations::AtsCreateOfferRequest.new(
        
        ats_create_offer_request_dto: ats_create_offer_request_dto,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/offers"
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :ats_create_offer_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsCreateOfferResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateOfferResult)
          res.create_offer_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetApplicationRequest)).returns(Utils::FieldAugmented) }
    def get_application(request)
      # get_application - Get Application
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetApplicationRequest,
        base_url,
        '/unified/ats/applications/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetApplicationRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetApplicationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ApplicationResult)
          res.application_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetApplicationOfferRequest)).returns(Utils::FieldAugmented) }
    def get_application_offer(request)
      # get_application_offer - Get Application Offer
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetApplicationOfferRequest,
        base_url,
        '/unified/ats/applications/{id}/offers/{subResourceId}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetApplicationOfferRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetApplicationOfferResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::OffersResult)
          res.offers_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetApplicationScorecardRequest)).returns(Utils::FieldAugmented) }
    def get_application_scorecard(request)
      # get_application_scorecard - Get Application Scorecard
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetApplicationScorecardRequest,
        base_url,
        '/unified/ats/applications/{id}/scorecards/{subResourceId}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetApplicationScorecardRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetApplicationScorecardResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::OffersResult)
          res.offers_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetCandidateRequest)).returns(Utils::FieldAugmented) }
    def get_candidate(request)
      # get_candidate - Get Candidate
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetCandidateRequest,
        base_url,
        '/unified/ats/candidates/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetCandidateRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetCandidateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CandidateResult)
          res.candidate_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetCandidateNoteRequest)).returns(Utils::FieldAugmented) }
    def get_candidate_note(request)
      # get_candidate_note - Get Candidate Note
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetCandidateNoteRequest,
        base_url,
        '/unified/ats/candidates/{id}/notes/{subResourceId}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetCandidateNoteRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetCandidateNoteResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::NoteResult)
          res.note_result = out
        end
      elsif [400, 403, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetDepartmentRequest)).returns(Utils::FieldAugmented) }
    def get_department(request)
      # get_department - Get Department
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetDepartmentRequest,
        base_url,
        '/unified/ats/departments/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetDepartmentRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetDepartmentResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::DepartmentResult)
          res.department_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetInterviewRequest)).returns(Utils::FieldAugmented) }
    def get_interview(request)
      # get_interview - Get Interview
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetInterviewRequest,
        base_url,
        '/unified/ats/interviews/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetInterviewRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetInterviewResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::InterviewsResult)
          res.interviews_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetInterviewStageRequest)).returns(Utils::FieldAugmented) }
    def get_interview_stage(request)
      # get_interview_stage - Get Interview Stage
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetInterviewStageRequest,
        base_url,
        '/unified/ats/interview_stages/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetInterviewStageRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetInterviewStageResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::InterviewStageResult)
          res.interview_stage_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetJobRequest)).returns(Utils::FieldAugmented) }
    def get_job(request)
      # get_job - Get Job
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetJobRequest,
        base_url,
        '/unified/ats/jobs/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetJobRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetJobResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::JobResult)
          res.job_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetJobPostingRequest)).returns(Utils::FieldAugmented) }
    def get_job_posting(request)
      # get_job_posting - Get Job Posting
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetJobPostingRequest,
        base_url,
        '/unified/ats/job_postings/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetJobPostingRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetJobPostingResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::JobPostingResult)
          res.job_posting_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetLocationRequest)).returns(Utils::FieldAugmented) }
    def get_location(request)
      # get_location - Get Location
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetLocationRequest,
        base_url,
        '/unified/ats/locations/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetLocationRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetLocationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ATSLocationResult)
          res.ats_location_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetOfferRequest)).returns(Utils::FieldAugmented) }
    def get_offer(request)
      # get_offer - Get Offer
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetOfferRequest,
        base_url,
        '/unified/ats/offers/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetOfferRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetOfferResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::OffersResult)
          res.offers_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetRejectedReasonRequest)).returns(Utils::FieldAugmented) }
    def get_rejected_reason(request)
      # get_rejected_reason - Get Rejected Reason
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetRejectedReasonRequest,
        base_url,
        '/unified/ats/rejected_reasons/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetRejectedReasonRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetRejectedReasonResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::RejectedReasonResult)
          res.rejected_reason_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsGetUserRequest)).returns(Utils::FieldAugmented) }
    def get_user(request)
      # get_user - Get User
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsGetUserRequest,
        base_url,
        '/unified/ats/users/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsGetUserRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsGetUserResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::UserResult)
          res.user_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListApplicationScorecardsRequest)).returns(Utils::FieldAugmented) }
    def list_application_scorecards(request)
      # list_application_scorecards - List Application Scorecards
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsListApplicationScorecardsRequest,
        base_url,
        '/unified/ats/applications/{id}/scorecards',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListApplicationScorecardsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListApplicationScorecardsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ScorecardsPaginated)
          res.scorecards_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListApplicationsRequest)).returns(Utils::FieldAugmented) }
    def list_applications(request)
      # list_applications - List Applications
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/applications"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListApplicationsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListApplicationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ApplicationsPaginated)
          res.applications_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListApplicationsOffersRequest)).returns(Utils::FieldAugmented) }
    def list_applications_offers(request)
      # list_applications_offers - List Application Offers
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsListApplicationsOffersRequest,
        base_url,
        '/unified/ats/applications/{id}/offers',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListApplicationsOffersRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListApplicationsOffersResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::OffersPaginated)
          res.offers_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListCandidateNotesRequest)).returns(Utils::FieldAugmented) }
    def list_candidate_notes(request)
      # list_candidate_notes - List Candidate Notes
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsListCandidateNotesRequest,
        base_url,
        '/unified/ats/candidates/{id}/notes',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListCandidateNotesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListCandidateNotesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::NotesPaginated)
          res.notes_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListCandidatesRequest)).returns(Utils::FieldAugmented) }
    def list_candidates(request)
      # list_candidates - List Candidates
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/candidates"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListCandidatesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListCandidatesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CandidatesPaginated)
          res.candidates_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListDepartmentsRequest)).returns(Utils::FieldAugmented) }
    def list_departments(request)
      # list_departments - List Departments
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/departments"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListDepartmentsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListDepartmentsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::DepartmentsPaginated)
          res.departments_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListInterviewStagesRequest)).returns(Utils::FieldAugmented) }
    def list_interview_stages(request)
      # list_interview_stages - List Interview Stages
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/interview_stages"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListInterviewStagesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListInterviewStagesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::InterviewStagesPaginated)
          res.interview_stages_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListInterviewsRequest)).returns(Utils::FieldAugmented) }
    def list_interviews(request)
      # list_interviews - List Interviews
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/interviews"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListInterviewsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListInterviewsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::InterviewsPaginated)
          res.interviews_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListJobPostingsRequest)).returns(Utils::FieldAugmented) }
    def list_job_postings(request)
      # list_job_postings - List Job Postings
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/job_postings"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListJobPostingsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListJobPostingsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::JobPostingsPaginated)
          res.job_postings_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListJobsRequest)).returns(Utils::FieldAugmented) }
    def list_jobs(request)
      # list_jobs - List Jobs
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/jobs"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListJobsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListJobsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::JobsPaginated)
          res.jobs_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListLocationsRequest)).returns(Utils::FieldAugmented) }
    def list_locations(request)
      # list_locations - List locations
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/locations"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListLocationsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListLocationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ATSLocationsPaginated)
          res.ats_locations_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListOffersRequest)).returns(Utils::FieldAugmented) }
    def list_offers(request)
      # list_offers - List Offers
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/offers"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListOffersRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListOffersResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::OffersPaginated)
          res.offers_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListRejectedReasonsRequest)).returns(Utils::FieldAugmented) }
    def list_rejected_reasons(request)
      # list_rejected_reasons - List Rejected Reasons
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/rejected_reasons"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListRejectedReasonsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListRejectedReasonsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::RejectedReasonsPaginated)
          res.rejected_reasons_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::AtsListUsersRequest)).returns(Utils::FieldAugmented) }
    def list_users(request)
      # list_users - List Users
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/ats/users"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::AtsListUsersRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsListUsersResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::UsersPaginated)
          res.users_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(ats_update_application_request_dto: Shared::AtsUpdateApplicationRequestDto, id: String, x_account_id: String).returns(Utils::FieldAugmented) }
    def update_application(ats_update_application_request_dto, id, x_account_id)
      # update_application - Update Application
      request = Operations::AtsUpdateApplicationRequest.new(
        
        ats_update_application_request_dto: ats_update_application_request_dto,
        id: id,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsUpdateApplicationRequest,
        base_url,
        '/unified/ats/applications/{id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :ats_update_application_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsUpdateApplicationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::UpdateResult)
          res.update_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(ats_update_candidates_request_dto: Shared::AtsUpdateCandidatesRequestDto, id: String, x_account_id: String).returns(Utils::FieldAugmented) }
    def update_candidate(ats_update_candidates_request_dto, id, x_account_id)
      # update_candidate - Update Candidate (early access)
      request = Operations::AtsUpdateCandidateRequest.new(
        
        ats_update_candidates_request_dto: ats_update_candidates_request_dto,
        id: id,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::AtsUpdateCandidateRequest,
        base_url,
        '/unified/ats/candidates/{id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :ats_update_candidates_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AtsUpdateCandidateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CandidateResult)
          res.candidate_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end
  end
end
