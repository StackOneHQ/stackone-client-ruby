# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module StackOne
  extend T::Sig
  class Marketing

    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(marketing_create_email_template_request_dto: Shared::MarketingCreateEmailTemplateRequestDto, x_account_id: String).returns(Utils::FieldAugmented) }
    def create_email_template(marketing_create_email_template_request_dto, x_account_id)
      # create_email_template - Create email template
      request = Operations::MarketingCreateEmailTemplateRequest.new(
        
        marketing_create_email_template_request_dto: marketing_create_email_template_request_dto,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/marketing/templates/email"
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :marketing_create_email_template_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingCreateEmailTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateTemplateResult)
          res.create_template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(marketing_create_template_request_dto: Shared::MarketingCreateTemplateRequestDto, x_account_id: String).returns(Utils::FieldAugmented) }
    def create_omni_channel_template(marketing_create_template_request_dto, x_account_id)
      # create_omni_channel_template - Create omni-channel template
      request = Operations::MarketingCreateOmniChannelTemplateRequest.new(
        
        marketing_create_template_request_dto: marketing_create_template_request_dto,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/marketing/templates/omni_channel"
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :marketing_create_template_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingCreateOmniChannelTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateTemplateResult)
          res.create_template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(marketing_create_push_template_request_dto: Shared::MarketingCreatePushTemplateRequestDto, x_account_id: String).returns(Utils::FieldAugmented) }
    def create_push_template(marketing_create_push_template_request_dto, x_account_id)
      # create_push_template - Create push template
      request = Operations::MarketingCreatePushTemplateRequest.new(
        
        marketing_create_push_template_request_dto: marketing_create_push_template_request_dto,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/marketing/templates/push"
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :marketing_create_push_template_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingCreatePushTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateTemplateResult)
          res.create_template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::MarketingGetCampaignRequest)).returns(Utils::FieldAugmented) }
    def get_campaign(request)
      # get_campaign - Get campaign
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::MarketingGetCampaignRequest,
        base_url,
        '/unified/marketing/campaigns/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::MarketingGetCampaignRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingGetCampaignResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CampaignResult)
          res.campaign_result = out
        end
      elsif [400, 403, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::MarketingGetEmailTemplateRequest)).returns(Utils::FieldAugmented) }
    def get_email_template(request)
      # get_email_template - Get email template
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::MarketingGetEmailTemplateRequest,
        base_url,
        '/unified/marketing/templates/email/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::MarketingGetEmailTemplateRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingGetEmailTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TemplateResult)
          res.template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::MarketingGetOmniChannelTemplateRequest)).returns(Utils::FieldAugmented) }
    def get_omni_channel_template(request)
      # get_omni_channel_template - Get omni-channel template
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::MarketingGetOmniChannelTemplateRequest,
        base_url,
        '/unified/marketing/templates/omni_channel/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::MarketingGetOmniChannelTemplateRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingGetOmniChannelTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TemplateResult)
          res.template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::MarketingGetPushTemplateRequest)).returns(Utils::FieldAugmented) }
    def get_push_template(request)
      # get_push_template - Get push template
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::MarketingGetPushTemplateRequest,
        base_url,
        '/unified/marketing/templates/push/{id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::MarketingGetPushTemplateRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingGetPushTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TemplateResult)
          res.template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::MarketingListCampaignsRequest)).returns(Utils::FieldAugmented) }
    def list_campaigns(request)
      # list_campaigns - List campaigns
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/marketing/campaigns"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::MarketingListCampaignsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingListCampaignsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CampaignsPaginated)
          res.campaigns_paginated = out
        end
      elsif [400, 403, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::MarketingListEmailTemplatesRequest)).returns(Utils::FieldAugmented) }
    def list_email_templates(request)
      # list_email_templates - List email templates
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/marketing/templates/email"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::MarketingListEmailTemplatesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingListEmailTemplatesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TemplatesPaginated)
          res.templates_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::MarketingListOmniChannelTemplatesRequest)).returns(Utils::FieldAugmented) }
    def list_omni_channel_templates(request)
      # list_omni_channel_templates - List omni-channel templates
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/marketing/templates/omni_channel"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::MarketingListOmniChannelTemplatesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingListOmniChannelTemplatesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TemplatesPaginated)
          res.templates_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(request: T.nilable(Operations::MarketingListPushTemplatesRequest)).returns(Utils::FieldAugmented) }
    def list_push_templates(request)
      # list_push_templates - List push templates
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/unified/marketing/templates/push"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(Operations::MarketingListPushTemplatesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingListPushTemplatesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TemplatesPaginated)
          res.templates_paginated = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(marketing_create_email_template_request_dto: Shared::MarketingCreateEmailTemplateRequestDto, id: String, x_account_id: String).returns(Utils::FieldAugmented) }
    def update_email_template(marketing_create_email_template_request_dto, id, x_account_id)
      # update_email_template - Update email template
      request = Operations::MarketingUpdateEmailTemplateRequest.new(
        
        marketing_create_email_template_request_dto: marketing_create_email_template_request_dto,
        id: id,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::MarketingUpdateEmailTemplateRequest,
        base_url,
        '/unified/marketing/templates/email/{id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :marketing_create_email_template_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingUpdateEmailTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateTemplateResult)
          res.create_template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(marketing_create_template_request_dto: Shared::MarketingCreateTemplateRequestDto, id: String, x_account_id: String).returns(Utils::FieldAugmented) }
    def update_omni_channel_template(marketing_create_template_request_dto, id, x_account_id)
      # update_omni_channel_template - Update omni-channel template
      request = Operations::MarketingUpdateOmniChannelTemplateRequest.new(
        
        marketing_create_template_request_dto: marketing_create_template_request_dto,
        id: id,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::MarketingUpdateOmniChannelTemplateRequest,
        base_url,
        '/unified/marketing/templates/omni_channel/{id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :marketing_create_template_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingUpdateOmniChannelTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateTemplateResult)
          res.create_template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end

    sig { params(marketing_create_push_template_request_dto: Shared::MarketingCreatePushTemplateRequestDto, id: String, x_account_id: String).returns(Utils::FieldAugmented) }
    def update_push_template(marketing_create_push_template_request_dto, id, x_account_id)
      # update_push_template - Update push template
      request = Operations::MarketingUpdatePushTemplateRequest.new(
        
        marketing_create_push_template_request_dto: marketing_create_push_template_request_dto,
        id: id,
        x_account_id: x_account_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::MarketingUpdatePushTemplateRequest,
        base_url,
        '/unified/marketing/templates/push/{id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :marketing_create_push_template_request_dto, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MarketingUpdatePushTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateTemplateResult)
          res.create_template_result = out
        end
      elsif [400, 403, 412, 429, 500, 501].include?(r.status)
      end
      res
    end
  end
end
