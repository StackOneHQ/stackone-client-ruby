# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/connectorsmeta'

module StackOne
  module Operations

    class StackoneGetConnectorMetaRequest < StackOne::Utils::FieldAugmented
      extend T::Sig


      field :provider, String, { 'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': false } }
      # The comma separated list of data that will be included in the response
      field :include, T.nilable(String), { 'query_param': { 'field_name': 'include', 'style': 'form', 'explode': true } }


      sig { params(provider: String, include: T.nilable(String)).void }
      def initialize(provider: nil, include: nil)
        @provider = provider
        @include = include
      end
    end


    class StackoneGetConnectorMetaResponse < StackOne::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # The connector meta information was retrieved
      field :connectors_meta, T.nilable(Shared::ConnectorsMeta)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, connectors_meta: T.nilable(Shared::ConnectorsMeta)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, connectors_meta: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @connectors_meta = connectors_meta
      end
    end
  end
end
