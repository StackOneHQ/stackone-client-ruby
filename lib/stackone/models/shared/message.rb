# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module StackOne
  module Shared

    class MessageMessageType < T::Enum
      enums do
        EMAIL = new('email')
        SMS = new('sms')
        WEB_PUSH = new('web_push')
        IOS_PUSH = new('ios_push')
        ANDROID_PUSH = new('android_push')
        APP_PUSH = new('app_push')
        OMNI_CHANNEL = new('omni_channel')
        UNKNOWN = new('unknown')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end



    class Message < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }

      field :message_content, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('message_content') } }

      field :message_type, T.nilable(Shared::MessageMessageType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('message_type'), 'decoder': Utils.enum_from_string(Shared::MessageMessageType, true) } }

      field :name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }


      sig { params(id: T.nilable(String), message_content: T.nilable(Object), message_type: T.nilable(Shared::MessageMessageType), name: T.nilable(String)).void }
      def initialize(id: nil, message_content: nil, message_type: nil, name: nil)
        @id = id
        @message_content = message_content
        @message_type = message_type
        @name = name
      end
    end
  end
end
