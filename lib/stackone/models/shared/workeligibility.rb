# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module StackOne
  module Shared

    class Document < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The content of the file
      field :contents, T.nilable(T::Array[Shared::Content]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('contents') } }
      # The creation date of the file
      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The unique ID of the file
      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # The name of the file
      field :name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # The path where the file is stored
      field :path, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('path') } }
      # The update date of the file
      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(contents: T.nilable(T::Array[Shared::Content]), created_at: T.nilable(DateTime), id: T.nilable(String), name: T.nilable(String), path: T.nilable(String), updated_at: T.nilable(DateTime)).void }
      def initialize(contents: nil, created_at: nil, id: nil, name: nil, path: nil, updated_at: nil)
        @contents = contents
        @created_at = created_at
        @id = id
        @name = name
        @path = path
        @updated_at = updated_at
      end
    end


    class WorkEligibilityValue < T::Enum
      enums do
        VISA = new('visa')
        PASSPORT = new('passport')
        DRIVER_LICENSE = new('driver_license')
        BIRTH_CERTIFICATE = new('birth_certificate')
        OTHER = new('other')
      end
    end



    class WorkEligibilityType < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_type, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_type') } }

      field :value, T.nilable(Shared::WorkEligibilityValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::WorkEligibilityValue, true) } }


      sig { params(source_type: T.nilable(Object), value: T.nilable(Shared::WorkEligibilityValue)).void }
      def initialize(source_type: nil, value: nil)
        @source_type = source_type
        @value = value
      end
    end


    class WorkEligibility < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :document, T.nilable(Shared::Document), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('document') } }

      field :issued_by, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('issued_by') } }

      field :number, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('number') } }

      field :sub_type, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('sub_type') } }

      field :type, T.nilable(Shared::WorkEligibilityType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }

      field :valid_from, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('valid_from'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :valid_to, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('valid_to'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(document: T.nilable(Shared::Document), issued_by: T.nilable(String), number: T.nilable(String), sub_type: T.nilable(String), type: T.nilable(Shared::WorkEligibilityType), valid_from: T.nilable(DateTime), valid_to: T.nilable(DateTime)).void }
      def initialize(document: nil, issued_by: nil, number: nil, sub_type: nil, type: nil, valid_from: nil, valid_to: nil)
        @document = document
        @issued_by = issued_by
        @number = number
        @sub_type = sub_type
        @type = type
        @valid_from = valid_from
        @valid_to = valid_to
      end
    end
  end
end
