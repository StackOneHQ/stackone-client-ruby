# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module StackOne
  module Shared

    class DocumentApiModelValue < T::Enum
      enums do
        VISA = new('visa')
        PASSPORT = new('passport')
        DRIVER_LICENSE = new('driver_license')
        RESUME = new('resume')
        POLICY = new('policy')
        OFFER_LETTER = new('offer_letter')
        POLICY_AGREEMENT = new('policy_agreement')
        HOME_ADDRESS = new('home_address')
        NATIONAL_ID = new('national_id')
        OTHER = new('other')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The content type of the document
    class Type < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::DocumentApiModelValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::DocumentApiModelValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::DocumentApiModelValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end


    class DocumentApiModel < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The content of the file
      field :contents, T.nilable(T::Array[Shared::Content]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('contents') } }
      # The creation date of the file
      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The unique ID of the file
      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # The name of the file
      field :name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # The path where the file is stored
      field :path, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('path') } }
      # The content type of the document
      field :type, T.nilable(Shared::Type), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }
      # The update date of the file
      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(contents: T.nilable(T::Array[Shared::Content]), created_at: T.nilable(DateTime), id: T.nilable(String), name: T.nilable(String), path: T.nilable(String), type: T.nilable(Shared::Type), updated_at: T.nilable(DateTime)).void }
      def initialize(contents: nil, created_at: nil, id: nil, name: nil, path: nil, type: nil, updated_at: nil)
        @contents = contents
        @created_at = created_at
        @id = id
        @name = name
        @path = path
        @type = type
        @updated_at = updated_at
      end
    end
  end
end
