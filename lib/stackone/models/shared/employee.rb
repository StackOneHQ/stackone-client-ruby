# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module StackOne
  module Shared
    # The employee avatar
    class Avatar < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :base64, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('base64') } }

      field :url, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('url') } }


      sig { params(base64: T.nilable(String), url: T.nilable(String)).void }
      def initialize(base64: nil, url: nil)
        @base64 = base64
        @url = url
      end
    end


    class EmployeeValue < T::Enum
      enums do
        FULL_TIME = new('full_time')
        SHIFTS = new('shifts')
        PART_TIME = new('part_time')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The employment work schedule type (e.g., full-time, part-time)
    class EmploymentContractType < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::EmployeeValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end


    class EmployeeSchemasValue < T::Enum
      enums do
        ACTIVE = new('active')
        PENDING = new('pending')
        TERMINATED = new('terminated')
        LEAVE = new('leave')
        INACTIVE = new('inactive')
        UNKNOWN = new('unknown')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The employee employment status
    class EmploymentStatus < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::EmployeeSchemasValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end


    class EmployeeSchemasEmploymentTypeValue < T::Enum
      enums do
        FULL_TIME = new('full_time')
        PART_TIME = new('part_time')
        CONTRACTOR = new('contractor')
        INTERN = new('intern')
        PERMANENT = new('permanent')
        APPRENTICE = new('apprentice')
        FREELANCE = new('freelance')
        TERMINATED = new('terminated')
        TEMPORARY = new('temporary')
        SEASONAL = new('seasonal')
        VOLUNTEER = new('volunteer')
        PROBATION = new('probation')
        INTERNAL = new('internal')
        EXTERNAL = new('external')
        EMPLOYER_OF_RECORD = new('employer_of_record')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The employee employment type
    class EmploymentType < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::EmployeeSchemasEmploymentTypeValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasEmploymentTypeValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasEmploymentTypeValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end


    class EmployeeSchemasEthnicityValue < T::Enum
      enums do
        WHITE = new('white')
        BLACK_OR_AFRICAN_AMERICAN = new('black_or_african_american')
        ASIAN = new('asian')
        HISPANIC_OR_LATINO = new('hispanic_or_latino')
        AMERICAN_INDIAN_OR_ALASKA_NATIVE = new('american_indian_or_alaska_native')
        NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER = new('native_hawaiian_or_pacific_islander')
        TWO_OR_MORE_RACES = new('two_or_more_races')
        NOT_DISCLOSED = new('not_disclosed')
        OTHER = new('other')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The employee ethnicity
    class Ethnicity < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::EmployeeSchemasEthnicityValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasEthnicityValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasEthnicityValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end


    class EmployeeSchemasGenderValue < T::Enum
      enums do
        MALE = new('male')
        FEMALE = new('female')
        NON_BINARY = new('non_binary')
        OTHER = new('other')
        NOT_DISCLOSED = new('not_disclosed')
        DIVERSE = new('diverse')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The employee gender
    class Gender < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::EmployeeSchemasGenderValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasGenderValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasGenderValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end

    # EmployeeSchemasHomeLocationValue - The ISO3166-1 Alpha2 Code of the Country
    class EmployeeSchemasHomeLocationValue < T::Enum
      enums do
        AF = new('AF')
        AL = new('AL')
        DZ = new('DZ')
        AS = new('AS')
        AD = new('AD')
        AO = new('AO')
        AI = new('AI')
        AQ = new('AQ')
        AG = new('AG')
        AR = new('AR')
        AM = new('AM')
        AW = new('AW')
        AU = new('AU')
        AT = new('AT')
        AZ = new('AZ')
        BS = new('BS')
        BH = new('BH')
        BD = new('BD')
        BB = new('BB')
        BY = new('BY')
        BE = new('BE')
        BZ = new('BZ')
        BJ = new('BJ')
        BM = new('BM')
        BT = new('BT')
        BO = new('BO')
        BQ = new('BQ')
        BA = new('BA')
        BW = new('BW')
        BV = new('BV')
        BR = new('BR')
        IO = new('IO')
        BN = new('BN')
        BG = new('BG')
        BF = new('BF')
        BI = new('BI')
        KH = new('KH')
        CM = new('CM')
        CA = new('CA')
        CV = new('CV')
        KY = new('KY')
        CF = new('CF')
        TD = new('TD')
        CL = new('CL')
        CN = new('CN')
        CX = new('CX')
        CC = new('CC')
        CO = new('CO')
        KM = new('KM')
        CG = new('CG')
        CD = new('CD')
        CK = new('CK')
        CR = new('CR')
        HR = new('HR')
        CU = new('CU')
        CW = new('CW')
        CY = new('CY')
        CZ = new('CZ')
        CI = new('CI')
        DK = new('DK')
        DJ = new('DJ')
        DM = new('DM')
        DO = new('DO')
        EC = new('EC')
        EG = new('EG')
        SV = new('SV')
        GQ = new('GQ')
        ER = new('ER')
        EE = new('EE')
        ET = new('ET')
        FK = new('FK')
        FO = new('FO')
        FJ = new('FJ')
        FI = new('FI')
        FR = new('FR')
        GF = new('GF')
        PF = new('PF')
        TF = new('TF')
        GA = new('GA')
        GM = new('GM')
        GE = new('GE')
        DE = new('DE')
        GH = new('GH')
        GI = new('GI')
        GR = new('GR')
        GL = new('GL')
        GD = new('GD')
        GP = new('GP')
        GU = new('GU')
        GT = new('GT')
        GG = new('GG')
        GN = new('GN')
        GW = new('GW')
        GY = new('GY')
        HT = new('HT')
        HM = new('HM')
        VA = new('VA')
        HN = new('HN')
        HK = new('HK')
        HU = new('HU')
        IS = new('IS')
        IN = new('IN')
        ID = new('ID')
        IR = new('IR')
        IQ = new('IQ')
        IE = new('IE')
        IM = new('IM')
        IL = new('IL')
        IT = new('IT')
        JM = new('JM')
        JP = new('JP')
        JE = new('JE')
        JO = new('JO')
        KZ = new('KZ')
        KE = new('KE')
        KI = new('KI')
        KP = new('KP')
        KR = new('KR')
        KW = new('KW')
        KG = new('KG')
        LA = new('LA')
        LV = new('LV')
        LB = new('LB')
        LS = new('LS')
        LR = new('LR')
        LY = new('LY')
        LI = new('LI')
        LT = new('LT')
        LU = new('LU')
        MO = new('MO')
        MK = new('MK')
        MG = new('MG')
        MW = new('MW')
        MY = new('MY')
        MV = new('MV')
        ML = new('ML')
        MT = new('MT')
        MH = new('MH')
        MQ = new('MQ')
        MR = new('MR')
        MU = new('MU')
        YT = new('YT')
        MX = new('MX')
        FM = new('FM')
        MD = new('MD')
        MC = new('MC')
        MN = new('MN')
        ME = new('ME')
        MS = new('MS')
        MA = new('MA')
        MZ = new('MZ')
        MM = new('MM')
        NA = new('NA')
        NR = new('NR')
        NP = new('NP')
        NL = new('NL')
        NC = new('NC')
        NZ = new('NZ')
        NI = new('NI')
        NE = new('NE')
        NG = new('NG')
        NU = new('NU')
        NF = new('NF')
        MP = new('MP')
        NO = new('NO')
        OM = new('OM')
        PK = new('PK')
        PW = new('PW')
        PS = new('PS')
        PA = new('PA')
        PG = new('PG')
        PY = new('PY')
        PE = new('PE')
        PH = new('PH')
        PN = new('PN')
        PL = new('PL')
        PT = new('PT')
        PR = new('PR')
        QA = new('QA')
        RO = new('RO')
        RU = new('RU')
        RW = new('RW')
        RE = new('RE')
        BL = new('BL')
        SH = new('SH')
        KN = new('KN')
        LC = new('LC')
        MF = new('MF')
        PM = new('PM')
        VC = new('VC')
        WS = new('WS')
        SM = new('SM')
        ST = new('ST')
        SA = new('SA')
        SN = new('SN')
        RS = new('RS')
        SC = new('SC')
        SL = new('SL')
        SG = new('SG')
        SX = new('SX')
        SK = new('SK')
        SI = new('SI')
        SB = new('SB')
        SO = new('SO')
        ZA = new('ZA')
        GS = new('GS')
        SS = new('SS')
        ES = new('ES')
        LK = new('LK')
        SD = new('SD')
        SR = new('SR')
        SJ = new('SJ')
        SZ = new('SZ')
        SE = new('SE')
        CH = new('CH')
        SY = new('SY')
        TW = new('TW')
        TJ = new('TJ')
        TZ = new('TZ')
        TH = new('TH')
        TL = new('TL')
        TG = new('TG')
        TK = new('TK')
        TO = new('TO')
        TT = new('TT')
        TN = new('TN')
        TR = new('TR')
        TM = new('TM')
        TC = new('TC')
        TV = new('TV')
        UG = new('UG')
        UA = new('UA')
        AE = new('AE')
        GB = new('GB')
        US = new('US')
        UM = new('UM')
        UY = new('UY')
        UZ = new('UZ')
        VU = new('VU')
        VE = new('VE')
        VN = new('VN')
        VG = new('VG')
        VI = new('VI')
        WF = new('WF')
        EH = new('EH')
        YE = new('YE')
        ZM = new('ZM')
        ZW = new('ZW')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The country code
    class EmployeeSchemasCountry < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }
      # The ISO3166-1 Alpha2 Code of the Country
      field :value, T.nilable(Shared::EmployeeSchemasHomeLocationValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasHomeLocationValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasHomeLocationValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end


    class EmployeeSchemasHomeLocationLocationTypeValue < T::Enum
      enums do
        HOME = new('home')
        WORK = new('work')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The location type
    class EmployeeSchemasLocationType < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::EmployeeSchemasHomeLocationLocationTypeValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasHomeLocationLocationTypeValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasHomeLocationLocationTypeValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end

    # The employee home location
    class HomeLocation < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The city where the location is situated
      field :city, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('city') } }
      # The country code
      field :country, T.nilable(Shared::EmployeeSchemasCountry), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('country') } }
      # The created_at date
      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The employee ID
      field :employee_id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employee_id') } }
      # The unique ID of the location
      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # The location type
      field :location_type, T.nilable(Shared::EmployeeSchemasLocationType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('location_type') } }
      # The name of the location
      field :name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # The phone number of the location
      field :phone_number, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('phone_number') } }
      # The state where the location is situated
      field :state, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('state') } }
      # The first line of the address
      field :street_1, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('street_1') } }
      # The second line of the address
      field :street_2, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('street_2') } }
      # The updated_at date
      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The ZIP code/Postal code of the location
      field :zip_code, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('zip_code') } }


      sig { params(city: T.nilable(String), country: T.nilable(Shared::EmployeeSchemasCountry), created_at: T.nilable(DateTime), employee_id: T.nilable(String), id: T.nilable(String), location_type: T.nilable(Shared::EmployeeSchemasLocationType), name: T.nilable(String), phone_number: T.nilable(String), state: T.nilable(String), street_1: T.nilable(String), street_2: T.nilable(String), updated_at: T.nilable(DateTime), zip_code: T.nilable(String)).void }
      def initialize(city: nil, country: nil, created_at: nil, employee_id: nil, id: nil, location_type: nil, name: nil, phone_number: nil, state: nil, street_1: nil, street_2: nil, updated_at: nil, zip_code: nil)
        @city = city
        @country = country
        @created_at = created_at
        @employee_id = employee_id
        @id = id
        @location_type = location_type
        @name = name
        @phone_number = phone_number
        @state = state
        @street_1 = street_1
        @street_2 = street_2
        @updated_at = updated_at
        @zip_code = zip_code
      end
    end

    # The employee job description
    class JobDescription < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :text, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('text') } }


      sig { params(text: T.nilable(String)).void }
      def initialize(text: nil)
        @text = text
      end
    end


    class EmployeeSchemasMaritalStatusValue < T::Enum
      enums do
        SINGLE = new('single')
        MARRIED = new('married')
        COMMON_LAW = new('common_law')
        DIVORCED = new('divorced')
        WIDOWED = new('widowed')
        DOMESTIC_PARTNERSHIP = new('domestic_partnership')
        SEPARATED = new('separated')
        OTHER = new('other')
        NOT_DISCLOSED = new('not_disclosed')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The employee marital status
    class MaritalStatus < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::EmployeeSchemasMaritalStatusValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasMaritalStatusValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasMaritalStatusValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end

    # EmployeeSchemasWorkLocationValue - The ISO3166-1 Alpha2 Code of the Country
    class EmployeeSchemasWorkLocationValue < T::Enum
      enums do
        AF = new('AF')
        AL = new('AL')
        DZ = new('DZ')
        AS = new('AS')
        AD = new('AD')
        AO = new('AO')
        AI = new('AI')
        AQ = new('AQ')
        AG = new('AG')
        AR = new('AR')
        AM = new('AM')
        AW = new('AW')
        AU = new('AU')
        AT = new('AT')
        AZ = new('AZ')
        BS = new('BS')
        BH = new('BH')
        BD = new('BD')
        BB = new('BB')
        BY = new('BY')
        BE = new('BE')
        BZ = new('BZ')
        BJ = new('BJ')
        BM = new('BM')
        BT = new('BT')
        BO = new('BO')
        BQ = new('BQ')
        BA = new('BA')
        BW = new('BW')
        BV = new('BV')
        BR = new('BR')
        IO = new('IO')
        BN = new('BN')
        BG = new('BG')
        BF = new('BF')
        BI = new('BI')
        KH = new('KH')
        CM = new('CM')
        CA = new('CA')
        CV = new('CV')
        KY = new('KY')
        CF = new('CF')
        TD = new('TD')
        CL = new('CL')
        CN = new('CN')
        CX = new('CX')
        CC = new('CC')
        CO = new('CO')
        KM = new('KM')
        CG = new('CG')
        CD = new('CD')
        CK = new('CK')
        CR = new('CR')
        HR = new('HR')
        CU = new('CU')
        CW = new('CW')
        CY = new('CY')
        CZ = new('CZ')
        CI = new('CI')
        DK = new('DK')
        DJ = new('DJ')
        DM = new('DM')
        DO = new('DO')
        EC = new('EC')
        EG = new('EG')
        SV = new('SV')
        GQ = new('GQ')
        ER = new('ER')
        EE = new('EE')
        ET = new('ET')
        FK = new('FK')
        FO = new('FO')
        FJ = new('FJ')
        FI = new('FI')
        FR = new('FR')
        GF = new('GF')
        PF = new('PF')
        TF = new('TF')
        GA = new('GA')
        GM = new('GM')
        GE = new('GE')
        DE = new('DE')
        GH = new('GH')
        GI = new('GI')
        GR = new('GR')
        GL = new('GL')
        GD = new('GD')
        GP = new('GP')
        GU = new('GU')
        GT = new('GT')
        GG = new('GG')
        GN = new('GN')
        GW = new('GW')
        GY = new('GY')
        HT = new('HT')
        HM = new('HM')
        VA = new('VA')
        HN = new('HN')
        HK = new('HK')
        HU = new('HU')
        IS = new('IS')
        IN = new('IN')
        ID = new('ID')
        IR = new('IR')
        IQ = new('IQ')
        IE = new('IE')
        IM = new('IM')
        IL = new('IL')
        IT = new('IT')
        JM = new('JM')
        JP = new('JP')
        JE = new('JE')
        JO = new('JO')
        KZ = new('KZ')
        KE = new('KE')
        KI = new('KI')
        KP = new('KP')
        KR = new('KR')
        KW = new('KW')
        KG = new('KG')
        LA = new('LA')
        LV = new('LV')
        LB = new('LB')
        LS = new('LS')
        LR = new('LR')
        LY = new('LY')
        LI = new('LI')
        LT = new('LT')
        LU = new('LU')
        MO = new('MO')
        MK = new('MK')
        MG = new('MG')
        MW = new('MW')
        MY = new('MY')
        MV = new('MV')
        ML = new('ML')
        MT = new('MT')
        MH = new('MH')
        MQ = new('MQ')
        MR = new('MR')
        MU = new('MU')
        YT = new('YT')
        MX = new('MX')
        FM = new('FM')
        MD = new('MD')
        MC = new('MC')
        MN = new('MN')
        ME = new('ME')
        MS = new('MS')
        MA = new('MA')
        MZ = new('MZ')
        MM = new('MM')
        NA = new('NA')
        NR = new('NR')
        NP = new('NP')
        NL = new('NL')
        NC = new('NC')
        NZ = new('NZ')
        NI = new('NI')
        NE = new('NE')
        NG = new('NG')
        NU = new('NU')
        NF = new('NF')
        MP = new('MP')
        NO = new('NO')
        OM = new('OM')
        PK = new('PK')
        PW = new('PW')
        PS = new('PS')
        PA = new('PA')
        PG = new('PG')
        PY = new('PY')
        PE = new('PE')
        PH = new('PH')
        PN = new('PN')
        PL = new('PL')
        PT = new('PT')
        PR = new('PR')
        QA = new('QA')
        RO = new('RO')
        RU = new('RU')
        RW = new('RW')
        RE = new('RE')
        BL = new('BL')
        SH = new('SH')
        KN = new('KN')
        LC = new('LC')
        MF = new('MF')
        PM = new('PM')
        VC = new('VC')
        WS = new('WS')
        SM = new('SM')
        ST = new('ST')
        SA = new('SA')
        SN = new('SN')
        RS = new('RS')
        SC = new('SC')
        SL = new('SL')
        SG = new('SG')
        SX = new('SX')
        SK = new('SK')
        SI = new('SI')
        SB = new('SB')
        SO = new('SO')
        ZA = new('ZA')
        GS = new('GS')
        SS = new('SS')
        ES = new('ES')
        LK = new('LK')
        SD = new('SD')
        SR = new('SR')
        SJ = new('SJ')
        SZ = new('SZ')
        SE = new('SE')
        CH = new('CH')
        SY = new('SY')
        TW = new('TW')
        TJ = new('TJ')
        TZ = new('TZ')
        TH = new('TH')
        TL = new('TL')
        TG = new('TG')
        TK = new('TK')
        TO = new('TO')
        TT = new('TT')
        TN = new('TN')
        TR = new('TR')
        TM = new('TM')
        TC = new('TC')
        TV = new('TV')
        UG = new('UG')
        UA = new('UA')
        AE = new('AE')
        GB = new('GB')
        US = new('US')
        UM = new('UM')
        UY = new('UY')
        UZ = new('UZ')
        VU = new('VU')
        VE = new('VE')
        VN = new('VN')
        VG = new('VG')
        VI = new('VI')
        WF = new('WF')
        EH = new('EH')
        YE = new('YE')
        ZM = new('ZM')
        ZW = new('ZW')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The country code
    class EmployeeCountry < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }
      # The ISO3166-1 Alpha2 Code of the Country
      field :value, T.nilable(Shared::EmployeeSchemasWorkLocationValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasWorkLocationValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasWorkLocationValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end


    class EmployeeSchemasWorkLocationLocationTypeValue < T::Enum
      enums do
        HOME = new('home')
        WORK = new('work')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end


    # The location type
    class EmployeeLocationType < ::StackOne::Utils::FieldAugmented
      extend T::Sig


      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }

      field :value, T.nilable(Shared::EmployeeSchemasWorkLocationLocationTypeValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::EmployeeSchemasWorkLocationLocationTypeValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::EmployeeSchemasWorkLocationLocationTypeValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end

    # The employee work location
    class WorkLocation < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The city where the location is situated
      field :city, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('city') } }
      # The country code
      field :country, T.nilable(Shared::EmployeeCountry), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('country') } }
      # The created_at date
      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The employee ID
      field :employee_id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employee_id') } }
      # The unique ID of the location
      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # The location type
      field :location_type, T.nilable(Shared::EmployeeLocationType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('location_type') } }
      # The name of the location
      field :name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # The phone number of the location
      field :phone_number, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('phone_number') } }
      # The state where the location is situated
      field :state, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('state') } }
      # The first line of the address
      field :street_1, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('street_1') } }
      # The second line of the address
      field :street_2, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('street_2') } }
      # The updated_at date
      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The ZIP code/Postal code of the location
      field :zip_code, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('zip_code') } }


      sig { params(city: T.nilable(String), country: T.nilable(Shared::EmployeeCountry), created_at: T.nilable(DateTime), employee_id: T.nilable(String), id: T.nilable(String), location_type: T.nilable(Shared::EmployeeLocationType), name: T.nilable(String), phone_number: T.nilable(String), state: T.nilable(String), street_1: T.nilable(String), street_2: T.nilable(String), updated_at: T.nilable(DateTime), zip_code: T.nilable(String)).void }
      def initialize(city: nil, country: nil, created_at: nil, employee_id: nil, id: nil, location_type: nil, name: nil, phone_number: nil, state: nil, street_1: nil, street_2: nil, updated_at: nil, zip_code: nil)
        @city = city
        @country = country
        @created_at = created_at
        @employee_id = employee_id
        @id = id
        @location_type = location_type
        @name = name
        @phone_number = phone_number
        @state = state
        @street_1 = street_1
        @street_2 = street_2
        @updated_at = updated_at
        @zip_code = zip_code
      end
    end


    class Employee < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The employee avatar
      field :avatar, T.nilable(Shared::Avatar), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('avatar') } }
      # The employee avatar Url
      field :avatar_url, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('avatar_url') } }
      # The employee birthday
      field :birthday, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('birthday'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The citizenships of the Employee
      field :citizenships, T.nilable(T::Array[Shared::CountryCodeEnum]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('citizenships') } }
      # The employee company name
      field :company_name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('company_name') } }
      # The employee cost centers
      field :cost_centers, T.nilable(T::Array[Shared::CostCenters]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('cost_centers') } }
      # The created_at date
      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The employee custom fields
      field :custom_fields, T.nilable(T::Array[Shared::EmployeeCustomFields]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('custom_fields') } }
      # The employee date_of_birth
      field :date_of_birth, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('date_of_birth'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The employee department
      field :department, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('department') } }
      # The employee display name
      field :display_name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('display_name') } }
      # The employment work schedule type (e.g., full-time, part-time)
      field :employment_contract_type, T.nilable(Shared::EmploymentContractType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employment_contract_type') } }
      # The employee employment status
      field :employment_status, T.nilable(Shared::EmploymentStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employment_status') } }
      # The employee employment type
      field :employment_type, T.nilable(Shared::EmploymentType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employment_type') } }
      # The employee employments
      field :employments, T.nilable(T::Array[Shared::Employment]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('employments') } }
      # The employee ethnicity
      field :ethnicity, T.nilable(Shared::Ethnicity), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('ethnicity') } }
      # The employee first name
      field :first_name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('first_name') } }
      # The employee gender
      field :gender, T.nilable(Shared::Gender), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('gender') } }
      # The employee hire date
      field :hire_date, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('hire_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The employee home location
      field :home_location, T.nilable(Shared::HomeLocation), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('home_location') } }
      # The employee ID
      field :id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('id') } }
      # The employee job description
      field :job_description, T.nilable(Shared::JobDescription), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('job_description') } }
      # The employee job title
      field :job_title, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('job_title') } }
      # The employee last name
      field :last_name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('last_name') } }
      # The employee manager ID
      field :manager_id, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('manager_id') } }
      # The employee marital status
      field :marital_status, T.nilable(Shared::MaritalStatus), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('marital_status') } }
      # The employee name
      field :name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('name') } }
      # The employee personal email
      field :personal_email, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('personal_email') } }
      # The employee personal phone number
      field :personal_phone_number, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('personal_phone_number') } }
      # The employee start date
      field :start_date, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('start_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The employee tenure
      field :tenure, T.nilable(Float), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('tenure') } }
      # The employee termination date
      field :termination_date, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('termination_date'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The updated_at date
      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The employee work anniversary
      field :work_anniversary, T.nilable(DateTime), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('work_anniversary'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The employee work eligibility
      field :work_eligibility, T.nilable(T::Array[Shared::WorkEligibility]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('work_eligibility') } }
      # The employee work email
      field :work_email, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('work_email') } }
      # The employee work location
      field :work_location, T.nilable(Shared::WorkLocation), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('work_location') } }
      # The employee work phone number
      field :work_phone_number, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('work_phone_number') } }


      sig { params(avatar: T.nilable(Shared::Avatar), avatar_url: T.nilable(String), birthday: T.nilable(DateTime), citizenships: T.nilable(T::Array[Shared::CountryCodeEnum]), company_name: T.nilable(String), cost_centers: T.nilable(T::Array[Shared::CostCenters]), created_at: T.nilable(DateTime), custom_fields: T.nilable(T::Array[Shared::EmployeeCustomFields]), date_of_birth: T.nilable(DateTime), department: T.nilable(String), display_name: T.nilable(String), employment_contract_type: T.nilable(Shared::EmploymentContractType), employment_status: T.nilable(Shared::EmploymentStatus), employment_type: T.nilable(Shared::EmploymentType), employments: T.nilable(T::Array[Shared::Employment]), ethnicity: T.nilable(Shared::Ethnicity), first_name: T.nilable(String), gender: T.nilable(Shared::Gender), hire_date: T.nilable(DateTime), home_location: T.nilable(Shared::HomeLocation), id: T.nilable(String), job_description: T.nilable(Shared::JobDescription), job_title: T.nilable(String), last_name: T.nilable(String), manager_id: T.nilable(String), marital_status: T.nilable(Shared::MaritalStatus), name: T.nilable(String), personal_email: T.nilable(String), personal_phone_number: T.nilable(String), start_date: T.nilable(DateTime), tenure: T.nilable(Float), termination_date: T.nilable(DateTime), updated_at: T.nilable(DateTime), work_anniversary: T.nilable(DateTime), work_eligibility: T.nilable(T::Array[Shared::WorkEligibility]), work_email: T.nilable(String), work_location: T.nilable(Shared::WorkLocation), work_phone_number: T.nilable(String)).void }
      def initialize(avatar: nil, avatar_url: nil, birthday: nil, citizenships: nil, company_name: nil, cost_centers: nil, created_at: nil, custom_fields: nil, date_of_birth: nil, department: nil, display_name: nil, employment_contract_type: nil, employment_status: nil, employment_type: nil, employments: nil, ethnicity: nil, first_name: nil, gender: nil, hire_date: nil, home_location: nil, id: nil, job_description: nil, job_title: nil, last_name: nil, manager_id: nil, marital_status: nil, name: nil, personal_email: nil, personal_phone_number: nil, start_date: nil, tenure: nil, termination_date: nil, updated_at: nil, work_anniversary: nil, work_eligibility: nil, work_email: nil, work_location: nil, work_phone_number: nil)
        @avatar = avatar
        @avatar_url = avatar_url
        @birthday = birthday
        @citizenships = citizenships
        @company_name = company_name
        @cost_centers = cost_centers
        @created_at = created_at
        @custom_fields = custom_fields
        @date_of_birth = date_of_birth
        @department = department
        @display_name = display_name
        @employment_contract_type = employment_contract_type
        @employment_status = employment_status
        @employment_type = employment_type
        @employments = employments
        @ethnicity = ethnicity
        @first_name = first_name
        @gender = gender
        @hire_date = hire_date
        @home_location = home_location
        @id = id
        @job_description = job_description
        @job_title = job_title
        @last_name = last_name
        @manager_id = manager_id
        @marital_status = marital_status
        @name = name
        @personal_email = personal_email
        @personal_phone_number = personal_phone_number
        @start_date = start_date
        @tenure = tenure
        @termination_date = termination_date
        @updated_at = updated_at
        @work_anniversary = work_anniversary
        @work_eligibility = work_eligibility
        @work_email = work_email
        @work_location = work_location
        @work_phone_number = work_phone_number
      end
    end
  end
end
