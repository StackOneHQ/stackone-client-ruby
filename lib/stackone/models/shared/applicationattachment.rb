# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module StackOne
  module Shared
    # ApplicationAttachmentValue - The content type of the attachment.
    class ApplicationAttachmentValue < T::Enum
      enums do
        TEXT = new('text')
        UNMAPPED_VALUE = new('unmapped_value')
      end
    end



    class ContentType < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The source value of the content type.
      field :source_value, T.nilable(Object), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('source_value') } }
      # The content type of the attachment.
      field :value, T.nilable(Shared::ApplicationAttachmentValue), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('value'), 'decoder': Utils.enum_from_string(Shared::ApplicationAttachmentValue, true) } }


      sig { params(source_value: T.nilable(Object), value: T.nilable(Shared::ApplicationAttachmentValue)).void }
      def initialize(source_value: nil, value: nil)
        @source_value = source_value
        @value = value
      end
    end


    class ApplicationAttachment < ::StackOne::Utils::FieldAugmented
      extend T::Sig

      # The content of the attachment.
      field :content, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('content') } }

      field :content_type, T.nilable(Shared::ContentType), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('content_type') } }
      # The file name of the attachment.
      field :file_name, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('file_name') } }

      field :type, T.nilable(T::Array[Shared::AttachmentType]), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('type') } }
      # The URL of the attachment.
      field :url, T.nilable(String), { 'format_json': { 'letter_case': ::StackOne::Utils.field_name('url') } }


      sig { params(content: T.nilable(String), content_type: T.nilable(Shared::ContentType), file_name: T.nilable(String), type: T.nilable(T::Array[Shared::AttachmentType]), url: T.nilable(String)).void }
      def initialize(content: nil, content_type: nil, file_name: nil, type: nil, url: nil)
        @content = content
        @content_type = content_type
        @file_name = file_name
        @type = type
        @url = url
      end
    end
  end
end
