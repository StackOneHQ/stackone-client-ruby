# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module StackOne
  module Shared
    # The body of the request
    class Body < StackOne::Utils::FieldAugmented
      extend T::Sig



      
      def initialize; end
    end

    # The headers to send in the request
    class Headers < StackOne::Utils::FieldAugmented
      extend T::Sig



      
      def initialize; end
    end

    # Method - The method of the request
    class Method < T::Enum
      enums do
        GET = new('get')
        POST = new('post')
        PUT = new('put')
        DELETE = new('delete')
        PATCH = new('patch')
      end
    end



    class ProxyRequestBody < StackOne::Utils::FieldAugmented
      extend T::Sig

      # The body of the request
      field :body, T.nilable(Shared::Body), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('body') } }
      # The headers to send in the request
      field :headers, T.nilable(Shared::Headers), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('headers') } }
      # The method of the request
      field :method, T.nilable(Shared::Method), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('method'), 'decoder': Utils.enum_from_string(Shared::Method, true) } }
      # The path of the request including any query paramters
      field :path, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('path') } }
      # The base url of the request
      field :url, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('url') } }


      sig { params(body: T.nilable(Shared::Body), headers: T.nilable(Shared::Headers), method: T.nilable(Shared::Method), path: T.nilable(String), url: T.nilable(String)).void }
      def initialize(body: nil, headers: nil, method: nil, path: nil, url: nil)
        @body = body
        @headers = headers
        @method = method
        @path = path
        @url = url
      end
    end
  end
end
