overlay: 1.0.0
info:
  title: CodeSamples overlay for ruby target
  version: 0.0.0
actions:
  - target: $["paths"]["/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_list_linked_accounts"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::StackoneListLinkedAccountsRequest.new()\n    \nres = s.accounts.list_linked_accounts(req)\n\nif ! res.linked_accounts.nil?\n  # handle response\nend"
  - target: $["paths"]["/accounts/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_delete_account"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.accounts.delete_account(id=\"<id>\")\n\nif ! res.linked_account.nil?\n  # handle response\nend"
  - target: $["paths"]["/accounts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_get_account"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.accounts.get_account(id=\"<id>\")\n\nif ! res.linked_account.nil?\n  # handle response\nend"
  - target: $["paths"]["/accounts/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_update_account"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.accounts.update_account(id=\"<id>\", patch_account_external_dto=::StackOne::Shared::PatchAccountExternalDto.new())\n\nif ! res.linked_account.nil?\n  # handle response\nend"
  - target: $["paths"]["/accounts/{id}/meta"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_get_account_meta_info"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.accounts.get_account_meta_info(id=\"<id>\")\n\nif ! res.linked_account_meta.nil?\n  # handle response\nend"
  - target: $["paths"]["/connect_sessions"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_create_connect_session"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Shared::ConnectSessionCreate.new(\n  categories: [\n    ::StackOne::Shared::Categories::ATS,\n    ::StackOne::Shared::Categories::HRIS,\n    ::StackOne::Shared::Categories::CRM,\n    ::StackOne::Shared::Categories::CRM,\n    ::StackOne::Shared::Categories::IAM,\n    ::StackOne::Shared::Categories::MARKETING,\n    ::StackOne::Shared::Categories::LMS,\n    ::StackOne::Shared::Categories::ATS,\n    ::StackOne::Shared::Categories::DOCUMENTS,\n  ],\n  origin_owner_id: \"<id>\",\n  origin_owner_name: \"<value>\",\n)\n    \nres = s.connect_sessions.create_connect_session(req)\n\nif ! res.connect_session_token_auth_link.nil?\n  # handle response\nend"
  - target: $["paths"]["/connect_sessions/authenticate"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_authenticate_connect_session"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Shared::ConnectSessionAuthenticate.new(\n  token: \"<value>\",\n)\n    \nres = s.connect_sessions.authenticate_connect_session(req)\n\nif ! res.connect_session.nil?\n  # handle response\nend"
  - target: $["paths"]["/connectors/meta"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_list_connectors_meta"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.connectors.list_connectors_meta(include=\"field_path,unmapped_fields,resources,inactive,webhooks,static_fields\")\n\nif ! res.connectors_metas.nil?\n  # handle response\nend"
  - target: $["paths"]["/connectors/meta/{provider}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_get_connector_meta"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.connectors.get_connector_meta(provider=\"<value>\", include=\"field_path,unmapped_fields,resources,inactive,webhooks,static_fields\")\n\nif ! res.connectors_meta.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_applications"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListApplicationsRequest.new(\n  fields_: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n  filter: ::StackOne::Operations::AtsListApplicationsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n    created_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"documents\",\n  include: \"attachments,custom_fields\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_applications(req)\n\nif ! res.applications_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_application"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.create_application(x_account_id=\"<id>\", ats_create_application_request_dto=::StackOne::Shared::AtsCreateApplicationRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n  job_id: \"4071538b-3cac-4fbf-ac76-f78ed250ffdd\",\n  job_posting_id: \"1c702a20-8de8-4d03-ac18-cbf4ac42eb51\",\n  location_id: \"dd8d41d1-5eb8-4408-9c87-9ba44604eae4\",\n  application_status: ::StackOne::Shared::AtsCreateApplicationRequestDtoApplicationStatus.new(\n    value: ::StackOne::Shared::AtsCreateApplicationRequestDtoValue::HIRED,\n    source_value: \"Hired\",\n  ),\n  questionnaires: [\n    ::StackOne::Shared::CreateQuestionnaire.new(\n      id: \"right_to_work\",\n      answers: [\n        ::StackOne::Shared::CreateAnswer.new(\n          id: \"answer1\",\n          type: ::StackOne::Shared::CreateAnswerType.new(),\n          values: [\n            \"Yes\",\n          ],\n        ),\n      ],\n    ),\n  ],\n  source: ::StackOne::Shared::AtsCreateApplicationRequestDtoSource.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"LinkedIn\",\n  ),\n  candidate_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n  candidate: ::StackOne::Shared::AtsCreateApplicationRequestDtoCandidate.new(\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n    unified_custom_fields: {\n      \"my_project_custom_field_1\": \"REF-1236\",\n      \"my_project_custom_field_2\": \"some other value\",\n    },\n    phone_numbers: [\n      ::StackOne::Shared::PhoneNumber.new(\n        phone: \"+447700112233\",\n      ),\n    ],\n    name: \"Romain Sestier\",\n    first_name: \"Romain\",\n    last_name: \"Sestier\",\n    email: \"sestier.romain123@gmail.com\",\n    social_links: [\n      ::StackOne::Shared::SocialLink.new(\n        type: \"linkedin\",\n        url: \"https://www.linkedin.com/in/romainsestier/\",\n      ),\n    ],\n    company: \"Company Inc.\",\n    title: \"Software Engineer\",\n    hired_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    country: \"United States\",\n    custom_fields: [\n      ::StackOne::Shared::CustomFields.new(\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Training Completion Status\",\n        value: \"Completed\",\n        value_id: \"value_456\",\n        remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n      ),\n    ],\n  ),\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetApplicationRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n  expand: \"documents\",\n  include: \"attachments,custom_fields\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_application(req)\n\nif ! res.application_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_application"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.update_application(id=\"<id>\", x_account_id=\"<id>\", ats_update_application_request_dto=::StackOne::Shared::AtsUpdateApplicationRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n  application_status: ::StackOne::Shared::AtsUpdateApplicationRequestDtoApplicationStatus.new(\n    value: ::StackOne::Shared::AtsUpdateApplicationRequestDtoValue::HIRED,\n    source_value: \"Hired\",\n  ),\n  source: ::StackOne::Shared::AtsUpdateApplicationRequestDtoSource.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"LinkedIn\",\n  ),\n))\n\nif ! res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/documents"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_documents"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListApplicationDocumentsRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n  filter: ::StackOne::Operations::AtsListApplicationDocumentsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_application_documents(req)\n\nif ! res.ats_documents_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/upload"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_upload_application_document"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.upload_application_document(id=\"<id>\", x_account_id=\"<id>\", unified_upload_request_dto=::StackOne::Shared::UnifiedUploadRequestDto.new(\n  name: \"weather-forecast\",\n  file_format: ::StackOne::Shared::UnifiedUploadRequestDtoFileFormat.new(\n    value: ::StackOne::Shared::UnifiedUploadRequestDtoValue::PDF,\n    source_value: \"abc\",\n  ),\n  content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n  category_id: \"6530\",\n  path: \"/path/to/file\",\n  category: ::StackOne::Shared::UnifiedUploadRequestDtoCategory.new(\n    value: \"reports, resumes\",\n    source_value: \"550e8400-e29b-41d4-a716-446655440000, CUSTOM_CATEGORY_NAME\",\n  ),\n  confidential: ::StackOne::Shared::UnifiedUploadRequestDtoConfidential.new(\n    value: ::StackOne::Shared::UnifiedUploadRequestDtoSchemasValue::TRUE,\n    source_value: \"public\",\n  ),\n))\n\nif ! res.write_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_document"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetApplicationDocumentRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_application_document(req)\n\nif ! res.ats_document_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_download_application_document"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.download_application_document(id=\"<id>\", sub_resource_id=\"<id>\", x_account_id=\"<id>\", format=\"base64\")\n\nif ! res.bytes.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/move"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_move_application"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.move_application(id=\"<id>\", x_account_id=\"<id>\", ats_move_application_request_dto=::StackOne::Shared::AtsMoveApplicationRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n  interview_stage_id: \"f223d7f6-908b-48f0-9237-b201c307f609\",\n))\n\nif ! res.move_application_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/notes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_notes"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListApplicationNotesRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n  filter: ::StackOne::Operations::AtsListApplicationNotesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_application_notes(req)\n\nif ! res.notes_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/notes"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_application_note"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.create_application_note(id=\"<id>\", x_account_id=\"<id>\", ats_create_notes_request_dto=::StackOne::Shared::AtsCreateNotesRequestDto.new(\n  content: [\n    ::StackOne::Shared::NoteContentApiModel.new(\n      body: \"This candidate seems like a good fit for the role\",\n    ),\n  ],\n  author_id: \"1234567890\",\n  visibility: ::StackOne::Shared::AtsCreateNotesRequestDtoVisibility.new(),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/notes/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_note"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetApplicationNoteRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_application_note(req)\n\nif ! res.note_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/notes/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_application_note"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.update_application_note(id=\"<id>\", sub_resource_id=\"<id>\", x_account_id=\"<id>\", ats_update_notes_request_dto=::StackOne::Shared::AtsUpdateNotesRequestDto.new(\n  content: [\n    ::StackOne::Shared::NoteContentApiModel.new(\n      body: \"This candidate seems like a good fit for the role\",\n    ),\n  ],\n  author_id: \"1234567890\",\n  visibility: ::StackOne::Shared::AtsUpdateNotesRequestDtoVisibility.new(),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/offers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_applications_offers"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListApplicationsOffersRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n  filter: ::StackOne::Operations::AtsListApplicationsOffersQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_applications_offers(req)\n\nif ! res.offers_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/offers/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_offer"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetApplicationOfferRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_application_offer(req)\n\nif ! res.offers_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/reject"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_reject_application"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.reject_application(id=\"<id>\", x_account_id=\"<id>\", ats_reject_application_request_dto=::StackOne::Shared::AtsRejectApplicationRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n  rejected_reason_id: \"f223d7f6-908b-48f0-9237-b201c307f609\",\n))\n\nif ! res.reject_application_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_applications_scheduled_interviews"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListApplicationsScheduledInterviewsRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n  filter: ::StackOne::Operations::AtsListApplicationsScheduledInterviewsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_applications_scheduled_interviews(req)\n\nif ! res.scheduled_interviews_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_scheduled_interview"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetApplicationScheduledInterviewRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_application_scheduled_interview(req)\n\nif ! res.scheduled_interviews_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_scorecards"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListApplicationScorecardsRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at\",\n  filter: ::StackOne::Operations::AtsListApplicationScorecardsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_application_scorecards(req)\n\nif ! res.scorecards_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_scorecard"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetApplicationScorecardRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_application_scorecard(req)\n\nif ! res.scorecards_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/orders"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_order_assessments_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.order_assessments_request(x_account_id=\"<id>\", ats_create_candidates_assessments_request_dto=::StackOne::Shared::AtsCreateCandidatesAssessmentsRequestDto.new(\n  id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n  package: ::StackOne::Shared::AtsCreateCandidatesAssessmentsRequestDtoPackage.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"Test 1\",\n    description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n  ),\n  application: ::StackOne::Shared::AtsCreateCandidatesAssessmentsRequestDtoApplication.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    application_status: ::StackOne::Shared::AtsCreateCandidatesAssessmentsRequestDtoApplicationStatus.new(\n      value: ::StackOne::Shared::AtsCreateCandidatesAssessmentsRequestDtoValue::HIRED,\n      source_value: \"Hired\",\n    ),\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n  ),\n  job: ::StackOne::Shared::AtsCreateCandidatesAssessmentsRequestDtoJob.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    title: \"Software Engineer\",\n    hiring_team: [\n      ::StackOne::Shared::JobHiringTeam.new(\n        user_id: \"123456\",\n        remote_user_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        first_name: \"John\",\n        last_name: \"Doe\",\n        email: \"john.doe@gmail.com\",\n        role: \"Software Engineer\",\n      ),\n    ],\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n  ),\n  candidate: ::StackOne::Shared::AtsCreateCandidatesAssessmentsRequestDtoCandidate.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    first_name: \"Romain\",\n    last_name: \"Sestier\",\n    emails: [\n      ::StackOne::Shared::CandidateEmail.new(\n        type: \"personal\",\n        value: \"sestier.romain123@gmail.com\",\n      ),\n    ],\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n    profile_url: \"https://exmaple.com/candidate?id=xyz\",\n  ),\n  requester: ::StackOne::Shared::Requester.new(\n    user_id: \"123456\",\n    remote_user_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    first_name: \"John\",\n    last_name: \"Doe\",\n    email: \"john.doe@gmail.com\",\n    role: \"Software Engineer\",\n  ),\n  results_update_url: \"https://exmaple.com/integrations/results/update\",\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_assessment_order_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/orders/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_assessments_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetAssessmentsRequestRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,package,application,job,candidate,requester,results_update_url\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_assessments_request(req)\n\nif ! res.assessment_order_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/orders/{id}/result"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_assessments_result"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.update_assessments_result(id=\"<id>\", x_account_id=\"<id>\", ats_update_candidates_assessments_results_request_dto=::StackOne::Shared::AtsUpdateCandidatesAssessmentsResultsRequestDto.new(\n  id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n  score: ::StackOne::Shared::Score.new(\n    label: \"Percentage\",\n    value: \"80\",\n    min: \"0\",\n    max: \"100\",\n  ),\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  submission_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  summary: \"Test is passed\",\n  result: ::StackOne::Shared::Result.new(\n    value: ::StackOne::Shared::AtsUpdateCandidatesAssessmentsResultsRequestDtoValue::PASSED,\n    source_value: \"Passed\",\n  ),\n  result_url: \"https://exmaple.com/result?id=xyz\",\n  attachments: [\n    ::StackOne::Shared::Attachment.new(\n      url: \"http://example.com/resume.pdf\",\n      content_type: ::StackOne::Shared::AttachmentContentType.new(\n        value: ::StackOne::Shared::AttachmentValue::TEXT,\n        source_value: \"Text\",\n      ),\n    ),\n  ],\n  candidate: ::StackOne::Shared::AtsUpdateCandidatesAssessmentsResultsRequestDtoCandidate.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    profile_url: \"https://exmaple.com/candidate?id=xyz\",\n  ),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/orders/{id}/results"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_assessments_result"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetAssessmentsResultRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,candidate,score,start_date,submission_date,summary,result,result_url,attachments\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_assessments_result(req)\n\nif ! res.assessment_results_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/packages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_assessments_packages"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListAssessmentsPackagesRequest.new(\n  filter: ::StackOne::Operations::AtsListAssessmentsPackagesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_assessments_packages(req)\n\nif ! res.assessment_package_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/packages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_assessments_package"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetAssessmentsPackageRequest.new(\n  id: \"<id>\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_assessments_package(req)\n\nif ! res.assessment_package_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/orders"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_background_check_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListBackgroundCheckRequestRequest.new(\n  fields_: \"id,remote_id,package,application,job,candidate,requester,results_update_url\",\n  filter: ::StackOne::Operations::AtsListBackgroundCheckRequestQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_background_check_request(req)\n\nif ! res.background_check_order_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/orders"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_order_background_check_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.order_background_check_request(x_account_id=\"<id>\", ats_create_background_check_order_request_dto=::StackOne::Shared::AtsCreateBackgroundCheckOrderRequestDto.new(\n  id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n  remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n  application: ::StackOne::Shared::AtsCreateBackgroundCheckOrderRequestDtoApplication.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    application_status: ::StackOne::Shared::AtsCreateBackgroundCheckOrderRequestDtoApplicationStatus.new(\n      value: ::StackOne::Shared::AtsCreateBackgroundCheckOrderRequestDtoValue::HIRED,\n      source_value: \"Hired\",\n    ),\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n  ),\n  job: ::StackOne::Shared::AtsCreateBackgroundCheckOrderRequestDtoJob.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    title: \"Software Engineer\",\n    hiring_team: [\n      ::StackOne::Shared::JobHiringTeam.new(\n        user_id: \"123456\",\n        remote_user_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        first_name: \"John\",\n        last_name: \"Doe\",\n        email: \"john.doe@gmail.com\",\n        role: \"Software Engineer\",\n      ),\n    ],\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n  ),\n  candidate: ::StackOne::Shared::AtsCreateBackgroundCheckOrderRequestDtoCandidate.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    first_name: \"Romain\",\n    last_name: \"Sestier\",\n    emails: [\n      ::StackOne::Shared::CandidateEmail.new(\n        type: \"personal\",\n        value: \"sestier.romain123@gmail.com\",\n      ),\n    ],\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n    profile_url: \"https://exmaple.com/candidate?id=xyz\",\n  ),\n  requester: ::StackOne::Shared::AtsCreateBackgroundCheckOrderRequestDtoRequester.new(\n    user_id: \"123456\",\n    remote_user_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    first_name: \"John\",\n    last_name: \"Doe\",\n    email: \"john.doe@gmail.com\",\n    role: \"Software Engineer\",\n  ),\n  results_update_url: \"https://exmaple.com/integrations/results/update\",\n  package: ::StackOne::Shared::AtsCreateBackgroundCheckOrderRequestDtoPackage.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"Test 1\",\n    description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n    tests: [\n      ::StackOne::Shared::Package.new(\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Test 1\",\n        description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n      ),\n    ],\n  ),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_background_check_order_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/orders/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_background_check_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetBackgroundCheckRequestRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,package,application,job,candidate,requester,results_update_url\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_background_check_request(req)\n\nif ! res.background_check_order_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/orders/{id}/result"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_background_check_result"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.update_background_check_result(id=\"<id>\", x_account_id=\"<id>\", ats_update_background_check_result_request_dto=::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDto.new(\n  id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n  score: ::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoScore.new(\n    label: \"Percentage\",\n    value: \"80\",\n    min: \"0\",\n    max: \"100\",\n  ),\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  submission_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  summary: \"Test is passed\",\n  result: ::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoResult.new(\n    value: ::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoValue::PASSED,\n    source_value: \"Passed\",\n  ),\n  result_url: \"https://exmaple.com/result?id=xyz\",\n  attachments: [\n    ::StackOne::Shared::Attachment.new(\n      url: \"http://example.com/resume.pdf\",\n      content_type: ::StackOne::Shared::AttachmentContentType.new(\n        value: ::StackOne::Shared::AttachmentValue::TEXT,\n        source_value: \"Text\",\n      ),\n    ),\n  ],\n  candidate: ::StackOne::Shared::AtsUpdateBackgroundCheckResultRequestDtoCandidate.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    profile_url: \"https://exmaple.com/candidate?id=xyz\",\n  ),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/orders/{id}/results"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_background_check_result"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetBackgroundCheckResultRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,candidate,score,start_date,submission_date,summary,result,result_url,attachments\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_background_check_result(req)\n\nif ! res.background_check_results_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/packages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_background_check_packages"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListBackgroundCheckPackagesRequest.new(\n  fields_: \"id,remote_id,name,description,tests\",\n  filter: ::StackOne::Operations::AtsListBackgroundCheckPackagesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_background_check_packages(req)\n\nif ! res.background_check_package_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/packages"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_background_check_package"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.create_background_check_package(x_account_id=\"<id>\", ats_create_background_check_packages_request_dto=::StackOne::Shared::AtsCreateBackgroundCheckPackagesRequestDto.new(\n  name: \"Test 1\",\n  description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n  tests: [\n    ::StackOne::Shared::CreatePackage.new(\n      name: \"Test 1\",\n      description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/packages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_background_check_package"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetBackgroundCheckPackageRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,description,tests\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_background_check_package(req)\n\nif ! res.background_check_package_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_candidates"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListCandidatesRequest.new(\n  fields_: \"id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,country,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at\",\n  filter: ::StackOne::Operations::AtsListCandidatesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n    created_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  include: \"custom_fields\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_candidates(req)\n\nif ! res.candidates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_candidate"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.create_candidate(x_account_id=\"<id>\", ats_create_candidate_request_dto=::StackOne::Shared::AtsCreateCandidateRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  phone_numbers: [\n    ::StackOne::Shared::PhoneNumber.new(\n      phone: \"+447700112233\",\n    ),\n  ],\n  name: \"Romain Sestier\",\n  first_name: \"Romain\",\n  last_name: \"Sestier\",\n  email: \"sestier.romain123@gmail.com\",\n  social_links: [\n    ::StackOne::Shared::SocialLink.new(\n      type: \"linkedin\",\n      url: \"https://www.linkedin.com/in/romainsestier/\",\n    ),\n  ],\n  company: \"Company Inc.\",\n  title: \"Software Engineer\",\n  hired_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  country: \"United States\",\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_candidate"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetCandidateRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,country,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at\",\n  include: \"custom_fields\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_candidate(req)\n\nif ! res.candidate_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_candidate"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.update_candidate(id=\"<id>\", x_account_id=\"<id>\", ats_update_candidate_request_dto=::StackOne::Shared::AtsUpdateCandidateRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  name: \"Romain Sestier\",\n  first_name: \"Romain\",\n  last_name: \"Sestier\",\n  email: \"sestier.romain123@gmail.com\",\n  emails: [\n    ::StackOne::Shared::CandidateEmail.new(\n      type: \"personal\",\n      value: \"sestier.romain123@gmail.com\",\n    ),\n  ],\n  social_links: [\n    ::StackOne::Shared::SocialLink.new(\n      type: \"linkedin\",\n      url: \"https://www.linkedin.com/in/romainsestier/\",\n    ),\n  ],\n  phone_numbers: [\n    ::StackOne::Shared::PhoneNumber.new(\n      phone: \"+447700112233\",\n    ),\n  ],\n  company: \"Company Inc.\",\n  title: \"Software Engineer\",\n  application_ids: [\n    \"123e4567-e89b-12d3-a456-426614174000\",\n    \"523e1234-e89b-fdd2-a456-762545121101\",\n  ],\n  hired_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  country: \"United States\",\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_candidate_notes"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListCandidateNotesRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n  filter: ::StackOne::Operations::AtsListCandidateNotesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_candidate_notes(req)\n\nif ! res.notes_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_candidate_note"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.create_candidate_note(id=\"<id>\", x_account_id=\"<id>\", ats_create_notes_request_dto=::StackOne::Shared::AtsCreateNotesRequestDto.new(\n  content: [\n    ::StackOne::Shared::NoteContentApiModel.new(\n      body: \"This candidate seems like a good fit for the role\",\n    ),\n  ],\n  author_id: \"1234567890\",\n  visibility: ::StackOne::Shared::AtsCreateNotesRequestDtoVisibility.new(),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_candidate_note"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetCandidateNoteRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_candidate_note(req)\n\nif ! res.note_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_custom_field_definitions"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListApplicationCustomFieldDefinitionsRequest.new(\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::AtsListApplicationCustomFieldDefinitionsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_application_custom_field_definitions(req)\n\nif ! res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_custom_field_definition"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetApplicationCustomFieldDefinitionRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::AtsGetApplicationCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_application_custom_field_definition(req)\n\nif ! res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_candidate_custom_field_definitions"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListCandidateCustomFieldDefinitionsRequest.new(\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::AtsListCandidateCustomFieldDefinitionsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_candidate_custom_field_definitions(req)\n\nif ! res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_candidate_custom_field_definition"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetCandidateCustomFieldDefinitionRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::AtsGetCandidateCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_candidate_custom_field_definition(req)\n\nif ! res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_job_custom_field_definitions"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListJobCustomFieldDefinitionsRequest.new(\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::AtsListJobCustomFieldDefinitionsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_job_custom_field_definitions(req)\n\nif ! res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_job_custom_field_definition"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetJobCustomFieldDefinitionRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::AtsGetJobCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_job_custom_field_definition(req)\n\nif ! res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/departments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_departments"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListDepartmentsRequest.new(\n  fields_: \"id,remote_id,name\",\n  filter: ::StackOne::Operations::AtsListDepartmentsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_departments(req)\n\nif ! res.departments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/departments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_department"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetDepartmentRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_department(req)\n\nif ! res.department_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/interview_stages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_interview_stages"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListInterviewStagesRequest.new(\n  fields_: \"id,remote_id,name,order,created_at,updated_at\",\n  filter: ::StackOne::Operations::AtsListInterviewStagesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_interview_stages(req)\n\nif ! res.interview_stages_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/interview_stages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_interview_stage"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetInterviewStageRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,order,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_interview_stage(req)\n\nif ! res.interview_stage_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/interviews"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_interviews"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListInterviewsRequest.new(\n  fields_: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n  filter: ::StackOne::Operations::AtsListInterviewsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n    created_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_interviews(req)\n\nif ! res.interviews_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/interviews/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_interview"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetInterviewRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_interview(req)\n\nif ! res.interviews_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/job_postings"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_job_postings"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListJobPostingsRequest.new(\n  fields_: \"id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,updated_at,created_at\",\n  filter: ::StackOne::Operations::AtsListJobPostingsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n    created_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  include: \"questionnaires\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_job_postings(req)\n\nif ! res.job_postings_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/job_postings/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_job_posting"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetJobPostingRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,updated_at,created_at\",\n  include: \"questionnaires\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_job_posting(req)\n\nif ! res.job_posting_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_jobs"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListJobsRequest.new(\n  fields_: \"id,remote_id,code,title,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at\",\n  filter: ::StackOne::Operations::AtsListJobsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n    created_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"job_postings,interview_stages\",\n  include: \"custom_fields\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_jobs(req)\n\nif ! res.jobs_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_job"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.create_job(x_account_id=\"<id>\", ats_create_job_request_dto=::StackOne::Shared::AtsCreateJobRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  code: \"184919\",\n  title: \"Software Engineer\",\n  job_status: ::StackOne::Shared::AtsCreateJobRequestDtoJobStatus.new(\n    value: ::StackOne::Shared::AtsCreateJobRequestDtoValue::PUBLISHED,\n    source_value: \"Published\",\n  ),\n  department_ids: [\n    \"308570\",\n    \"308571\",\n    \"308572\",\n  ],\n  location_ids: [\n    \"668570\",\n    \"678571\",\n    \"688572\",\n  ],\n  hiring_team: [\n    ::StackOne::Shared::JobHiringTeam.new(\n      user_id: \"123456\",\n      remote_user_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n      first_name: \"John\",\n      last_name: \"Doe\",\n      email: \"john.doe@gmail.com\",\n      role: \"Software Engineer\",\n    ),\n  ],\n  interview_stages: [\n    ::StackOne::Shared::InterviewStage.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n      updated_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    ),\n  ],\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_job"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetJobRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,code,title,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at\",\n  expand: \"job_postings,interview_stages\",\n  include: \"custom_fields\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_job(req)\n\nif ! res.job_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_job"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.update_job(id=\"<id>\", x_account_id=\"<id>\", ats_update_job_request_dto=::StackOne::Shared::AtsUpdateJobRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  code: \"184919\",\n  title: \"Software Engineer\",\n  job_status: ::StackOne::Shared::AtsUpdateJobRequestDtoJobStatus.new(\n    value: ::StackOne::Shared::AtsUpdateJobRequestDtoValue::PUBLISHED,\n    source_value: \"Published\",\n  ),\n  department_ids: [\n    \"308570\",\n    \"308571\",\n    \"308572\",\n  ],\n  location_ids: [\n    \"668570\",\n    \"678571\",\n    \"688572\",\n  ],\n  hiring_team: [\n    ::StackOne::Shared::JobHiringTeam.new(\n      user_id: \"123456\",\n      remote_user_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n      first_name: \"John\",\n      last_name: \"Doe\",\n      email: \"john.doe@gmail.com\",\n      role: \"Software Engineer\",\n    ),\n  ],\n  interview_stages: [\n    ::StackOne::Shared::InterviewStage.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n      updated_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    ),\n  ],\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/lists"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_lists"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListListsRequest.new(\n  fields_: \"id,remote_id,name,created_at,updated_at,items,type\",\n  filter: ::StackOne::Operations::AtsListListsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_lists(req)\n\nif ! res.lists_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/lists/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_list"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetListRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,created_at,updated_at,items,type\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_list(req)\n\nif ! res.list_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/locations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_locations"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListLocationsRequest.new(\n  fields_: \"id,remote_id,name\",\n  filter: ::StackOne::Operations::AtsListLocationsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_locations(req)\n\nif ! res.ats_locations_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/locations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_location"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetLocationRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_location(req)\n\nif ! res.ats_location_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/offers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_offers"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListOffersRequest.new(\n  fields_: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n  filter: ::StackOne::Operations::AtsListOffersQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_offers(req)\n\nif ! res.offers_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/offers"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_offer"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.ats.create_offer(x_account_id=\"<id>\", ats_create_offer_request_dto=::StackOne::Shared::AtsCreateOfferRequestDto.new(\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  offer_status: ::StackOne::Shared::AtsCreateOfferRequestDtoOfferStatus.new(\n    value: ::StackOne::Shared::AtsCreateOfferRequestDtoValue::PENDING,\n    source_value: \"Pending\",\n  ),\n  offer_history: [\n    ::StackOne::Shared::OfferHistory.new(\n      start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n      created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n      updated_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/offers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_offer"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetOfferRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_offer(req)\n\nif ! res.offers_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/rejected_reasons"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_rejected_reasons"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListRejectedReasonsRequest.new(\n  fields_: \"id,remote_id,label,type,rejected_reason_type\",\n  filter: ::StackOne::Operations::AtsListRejectedReasonsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_rejected_reasons(req)\n\nif ! res.rejected_reasons_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/rejected_reasons/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_rejected_reason"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetRejectedReasonRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,label,type,rejected_reason_type\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_rejected_reason(req)\n\nif ! res.rejected_reason_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_users"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsListUsersRequest.new(\n  fields_: \"id,remote_id,first_name,last_name,name,email,phone\",\n  filter: ::StackOne::Operations::AtsListUsersQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.list_users(req)\n\nif ! res.users_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_user"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::AtsGetUserRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,first_name,last_name,name,email,phone\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.ats.get_user(req)\n\nif ! res.user_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_list_accounts"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::CrmListAccountsRequest.new(\n  fields_: \"id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at\",\n  filter: ::StackOne::Operations::CrmListAccountsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.crm.list_accounts(req)\n\nif ! res.accounts_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/accounts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_get_account"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::CrmGetAccountRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.crm.get_account(req)\n\nif ! res.account_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/contacts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_list_contacts"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::CrmListContactsRequest.new(\n  fields_: \"id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at\",\n  filter: ::StackOne::Operations::CrmListContactsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  include: \"custom_fields\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.crm.list_contacts(req)\n\nif ! res.contacts_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/contacts"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_create_contact"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.crm.create_contact(x_account_id=\"<id>\", crm_create_contact_request_dto=::StackOne::Shared::CrmCreateContactRequestDto.new(\n  first_name: \"Steve\",\n  last_name: \"Wozniak\",\n  company_name: \"Apple Inc.\",\n  emails: [\n    \"steve@apple.com\",\n  ],\n  phone_numbers: [\n    \"123-456-7890\",\n  ],\n  deal_ids: [\n    \"deal-001\",\n    \"deal-002\",\n  ],\n  account_ids: [\n    \"account-123\",\n    \"account-456\",\n  ],\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.contact_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/contacts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_get_contact"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::CrmGetContactRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at\",\n  include: \"custom_fields\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.crm.get_contact(req)\n\nif ! res.contact_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/contacts/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_update_contact"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.crm.update_contact(id=\"<id>\", x_account_id=\"<id>\", crm_create_contact_request_dto=::StackOne::Shared::CrmCreateContactRequestDto.new(\n  first_name: \"Steve\",\n  last_name: \"Wozniak\",\n  company_name: \"Apple Inc.\",\n  emails: [\n    \"steve@apple.com\",\n  ],\n  phone_numbers: [\n    \"123-456-7890\",\n  ],\n  deal_ids: [\n    \"deal-001\",\n    \"deal-002\",\n  ],\n  account_ids: [\n    \"account-123\",\n    \"account-456\",\n  ],\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.contact_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/custom_field_definitions/contacts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_list_contact_custom_field_definitions"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::CrmListContactCustomFieldDefinitionsRequest.new(\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::CrmListContactCustomFieldDefinitionsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.crm.list_contact_custom_field_definitions(req)\n\nif ! res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/custom_field_definitions/contacts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_get_contact_custom_field_definition"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::CrmGetContactCustomFieldDefinitionRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::CrmGetContactCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.crm.get_contact_custom_field_definition(req)\n\nif ! res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/lists"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_list_lists"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::CrmListListsRequest.new(\n  fields_: \"id,remote_id,name,created_at,updated_at,items,type\",\n  filter: ::StackOne::Operations::CrmListListsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.crm.list_lists(req)\n\nif ! res.lists_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/lists/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_get_list"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::CrmGetListRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,created_at,updated_at,items,type\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.crm.get_list(req)\n\nif ! res.list_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/benefits"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_benefits"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListBenefitsRequest.new(\n  fields_: \"id,remote_id,name,benefit_type,provider,description,created_at,updated_at\",\n  filter: ::StackOne::Operations::HrisListBenefitsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_benefits(req)\n\nif ! res.hris_benefits_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/benefits/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_benefit"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetBenefitRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,benefit_type,provider,description,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_benefit(req)\n\nif ! res.hris_benefit_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/companies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_companies"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListCompaniesRequest.new(\n  fields_: \"id,remote_id,name,full_name,display_name,created_at,updated_at\",\n  filter: ::StackOne::Operations::Filter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_companies(req)\n\nif ! res.companies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/companies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_company"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetCompanyRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,full_name,display_name,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_company(req)\n\nif ! res.company_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/custom_field_definitions/employees"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_custom_field_definitions"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmployeeCustomFieldDefinitionsRequest.new(\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::QueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employee_custom_field_definitions(req)\n\nif ! res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/custom_field_definitions/employees/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_custom_field_definition"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmployeeCustomFieldDefinitionRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,description,type,options\",\n  filter: ::StackOne::Operations::HrisGetEmployeeCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employee_custom_field_definition(req)\n\nif ! res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/documents/employee_categories"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_categories"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmployeeCategoriesRequest.new(\n  fields_: \"id,remote_id,name,active\",\n  filter: ::StackOne::Operations::HrisListEmployeeCategoriesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employee_categories(req)\n\nif ! res.reference_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/documents/employee_categories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_document_category"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmployeeDocumentCategoryRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,active\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employee_document_category(req)\n\nif ! res.reference_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employees"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmployeesRequest.new(\n  fields_: \"id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,benefits,company,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,company_id,remote_company_id,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,employee_number,national_identity_number,national_identity_numbers\",\n  filter: ::StackOne::Operations::HrisListEmployeesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"company,employments,work_location,home_location,groups\",\n  include: \"avatar_url,avatar,custom_fields,job_description,benefits\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employees(req)\n\nif ! res.employees_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.create_employee(x_account_id=\"<id>\", hris_create_employee_request_dto=::StackOne::Shared::HrisCreateEmployeeRequestDto.new(\n  first_name: \"Issac\",\n  last_name: \"Newton\",\n  name: \"Issac Newton\",\n  display_name: \"Sir Issac Newton\",\n  avatar_url: \"https://example.com/avatar.png\",\n  personal_email: \"isaac.newton@example.com\",\n  personal_phone_number: \"+1234567890\",\n  work_email: \"newton@example.com\",\n  work_phone_number: \"+1234567890\",\n  job_id: \"R-6789\",\n  job_title: \"Physicist\",\n  department_id: \"3093\",\n  department: \"Physics\",\n  manager_id: \"67890\",\n  gender: ::StackOne::Shared::HrisCreateEmployeeRequestDtoGender.new(),\n  preferred_language: ::StackOne::Shared::HrisCreateEmployeeRequestDtoPreferredLanguage.new(),\n  ethnicity: ::StackOne::Shared::HrisCreateEmployeeRequestDtoEthnicity.new(),\n  date_of_birth: DateTime.iso8601('1990-01-01T00:00.000Z'),\n  birthday: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  marital_status: ::StackOne::Shared::HrisCreateEmployeeRequestDtoMaritalStatus.new(),\n  avatar: ::StackOne::Shared::HrisCreateEmployeeRequestDtoAvatar.new(),\n  hire_date: DateTime.iso8601('2021-01-01T00:00.000Z'),\n  start_date: DateTime.iso8601('2021-01-01T00:00.000Z'),\n  tenure: 2.0,\n  work_anniversary: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  employment_type: ::StackOne::Shared::HrisCreateEmployeeRequestDtoEmploymentType.new(),\n  employment_contract_type: ::StackOne::Shared::HrisCreateEmployeeRequestDtoEmploymentContractType.new(),\n  employment_status: ::StackOne::Shared::HrisCreateEmployeeRequestDtoEmploymentStatus.new(),\n  termination_date: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  company_id: \"1234567890\",\n  citizenships: [\n    ::StackOne::Shared::CountryCodeEnum.new(\n      value: ::StackOne::Shared::Value::US,\n    ),\n  ],\n  employments: [\n    ::StackOne::Shared::CreateEmploymentApiModel.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      employee_id: \"1687-3\",\n      job_title: \"Software Engineer\",\n      pay_rate: \"40.00\",\n      pay_period: ::StackOne::Shared::CreateEmploymentApiModelPayPeriod.new(),\n      pay_frequency: ::StackOne::Shared::CreateEmploymentApiModelPayFrequency.new(),\n      pay_currency: \"USD\",\n      effective_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n      employment_type: ::StackOne::Shared::CreateEmploymentApiModelEmploymentType.new(),\n      employment_contract_type: ::StackOne::Shared::CreateEmploymentApiModelEmploymentContractType.new(),\n      time_worked: \"P0Y0M0DT8H0M0S\",\n    ),\n  ],\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n  benefits: [\n    ::StackOne::Shared::CreateHRISBenefit.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Health Insurance\",\n      provider: \"Aetna\",\n      description: \"Health insurance for employees\",\n      created_at: DateTime.iso8601('2021-01-01T00:00:00Z'),\n      updated_at: DateTime.iso8601('2021-01-01T00:00:00Z'),\n    ),\n  ],\n  employee_number: \"125\",\n  national_identity_numbers: [\n    ::StackOne::Shared::NationalIdentityNumberApiModel.new(\n      value: \"123456789\",\n      type: ::StackOne::Shared::NationalIdentityNumberApiModelType.new(\n        value: ::StackOne::Shared::NationalIdentityNumberApiModelValue::SSN,\n      ),\n      country: ::StackOne::Shared::Country.new(\n        value: ::StackOne::Shared::NationalIdentityNumberApiModelSchemasValue::US,\n      ),\n    ),\n  ],\n  home_location: ::StackOne::Shared::HrisCreateEmployeeRequestDtoHomeLocation.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"Woolsthorpe Manor\",\n    phone_number: \"+44 1476 860 364\",\n    street_1: \"Water Lane\",\n    street_2: \"Woolsthorpe by Colsterworth\",\n    city: \"Grantham\",\n    zip_code: \"NG33 5NR\",\n    country: ::StackOne::Shared::HrisCreateEmployeeRequestDtoSchemasCountry.new(\n      value: ::StackOne::Shared::HrisCreateEmployeeRequestDtoSchemasHomeLocationValue::US,\n    ),\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n    state: ::StackOne::Shared::State.new(),\n  ),\n  work_location: ::StackOne::Shared::HrisCreateEmployeeRequestDtoWorkLocation.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"Woolsthorpe Manor\",\n    phone_number: \"+44 1476 860 364\",\n    street_1: \"Water Lane\",\n    street_2: \"Woolsthorpe by Colsterworth\",\n    city: \"Grantham\",\n    zip_code: \"NG33 5NR\",\n    country: ::StackOne::Shared::HrisCreateEmployeeRequestDtoSchemasWorkLocationCountry.new(\n      value: ::StackOne::Shared::HrisCreateEmployeeRequestDtoSchemasWorkLocationValue::US,\n    ),\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n    state: ::StackOne::Shared::HrisCreateEmployeeRequestDtoState.new(),\n  ),\n  cost_centers: [\n    ::StackOne::Shared::CreateCostCenterApiModel.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"R&D\",\n      distribution_percentage: 100.0,\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmployeeRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,benefits,company,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,company_id,remote_company_id,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,employee_number,national_identity_number,national_identity_numbers\",\n  expand: \"company,employments,work_location,home_location,groups\",\n  include: \"avatar_url,avatar,custom_fields,job_description,benefits\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employee(req)\n\nif ! res.employee_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_employee"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.update_employee(id=\"<id>\", x_account_id=\"<id>\", hris_update_employee_request_dto=::StackOne::Shared::HrisUpdateEmployeeRequestDto.new(\n  first_name: \"Issac\",\n  last_name: \"Newton\",\n  name: \"Issac Newton\",\n  display_name: \"Sir Issac Newton\",\n  avatar_url: \"https://example.com/avatar.png\",\n  personal_email: \"isaac.newton@example.com\",\n  personal_phone_number: \"+1234567890\",\n  work_email: \"newton@example.com\",\n  work_phone_number: \"+1234567890\",\n  job_id: \"R-6789\",\n  job_title: \"Physicist\",\n  department_id: \"3093\",\n  department: \"Physics\",\n  manager_id: \"67890\",\n  gender: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoGender.new(),\n  preferred_language: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoPreferredLanguage.new(),\n  ethnicity: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoEthnicity.new(),\n  date_of_birth: DateTime.iso8601('1990-01-01T00:00.000Z'),\n  birthday: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  marital_status: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoMaritalStatus.new(),\n  avatar: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoAvatar.new(),\n  hire_date: DateTime.iso8601('2021-01-01T00:00.000Z'),\n  start_date: DateTime.iso8601('2021-01-01T00:00.000Z'),\n  tenure: 2.0,\n  work_anniversary: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  employment_type: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoEmploymentType.new(),\n  employment_contract_type: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoEmploymentContractType.new(),\n  employment_status: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoEmploymentStatus.new(),\n  termination_date: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  company_id: \"1234567890\",\n  citizenships: [\n    ::StackOne::Shared::CountryCodeEnum.new(\n      value: ::StackOne::Shared::Value::US,\n    ),\n  ],\n  custom_fields: [\n    ::StackOne::Shared::CustomFields.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Training Completion Status\",\n      value: \"Completed\",\n      value_id: \"value_456\",\n      remote_value_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    ),\n  ],\n  benefits: [\n    ::StackOne::Shared::CreateHRISBenefit.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      name: \"Health Insurance\",\n      provider: \"Aetna\",\n      description: \"Health insurance for employees\",\n      created_at: DateTime.iso8601('2021-01-01T00:00:00Z'),\n      updated_at: DateTime.iso8601('2021-01-01T00:00:00Z'),\n    ),\n  ],\n  employee_number: \"125\",\n  national_identity_numbers: [\n    ::StackOne::Shared::NationalIdentityNumberApiModel.new(\n      value: \"123456789\",\n      type: ::StackOne::Shared::NationalIdentityNumberApiModelType.new(\n        value: ::StackOne::Shared::NationalIdentityNumberApiModelValue::SSN,\n      ),\n      country: ::StackOne::Shared::Country.new(\n        value: ::StackOne::Shared::NationalIdentityNumberApiModelSchemasValue::US,\n      ),\n    ),\n  ],\n  home_location: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoHomeLocation.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"Woolsthorpe Manor\",\n    phone_number: \"+44 1476 860 364\",\n    street_1: \"Water Lane\",\n    street_2: \"Woolsthorpe by Colsterworth\",\n    city: \"Grantham\",\n    zip_code: \"NG33 5NR\",\n    country: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoSchemasCountry.new(\n      value: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoSchemasHomeLocationValue::US,\n    ),\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n    state: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoState.new(),\n  ),\n  work_location: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoWorkLocation.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"Woolsthorpe Manor\",\n    phone_number: \"+44 1476 860 364\",\n    street_1: \"Water Lane\",\n    street_2: \"Woolsthorpe by Colsterworth\",\n    city: \"Grantham\",\n    zip_code: \"NG33 5NR\",\n    country: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoSchemasWorkLocationCountry.new(\n      value: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoSchemasWorkLocationValue::US,\n    ),\n    passthrough: {\n      \"other_known_names\": \"John Doe\",\n    },\n    state: ::StackOne::Shared::HrisUpdateEmployeeRequestDtoSchemasState.new(),\n  ),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.update_employee_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_documents"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmployeeDocumentsRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n  filter: ::StackOne::Operations::HrisListEmployeeDocumentsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employee_documents(req)\n\nif ! res.hris_documents_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_upload_employee_document"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.upload_employee_document(id=\"<id>\", x_account_id=\"<id>\", hris_documents_upload_request_dto=::StackOne::Shared::HrisDocumentsUploadRequestDto.new(\n  name: \"weather-forecast\",\n  file_format: ::StackOne::Shared::FileFormat.new(\n    value: ::StackOne::Shared::HrisDocumentsUploadRequestDtoValue::PDF,\n    source_value: \"abc\",\n  ),\n  content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n  category_id: \"6530\",\n  path: \"/path/to/file\",\n  category: ::StackOne::Shared::HrisDocumentsUploadRequestDtoCategory.new(),\n  confidential: ::StackOne::Shared::Confidential.new(\n    value: ::StackOne::Shared::HrisDocumentsUploadRequestDtoSchemasConfidentialValue::TRUE,\n    source_value: \"public\",\n  ),\n))\n\nif ! res.write_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_batch_upload_employee_document"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.batch_upload_employee_document(id=\"<id>\", x_account_id=\"<id>\", hris_batch_document_upload_request_dto=::StackOne::Shared::HrisBatchDocumentUploadRequestDto.new(\n  items: [\n    ::StackOne::Shared::HrisDocumentsUploadRequestDto.new(\n      name: \"weather-forecast\",\n      file_format: ::StackOne::Shared::FileFormat.new(\n        value: ::StackOne::Shared::HrisDocumentsUploadRequestDtoValue::PDF,\n        source_value: \"abc\",\n      ),\n      content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n      category_id: \"6530\",\n      path: \"/path/to/file\",\n      category: ::StackOne::Shared::HrisDocumentsUploadRequestDtoCategory.new(),\n      confidential: ::StackOne::Shared::Confidential.new(\n        value: ::StackOne::Shared::HrisDocumentsUploadRequestDtoSchemasConfidentialValue::TRUE,\n        source_value: \"public\",\n      ),\n    ),\n  ],\n))\n\nif ! res.batch_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_document"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmployeeDocumentRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employee_document(req)\n\nif ! res.hris_document_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_download_employee_document"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.download_employee_document(id=\"<id>\", sub_resource_id=\"<id>\", x_account_id=\"<id>\", format=\"base64\")\n\nif ! res.bytes.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/employments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_employments"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmployeeEmploymentsRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,time_worked,created_at,updated_at,start_date,end_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager\",\n  filter: ::StackOne::Operations::HrisListEmployeeEmploymentsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"groups\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employee_employments(req)\n\nif ! res.employments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/employments"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee_employment"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.create_employee_employment(id=\"<id>\", x_account_id=\"<id>\", hris_create_employment_request_dto=::StackOne::Shared::HrisCreateEmploymentRequestDto.new(\n  id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  employee_id: \"1687-3\",\n  job_title: \"Software Engineer\",\n  pay_rate: \"40.00\",\n  pay_period: ::StackOne::Shared::HrisCreateEmploymentRequestDtoPayPeriod.new(),\n  pay_frequency: ::StackOne::Shared::HrisCreateEmploymentRequestDtoPayFrequency.new(),\n  pay_currency: \"USD\",\n  effective_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  employment_type: ::StackOne::Shared::HrisCreateEmploymentRequestDtoEmploymentType.new(),\n  employment_contract_type: ::StackOne::Shared::HrisCreateEmploymentRequestDtoEmploymentContractType.new(),\n  time_worked: \"P0Y0M0DT8H0M0S\",\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.employment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/employments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_employment"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmployeeEmploymentRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,time_worked,created_at,updated_at,start_date,end_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager\",\n  expand: \"groups\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employee_employment(req)\n\nif ! res.employment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/employments/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_employee_employment"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.update_employee_employment(id=\"<id>\", sub_resource_id=\"<id>\", x_account_id=\"<id>\", hris_create_employment_request_dto=::StackOne::Shared::HrisCreateEmploymentRequestDto.new(\n  id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  employee_id: \"1687-3\",\n  job_title: \"Software Engineer\",\n  pay_rate: \"40.00\",\n  pay_period: ::StackOne::Shared::HrisCreateEmploymentRequestDtoPayPeriod.new(),\n  pay_frequency: ::StackOne::Shared::HrisCreateEmploymentRequestDtoPayFrequency.new(),\n  pay_currency: \"USD\",\n  effective_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  employment_type: ::StackOne::Shared::HrisCreateEmploymentRequestDtoEmploymentType.new(),\n  employment_contract_type: ::StackOne::Shared::HrisCreateEmploymentRequestDtoEmploymentContractType.new(),\n  time_worked: \"P0Y0M0DT8H0M0S\",\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.employment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/invite"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_invite_employee"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.invite_employee(id=\"<id>\", x_account_id=\"<id>\", hris_invite_employee_request_dto=::StackOne::Shared::HrisInviteEmployeeRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.invite_employee_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/skills"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee_skill"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.create_employee_skill(id=\"<id>\", x_account_id=\"<id>\", entity_skills_create_request_dto=::StackOne::Shared::EntitySkillsCreateRequestDto.new(\n  id: \"16873-IT345\",\n  name: \"Information-Technology\",\n  maximum_proficiency: ::StackOne::Shared::MaximumProficiency.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"Expert\",\n  ),\n  minimum_proficiency: ::StackOne::Shared::MinimumProficiency.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"Expert\",\n  ),\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_time_off_requests"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmployeeTimeOffRequestsRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at\",\n  filter: ::StackOne::Operations::HrisListEmployeeTimeOffRequestsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employee_time_off_requests(req)\n\nif ! res.time_off_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee_time_off_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.create_employee_time_off_request(id=\"<id>\", x_account_id=\"<id>\", hris_create_time_off_request_dto=::StackOne::Shared::HrisCreateTimeOffRequestDto.new(\n  employee_id: \"1687-3\",\n  approver_id: \"1687-4\",\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  end_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  start_half_day: true,\n  end_half_day: true,\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employees_time_off_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmployeesTimeOffRequestRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employees_time_off_request(req)\n\nif ! res.time_off_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off_balances"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_time_off_balances"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmployeeTimeOffBalancesRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,policy_id,remote_policy_id,policy,current_balance,initial_balance,balance_unit,balance_start_date,balance_expiry_date,updated_at\",\n  filter: ::StackOne::Operations::HrisListEmployeeTimeOffBalancesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"policy\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employee_time_off_balances(req)\n\nif ! res.time_off_balances_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off_balances/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_time_off_balance"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmployeeTimeOffBalanceRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,policy_id,remote_policy_id,policy,current_balance,initial_balance,balance_unit,balance_start_date,balance_expiry_date,updated_at\",\n  expand: \"policy\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employee_time_off_balance(req)\n\nif ! res.time_off_balance_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_work_eligibility"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmployeeWorkEligibilityRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number\",\n  filter: ::StackOne::Operations::HrisListEmployeeWorkEligibilityQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employee_work_eligibility(req)\n\nif ! res.work_eligibility_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee_work_eligibility_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.create_employee_work_eligibility_request(id=\"<id>\", x_account_id=\"<id>\", hris_create_work_eligibility_request_dto=::StackOne::Shared::HrisCreateWorkEligibilityRequestDto.new(\n  document: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoDocument.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"My Document\",\n    path: \"/path/to/file\",\n    category: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoCategory.new(),\n    category_id: \"6530\",\n    created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    updated_at: DateTime.iso8601('2021-01-02T01:01:01.000Z'),\n    remote_url: \"https://example.com/file.pdf\",\n    file_format: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoFileFormat.new(\n      value: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue::PDF,\n      source_value: \"abc\",\n    ),\n  ),\n  issued_by: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoIssuedBy.new(\n    value: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoValue::US,\n  ),\n  number: \"1234567890\",\n  sub_type: \"H1B\",\n  type: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoType.new(),\n  valid_from: DateTime.iso8601('2021-01-01T00:00.000Z'),\n  valid_to: DateTime.iso8601('2021-01-01T00:00.000Z'),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employees_work_eligibility"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmployeesWorkEligibilityRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  fields_: \"id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employees_work_eligibility(req)\n\nif ! res.work_eligibility_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_employee_work_eligibility_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.update_employee_work_eligibility_request(id=\"<id>\", sub_resource_id=\"<id>\", x_account_id=\"<id>\", hris_create_work_eligibility_request_dto=::StackOne::Shared::HrisCreateWorkEligibilityRequestDto.new(\n  document: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoDocument.new(\n    id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n    name: \"My Document\",\n    path: \"/path/to/file\",\n    category: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoCategory.new(),\n    category_id: \"6530\",\n    created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    updated_at: DateTime.iso8601('2021-01-02T01:01:01.000Z'),\n    remote_url: \"https://example.com/file.pdf\",\n    file_format: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoFileFormat.new(\n      value: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue::PDF,\n      source_value: \"abc\",\n    ),\n  ),\n  issued_by: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoIssuedBy.new(\n    value: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoValue::US,\n  ),\n  number: \"1234567890\",\n  sub_type: \"H1B\",\n  type: ::StackOne::Shared::HrisCreateWorkEligibilityRequestDtoType.new(),\n  valid_from: DateTime.iso8601('2021-01-01T00:00.000Z'),\n  valid_to: DateTime.iso8601('2021-01-01T00:00.000Z'),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif res.status_code == 200\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employments"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListEmploymentsRequest.new(\n  fields_: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,time_worked,created_at,updated_at,start_date,end_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager\",\n  filter: ::StackOne::Operations::HrisListEmploymentsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"groups\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_employments(req)\n\nif ! res.employments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employment"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetEmploymentRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,time_worked,created_at,updated_at,start_date,end_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager\",\n  expand: \"groups\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_employment(req)\n\nif ! res.employment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_groups"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListGroupsRequest.new(\n  fields_: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n  filter: ::StackOne::Operations::HrisListGroupsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_groups(req)\n\nif ! res.hris_groups_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/cost_centers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_cost_center_groups"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListCostCenterGroupsRequest.new(\n  fields_: \"id,remote_id,name,type,distribution_percentage,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n  filter: ::StackOne::Operations::HrisListCostCenterGroupsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_cost_center_groups(req)\n\nif ! res.hris_cost_center_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/cost_centers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_cost_center_group"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetCostCenterGroupRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,type,distribution_percentage,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_cost_center_group(req)\n\nif ! res.hris_cost_center_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/departments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_department_groups"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListDepartmentGroupsRequest.new(\n  fields_: \"id,remote_id,name\",\n  filter: ::StackOne::Operations::HrisListDepartmentGroupsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_department_groups(req)\n\nif ! res.hris_departments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/departments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_department_group"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetDepartmentGroupRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_department_group(req)\n\nif ! res.hris_departments_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/teams"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_team_groups"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListTeamGroupsRequest.new(\n  fields_: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n  filter: ::StackOne::Operations::HrisListTeamGroupsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_team_groups(req)\n\nif ! res.hris_teams_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/teams/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_team_group"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetTeamGroupRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_team_group(req)\n\nif ! res.hris_teams_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_group"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetGroupRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_group(req)\n\nif ! res.hris_groups_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_jobs"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListJobsRequest.new(\n  fields_: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n  filter: ::StackOne::Operations::HrisListJobsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_jobs(req)\n\nif ! res.jobs_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_job"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetJobRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_job(req)\n\nif ! res.job_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/locations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_locations"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListLocationsRequest.new(\n  fields_: \"id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at\",\n  filter: ::StackOne::Operations::HrisListLocationsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_locations(req)\n\nif ! res.hris_locations_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/locations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_location"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetLocationRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_location(req)\n\nif ! res.hris_location_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_entries"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_time_entries"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListTimeEntriesRequest.new(\n  fields_: \"id,remote_id,employee_id,remote_employee_id,start_time,end_time,hours_worked,break_duration,labor_type,location,status,created_at,updated_at\",\n  filter: ::StackOne::Operations::HrisListTimeEntriesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n    start_time: \"2020-01-01T00:00:00.000Z\",\n    end_time: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_time_entries(req)\n\nif ! res.time_entries_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_entries/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_time_entries"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetTimeEntriesRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,start_time,end_time,hours_worked,break_duration,labor_type,location,status,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_time_entries(req)\n\nif ! res.time_entries_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_time_off_requests"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListTimeOffRequestsRequest.new(\n  fields_: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at\",\n  filter: ::StackOne::Operations::HrisListTimeOffRequestsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_time_off_requests(req)\n\nif ! res.time_off_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_time_off_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.create_time_off_request(x_account_id=\"<id>\", hris_create_time_off_request_dto=::StackOne::Shared::HrisCreateTimeOffRequestDto.new(\n  employee_id: \"1687-3\",\n  approver_id: \"1687-4\",\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  end_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  start_half_day: true,\n  end_half_day: true,\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_time_off_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetTimeOffRequestRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_time_off_request(req)\n\nif ! res.time_off_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_time_off_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.hris.update_time_off_request(id=\"<id>\", x_account_id=\"<id>\", hris_create_time_off_request_dto=::StackOne::Shared::HrisCreateTimeOffRequestDto.new(\n  employee_id: \"1687-3\",\n  approver_id: \"1687-4\",\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  end_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  start_half_day: true,\n  end_half_day: true,\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off_policies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_time_off_policies"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListTimeOffPoliciesRequest.new(\n  fields_: \"id,remote_id,name,description,type,updated_at,created_at\",\n  filter: ::StackOne::Operations::HrisListTimeOffPoliciesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_time_off_policies(req)\n\nif ! res.time_off_policies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off_policies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_time_off_policy"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetTimeOffPolicyRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,description,type,updated_at,created_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_time_off_policy(req)\n\nif ! res.time_off_policy_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off_types"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_time_off_types"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisListTimeOffTypesRequest.new(\n  fields_: \"id,remote_id,name,active\",\n  filter: ::StackOne::Operations::HrisListTimeOffTypesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.list_time_off_types(req)\n\nif ! res.reference_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off_types/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_time_off_type"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::HrisGetTimeOffTypeRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,active\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.hris.get_time_off_type(req)\n\nif ! res.reference_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/groups"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_list_groups"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::IamListGroupsRequest.new(\n  fields_: \"id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at\",\n  filter: ::StackOne::Operations::IamListGroupsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"roles\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.iam.list_groups(req)\n\nif ! res.iam_groups_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/groups/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_get_group"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::IamGetGroupRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at\",\n  expand: \"roles\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.iam.get_group(req)\n\nif ! res.iam_group_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/policies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_list_policies"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::IamListPoliciesRequest.new(\n  fields_: \"id,remote_id,name,permissions,description,created_at,updated_at\",\n  filter: ::StackOne::Operations::IamListPoliciesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"permissions\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.iam.list_policies(req)\n\nif ! res.iam_policies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/policies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_get_policy"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::IamGetPolicyRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,permissions,description,created_at,updated_at\",\n  expand: \"permissions\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.iam.get_policy(req)\n\nif ! res.iam_policy_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/roles"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_list_roles"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::IamListRolesRequest.new(\n  fields_: \"id,remote_id,name,type,policies,description,created_at,updated_at\",\n  filter: ::StackOne::Operations::IamListRolesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"policies\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.iam.list_roles(req)\n\nif ! res.iam_roles_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/roles/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_get_role"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::IamGetRoleRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,type,policies,description,created_at,updated_at\",\n  expand: \"policies\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.iam.get_role(req)\n\nif ! res.iam_role_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_list_users"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::IamListUsersRequest.new(\n  fields_: \"id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled\",\n  filter: ::StackOne::Operations::IamListUsersQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  expand: \"roles,groups\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.iam.list_users(req)\n\nif ! res.iam_users_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_get_user"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::IamGetUserRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled\",\n  expand: \"roles,groups\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.iam.get_user(req)\n\nif ! res.iam_user_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/assignments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_assignments"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListAssignmentsRequest.new(\n  fields_: \"id,remote_id,external_reference,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status,progress,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference\",\n  filter: ::StackOne::Operations::LmsListAssignmentsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  user_id: \"c28xyrc55866bvuv\",\n  remote_user_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_assignments(req)\n\nif ! res.assignments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/assignments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_assignment"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetAssignmentRequest.new(\n  id: \"<id>\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_assignment(req)\n\nif ! res.assignment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/categories"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_categories"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListCategoriesRequest.new(\n  fields_: \"id,remote_id,name,active,hierarchy,level,language\",\n  filter: ::StackOne::Operations::LmsListCategoriesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_categories(req)\n\nif ! res.categories_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/categories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_category"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetCategoryRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,active,hierarchy,level,language\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_category(req)\n\nif ! res.category_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/collections"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_create_collection"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.create_collection(x_account_id=\"<id>\", lms_create_collection_request_dto=::StackOne::Shared::LmsCreateCollectionRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  external_reference: \"SOFTWARE-ENG-LV1-TRAINING-collection-1\",\n  learning_object_ids: [\n    \"16873-SOFTWARE-ENG-COURSE\",\n    \"16874-SOFTWARE-ENG-COURSE\",\n  ],\n  remote_learning_object_ids: [\n    \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    \"e3cb75bf-aa84-466e-a6c1-b8322b257a49\",\n  ],\n  title: \"Software Engineer Lv 1 Collection\",\n  description: \"This collection acts as learning pathway for software engineers.\",\n  cover_url: \"https://www.googledrive.com/?v=16873\",\n  categories: [\n    ::StackOne::Shared::CreateCategoriesApiModel.new(\n      id: \"16873-IT345\",\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      name: \"Information-Technology\",\n      language: ::StackOne::Shared::CreateCategoriesApiModelLanguage.new(\n        value: ::StackOne::Shared::CreateCategoriesApiModelSchemasLanguageValue::EN_GB,\n      ),\n    ),\n  ],\n  skills: [\n    ::StackOne::Shared::CreateSkillsApiModel.new(\n      id: \"16873-IT345\",\n      name: \"Information-Technology\",\n      language: ::StackOne::Shared::CreateSkillsApiModelLanguage.new(\n        value: ::StackOne::Shared::CreateSkillsApiModelSchemasLanguageValue::EN_GB,\n      ),\n    ),\n  ],\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/collections/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_update_collection"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.update_collection(id=\"<id>\", x_account_id=\"<id>\", lms_create_collection_request_dto=::StackOne::Shared::LmsCreateCollectionRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  external_reference: \"SOFTWARE-ENG-LV1-TRAINING-collection-1\",\n  learning_object_ids: [\n    \"16873-SOFTWARE-ENG-COURSE\",\n    \"16874-SOFTWARE-ENG-COURSE\",\n  ],\n  remote_learning_object_ids: [\n    \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    \"e3cb75bf-aa84-466e-a6c1-b8322b257a49\",\n  ],\n  title: \"Software Engineer Lv 1 Collection\",\n  description: \"This collection acts as learning pathway for software engineers.\",\n  cover_url: \"https://www.googledrive.com/?v=16873\",\n  categories: [\n    ::StackOne::Shared::CreateCategoriesApiModel.new(\n      id: \"16873-IT345\",\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      name: \"Information-Technology\",\n      language: ::StackOne::Shared::CreateCategoriesApiModelLanguage.new(\n        value: ::StackOne::Shared::CreateCategoriesApiModelSchemasLanguageValue::EN_GB,\n      ),\n    ),\n  ],\n  skills: [\n    ::StackOne::Shared::CreateSkillsApiModel.new(\n      id: \"16873-IT345\",\n      name: \"Information-Technology\",\n      language: ::StackOne::Shared::CreateSkillsApiModelLanguage.new(\n        value: ::StackOne::Shared::CreateSkillsApiModelSchemasLanguageValue::EN_GB,\n      ),\n    ),\n  ],\n))\n\nif ! res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/completions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_completions"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListCompletionsRequest.new(\n  fields_: \"id,remote_id,external_id,remote_external_id,external_reference,content_id,remote_content_id,course_id,remote_course_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference\",\n  filter: ::StackOne::Operations::LmsListCompletionsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_completions(req)\n\nif ! res.completions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/completions/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_completion"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetCompletionRequest.new(\n  id: \"<id>\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_completion(req)\n\nif ! res.completion_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_content"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListContentRequest.new(\n  fields_: \"id,remote_id,external_reference,course_ids,remote_course_ids,title,description,additional_data,languages,content_url,mobile_launch_content_url,content_type,cover_url,active,duration,order,categories,skills,updated_at,created_at,provider,localisations,tags\",\n  filter: ::StackOne::Operations::LmsListContentQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_content(req)\n\nif ! res.content_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content"]["put"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_upsert_content"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.upsert_content(x_account_id=\"<id>\", lms_upsert_content_request_dto=::StackOne::Shared::LmsUpsertContentRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  external_reference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n  title: \"Software Engineer Lv 1\",\n  description: \"This video acts as learning content for software engineers.\",\n  additional_data: [\n    ::StackOne::Shared::AdditionalData.new(\n      id: \"learning_outcomes\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      value: \"This is additional data\",\n    ),\n  ],\n  languages: [\n    ::StackOne::Shared::LanguageEnum.new(\n      value: ::StackOne::Shared::LanguageEnumValue::EN_GB,\n    ),\n  ],\n  content_url: \"https://www.youtube.com/watch?v=16873\",\n  mobile_launch_content_url: \"https://www.mobile.youtube.com/watch?v=16873\",\n  cover_url: \"https://www.googledrive.com/?v=16873\",\n  active: true,\n  duration: \"P3Y6M4DT12H30M5S\",\n  skills: [\n    ::StackOne::Shared::CreateSkillsApiModel.new(\n      id: \"12345\",\n      name: \"Sales Techniques\",\n    ),\n  ],\n  order: 1.0,\n  localisations: [\n    ::StackOne::Shared::LocalisationModel.new(\n      title: \"Software Engineer Lv 1\",\n      description: \"This video acts as learning content for software engineers.\",\n    ),\n  ],\n  tags: [\n    \"Sales Techniques\",\n    \"Customer Service\",\n  ],\n  updated_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  created_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  categories: [\n    ::StackOne::Shared::CreateCategoriesApiModel.new(\n      id: \"16873-IT345\",\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      name: \"Information-Technology\",\n      language: ::StackOne::Shared::CreateCategoriesApiModelLanguage.new(\n        value: ::StackOne::Shared::CreateCategoriesApiModelSchemasLanguageValue::EN_GB,\n      ),\n    ),\n  ],\n))\n\nif ! res.upsert_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_batch_upsert_content"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.batch_upsert_content(x_account_id=\"<id>\", lms_batch_upsert_content_request_dto=::StackOne::Shared::LmsBatchUpsertContentRequestDto.new(\n  items: [\n    ::StackOne::Shared::LmsUpsertContentRequestDto.new(\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      external_reference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n      title: \"Software Engineer Lv 1\",\n      description: \"This video acts as learning content for software engineers.\",\n      additional_data: [\n        ::StackOne::Shared::AdditionalData.new(\n          id: \"learning_outcomes\",\n          remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          value: \"This is additional data\",\n        ),\n      ],\n      languages: [\n        ::StackOne::Shared::LanguageEnum.new(\n          value: ::StackOne::Shared::LanguageEnumValue::EN_GB,\n        ),\n      ],\n      content_url: \"https://www.youtube.com/watch?v=16873\",\n      mobile_launch_content_url: \"https://www.mobile.youtube.com/watch?v=16873\",\n      cover_url: \"https://www.googledrive.com/?v=16873\",\n      active: true,\n      duration: \"P3Y6M4DT12H30M5S\",\n      skills: [\n        ::StackOne::Shared::CreateSkillsApiModel.new(\n          id: \"12345\",\n          name: \"Sales Techniques\",\n        ),\n      ],\n      order: 1.0,\n      localisations: [\n        ::StackOne::Shared::LocalisationModel.new(\n          title: \"Software Engineer Lv 1\",\n          description: \"This video acts as learning content for software engineers.\",\n        ),\n      ],\n      tags: [\n        \"Sales Techniques\",\n        \"Customer Service\",\n      ],\n      updated_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n      created_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n      categories: [\n        ::StackOne::Shared::CreateCategoriesApiModel.new(\n          id: \"16873-IT345\",\n          unified_custom_fields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          name: \"Information-Technology\",\n          language: ::StackOne::Shared::CreateCategoriesApiModelLanguage.new(\n            value: ::StackOne::Shared::CreateCategoriesApiModelSchemasLanguageValue::EN_GB,\n          ),\n        ),\n      ],\n    ),\n  ],\n))\n\nif ! res.batch_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_content"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetContentRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,external_reference,course_ids,remote_course_ids,title,description,additional_data,languages,content_url,mobile_launch_content_url,content_type,cover_url,active,duration,order,categories,skills,updated_at,created_at,provider,localisations,tags\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_content(req)\n\nif ! res.content_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/courses"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_courses"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListCoursesRequest.new(\n  fields_: \"id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,cover_url,url,active,duration,categories,skills,updated_at,created_at,content,provider\",\n  filter: ::StackOne::Operations::LmsListCoursesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_courses(req)\n\nif ! res.course_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/courses"]["put"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_upsert_course"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.upsert_course(x_account_id=\"<id>\", lms_upsert_course_request_dto=::StackOne::Shared::LmsUpsertCourseRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": \"REF-1236\",\n    \"my_project_custom_field_2\": \"some other value\",\n  },\n  external_reference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n  title: \"Software Engineer Lv 1\",\n  description: \"This course acts as learning content for software engineers.\",\n  languages: [\n    ::StackOne::Shared::LanguageEnum.new(\n      value: ::StackOne::Shared::LanguageEnumValue::EN_GB,\n    ),\n  ],\n  cover_url: \"https://www.googledrive.com/?v=16873\",\n  url: \"https://www.linkedinlearning.com/?v=16873\",\n  active: true,\n  duration: \"P3Y6M4DT12H30M5S\",\n  categories: [\n    ::StackOne::Shared::CreateCategoriesApiModel.new(\n      id: \"16873-IT345\",\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      name: \"Information-Technology\",\n      language: ::StackOne::Shared::CreateCategoriesApiModelLanguage.new(\n        value: ::StackOne::Shared::CreateCategoriesApiModelSchemasLanguageValue::EN_GB,\n      ),\n    ),\n  ],\n  skills: [\n    ::StackOne::Shared::CreateSkillsApiModel.new(\n      id: \"16873-IT345\",\n      name: \"Information-Technology\",\n      language: ::StackOne::Shared::CreateSkillsApiModelLanguage.new(\n        value: ::StackOne::Shared::CreateSkillsApiModelSchemasLanguageValue::EN_GB,\n      ),\n    ),\n  ],\n  content: [\n    ::StackOne::Shared::CreateContentApiModel.new(\n      external_reference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n      title: \"Software Engineer Lv 1\",\n      description: \"This video acts as learning content for software engineers.\",\n      content_url: \"https://www.youtube.com/watch?v=16873\",\n      mobile_launch_content_url: \"https://www.mobile.youtube.com/watch?v=16873\",\n      order: 1.0,\n    ),\n  ],\n))\n\nif ! res.upsert_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/courses/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_batch_upsert_course"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.batch_upsert_course(x_account_id=\"<id>\", lms_batch_upsert_course_request_dto=::StackOne::Shared::LmsBatchUpsertCourseRequestDto.new(\n  items: [\n    ::StackOne::Shared::LmsUpsertCourseRequestDto.new(\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      external_reference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n      title: \"Software Engineer Lv 1\",\n      description: \"This course acts as learning content for software engineers.\",\n      languages: [\n        ::StackOne::Shared::LanguageEnum.new(\n          value: ::StackOne::Shared::LanguageEnumValue::EN_GB,\n        ),\n      ],\n      cover_url: \"https://www.googledrive.com/?v=16873\",\n      url: \"https://www.linkedinlearning.com/?v=16873\",\n      active: true,\n      duration: \"P3Y6M4DT12H30M5S\",\n      categories: [\n        ::StackOne::Shared::CreateCategoriesApiModel.new(\n          id: \"16873-IT345\",\n          unified_custom_fields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          name: \"Information-Technology\",\n          language: ::StackOne::Shared::CreateCategoriesApiModelLanguage.new(\n            value: ::StackOne::Shared::CreateCategoriesApiModelSchemasLanguageValue::EN_GB,\n          ),\n        ),\n      ],\n      skills: [\n        ::StackOne::Shared::CreateSkillsApiModel.new(\n          id: \"16873-IT345\",\n          name: \"Information-Technology\",\n          language: ::StackOne::Shared::CreateSkillsApiModelLanguage.new(\n            value: ::StackOne::Shared::CreateSkillsApiModelSchemasLanguageValue::EN_GB,\n          ),\n        ),\n      ],\n      content: [\n        ::StackOne::Shared::CreateContentApiModel.new(\n          external_reference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n          title: \"Software Engineer Lv 1\",\n          description: \"This video acts as learning content for software engineers.\",\n          content_url: \"https://www.youtube.com/watch?v=16873\",\n          mobile_launch_content_url: \"https://www.mobile.youtube.com/watch?v=16873\",\n          order: 1.0,\n        ),\n      ],\n    ),\n  ],\n))\n\nif ! res.batch_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/courses/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_course"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetCourseRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,cover_url,url,active,duration,categories,skills,updated_at,created_at,content,provider\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_course(req)\n\nif ! res.course_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/skills"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_skills"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListSkillsRequest.new(\n  fields_: \"id,remote_id,name,active,hierarchy,language\",\n  filter: ::StackOne::Operations::LmsListSkillsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_skills(req)\n\nif ! res.skills_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/skills/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_skill"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetSkillRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,active,hierarchy,language\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_skill(req)\n\nif ! res.skill_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_users"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListUsersRequest.new(\n  fields_: \"id,remote_id,external_reference,active,email,phone_number,created_at,updated_at,name\",\n  filter: ::StackOne::Operations::LmsListUsersQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_users(req)\n\nif ! res.users_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_user"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetUserRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,external_reference,active,email,phone_number,created_at,updated_at,name\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_user(req)\n\nif ! res.user_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/assignments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_user_assignments"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListUserAssignmentsRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,external_reference,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status,progress,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference\",\n  filter: ::StackOne::Operations::LmsListUserAssignmentsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  user_id: \"c28xyrc55866bvuv\",\n  remote_user_id: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_user_assignments(req)\n\nif ! res.assignments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/assignments"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_create_user_assignment"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.create_user_assignment(id=\"<id>\", x_account_id=\"<id>\", lms_create_assignment_request_dto=::StackOne::Shared::LmsCreateAssignmentRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n  learning_object_id: \"e3gd34-23tr21-er234-345er56\",\n  learning_object_external_reference: \"learning-content-123\",\n  progress: 40,\n  created_at: \"2021-07-21T14:00:00.000Z\",\n  due_date: \"2021-07-21T14:00:00.000Z\",\n  status: ::StackOne::Shared::LmsCreateAssignmentRequestDtoStatus.new(\n    value: ::StackOne::Shared::LmsCreateAssignmentRequestDtoValue::PENDING,\n  ),\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/assignments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_user_assignment"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetUserAssignmentRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_user_assignment(req)\n\nif ! res.assignment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_user_completions"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsListUserCompletionsRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,external_id,remote_external_id,external_reference,content_id,remote_content_id,course_id,remote_course_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference\",\n  filter: ::StackOne::Operations::LmsListUserCompletionsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.list_user_completions(req)\n\nif ! res.completions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_create_user_completion"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.create_user_completion(id=\"<id>\", x_account_id=\"<id>\", lms_create_completion_request_dto=::StackOne::Shared::LmsCreateCompletionRequestDto.new(\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n  completed_at: \"2021-07-21T14:00:00.000Z\",\n  learning_object_id: \"e3gd34-23tr21-er234-345er56\",\n  learning_object_external_reference: \"learning-content-123\",\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/completions/{subResourceId}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_delete_user_completion"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.lms.delete_user_completion(id=\"<id>\", sub_resource_id=\"<id>\", x_account_id=\"<id>\")\n\nif ! res.delete_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/completions/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_user_completion"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::LmsGetUserCompletionRequest.new(\n  id: \"<id>\",\n  sub_resource_id: \"<id>\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.lms.get_user_completion(req)\n\nif ! res.completion_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/campaigns"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_campaigns"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingListCampaignsRequest.new(\n  fields_: \"id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages\",\n  filter: ::StackOne::Operations::MarketingListCampaignsQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.list_campaigns(req)\n\nif ! res.campaigns_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/campaigns/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_campaign"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingGetCampaignRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.get_campaign(req)\n\nif ! res.campaign_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/content_blocks"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_content_blocks"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingListContentBlocksRequest.new(\n  fields_: \"id,remote_id,name,type,content,status,tags,created_at,updated_at\",\n  filter: ::StackOne::Operations::MarketingListContentBlocksQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.list_content_blocks(req)\n\nif ! res.content_blocks_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/content_blocks"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_content_block"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.create_content_block(x_account_id=\"<id>\", marketing_create_content_blocks_request_dto=::StackOne::Shared::MarketingCreateContentBlocksRequestDto.new(\n  type: ::StackOne::Shared::MarketingCreateContentBlocksRequestDtoType.new(\n    value: ::StackOne::Shared::MarketingCreateContentBlocksRequestDtoValue::HTML,\n    source_value: \"text\",\n  ),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_content_block"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingGetContentBlockRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,type,content,status,tags,created_at,updated_at\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.get_content_block(req)\n\nif ! res.content_block_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_content_block"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.update_content_block(id=\"<id>\", x_account_id=\"<id>\", marketing_create_content_blocks_request_dto=::StackOne::Shared::MarketingCreateContentBlocksRequestDto.new(\n  type: ::StackOne::Shared::MarketingCreateContentBlocksRequestDtoType.new(\n    value: ::StackOne::Shared::MarketingCreateContentBlocksRequestDtoValue::HTML,\n    source_value: \"text\",\n  ),\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/email"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_email_templates"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingListEmailTemplatesRequest.new(\n  fields_: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n  filter: ::StackOne::Operations::MarketingListEmailTemplatesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.list_email_templates(req)\n\nif ! res.email_templates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/email"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_email_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.create_email_template(x_account_id=\"<id>\", marketing_create_email_template_request_dto=::StackOne::Shared::MarketingCreateEmailTemplateRequestDto.new(\n  messages: [\n    ::StackOne::Shared::EmailMessages.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      message_type: ::StackOne::Shared::MessageType.new(\n        value: ::StackOne::Shared::EmailMessagesValue::EMAIL,\n        source_value: \"Email\",\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_email_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingGetEmailTemplateRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.get_email_template(req)\n\nif ! res.email_template_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_email_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.update_email_template(id=\"<id>\", x_account_id=\"<id>\", marketing_create_email_template_request_dto=::StackOne::Shared::MarketingCreateEmailTemplateRequestDto.new(\n  messages: [\n    ::StackOne::Shared::EmailMessages.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      message_type: ::StackOne::Shared::MessageType.new(\n        value: ::StackOne::Shared::EmailMessagesValue::EMAIL,\n        source_value: \"Email\",\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/in_app"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_in_app_templates"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingListInAppTemplatesRequest.new(\n  fields_: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n  filter: ::StackOne::Operations::MarketingListInAppTemplatesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.list_in_app_templates(req)\n\nif ! res.in_app_templates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/in_app"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_in_app_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.create_in_app_template(x_account_id=\"<id>\", marketing_create_in_app_template_request_dto=::StackOne::Shared::MarketingCreateInAppTemplateRequestDto.new(\n  messages: [\n    ::StackOne::Shared::InAppMessages.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      message_type: ::StackOne::Shared::InAppMessagesMessageType.new(\n        value: ::StackOne::Shared::InAppMessagesValue::EMAIL,\n        source_value: \"Email\",\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_in_app_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingGetInAppTemplateRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.get_in_app_template(req)\n\nif ! res.in_app_template_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_in_app_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.update_in_app_template(id=\"<id>\", x_account_id=\"<id>\", marketing_create_in_app_template_request_dto=::StackOne::Shared::MarketingCreateInAppTemplateRequestDto.new(\n  messages: [\n    ::StackOne::Shared::InAppMessages.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      message_type: ::StackOne::Shared::InAppMessagesMessageType.new(\n        value: ::StackOne::Shared::InAppMessagesValue::EMAIL,\n        source_value: \"Email\",\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/push"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_push_templates"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingListPushTemplatesRequest.new(\n  fields_: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n  filter: ::StackOne::Operations::MarketingListPushTemplatesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.list_push_templates(req)\n\nif ! res.push_templates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/push"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_push_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.create_push_template(x_account_id=\"<id>\", marketing_create_push_template_request_dto=::StackOne::Shared::MarketingCreatePushTemplateRequestDto.new(\n  messages: [\n    ::StackOne::Shared::PushMessages.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      message_type: ::StackOne::Shared::PushMessagesMessageType.new(\n        value: ::StackOne::Shared::PushMessagesValue::EMAIL,\n        source_value: \"Email\",\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_push_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingGetPushTemplateRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.get_push_template(req)\n\nif ! res.push_template_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_push_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.update_push_template(id=\"<id>\", x_account_id=\"<id>\", marketing_create_push_template_request_dto=::StackOne::Shared::MarketingCreatePushTemplateRequestDto.new(\n  messages: [\n    ::StackOne::Shared::PushMessages.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      message_type: ::StackOne::Shared::PushMessagesMessageType.new(\n        value: ::StackOne::Shared::PushMessagesValue::EMAIL,\n        source_value: \"Email\",\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/sms"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_sms_templates"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingListSmsTemplatesRequest.new(\n  fields_: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n  filter: ::StackOne::Operations::MarketingListSmsTemplatesQueryParamFilter.new(\n    updated_after: \"2020-01-01T00:00:00.000Z\",\n  ),\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.list_sms_templates(req)\n\nif ! res.sms_templates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/sms"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_sms_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.create_sms_template(x_account_id=\"<id>\", marketing_create_sms_template_request_dto=::StackOne::Shared::MarketingCreateSmsTemplateRequestDto.new(\n  messages: [\n    ::StackOne::Shared::SmsMessages.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      message_type: ::StackOne::Shared::SmsMessagesMessageType.new(\n        value: ::StackOne::Shared::SmsMessagesValue::EMAIL,\n        source_value: \"Email\",\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_sms_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n\nreq = ::StackOne::Operations::MarketingGetSmsTemplateRequest.new(\n  id: \"<id>\",\n  fields_: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n  x_account_id: \"<id>\",\n)\n    \nres = s.marketing.get_sms_template(req)\n\nif ! res.sms_template_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_sms_template"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.marketing.update_sms_template(id=\"<id>\", x_account_id=\"<id>\", marketing_create_sms_template_request_dto=::StackOne::Shared::MarketingCreateSmsTemplateRequestDto.new(\n  messages: [\n    ::StackOne::Shared::SmsMessages.new(\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remote_id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      message_type: ::StackOne::Shared::SmsMessagesMessageType.new(\n        value: ::StackOne::Shared::SmsMessagesValue::EMAIL,\n        source_value: \"Email\",\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": \"John Doe\",\n  },\n))\n\nif ! res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/proxy"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_proxy_request"
          "source": "require 'stackone_client'\n\n\ns = ::StackOne::StackOne.new\ns.config_security(\n  ::StackOne::Shared::Security.new(\n    username: \"\",\n    password: \"\",\n  )\n)\n\n    \nres = s.proxy.proxy_request(x_account_id=\"<id>\", proxy_request_body=::StackOne::Shared::ProxyRequestBody.new(\n  url: \"https://api.sample-integration.com/v1\",\n  path: \"/employees/directory\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n))\n\nif res.status_code == 200\n  # handle response\nend"
