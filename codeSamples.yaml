overlay: 1.0.0
info:
  title: CodeSamples overlay for ruby target
  version: 0.0.0
actions:
  - target: $["paths"]["/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_list_linked_accounts"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::StackoneListLinkedAccountsRequest.new()\n\nres = s.accounts.list_linked_accounts(request: req)\n\nunless res.linked_accounts.nil?\n  # handle response\nend"
  - target: $["paths"]["/accounts/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_delete_account"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.accounts.delete_account(id: '<id>')\n\nunless res.linked_account.nil?\n  # handle response\nend"
  - target: $["paths"]["/accounts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_get_account"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.accounts.get_account(id: '<id>')\n\nunless res.linked_account.nil?\n  # handle response\nend"
  - target: $["paths"]["/accounts/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_update_account"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.accounts.update_account(id: '<id>', patch_account_external_dto: Models::Shared::PatchAccountExternalDto.new(\n  type: Models::Shared::PatchAccountExternalDtoType::TEST,\n))\n\nunless res.linked_account.nil?\n  # handle response\nend"
  - target: $["paths"]["/accounts/{id}/meta"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_get_account_meta_info"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.accounts.get_account_meta_info(id: '<id>')\n\nunless res.linked_account_meta.nil?\n  # handle response\nend"
  - target: $["paths"]["/connect_sessions"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_create_connect_session"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Shared::ConnectSessionCreate.new(\n  categories: [\n    Models::Shared::Categories::ATS,\n    Models::Shared::Categories::HRIS,\n    Models::Shared::Categories::TICKETING,\n    Models::Shared::Categories::CRM,\n    Models::Shared::Categories::IAM,\n    Models::Shared::Categories::MARKETING,\n    Models::Shared::Categories::LMS,\n    Models::Shared::Categories::IAM,\n    Models::Shared::Categories::DOCUMENTS,\n    Models::Shared::Categories::TICKETING,\n    Models::Shared::Categories::SCREENING,\n    Models::Shared::Categories::MESSAGING,\n    Models::Shared::Categories::ACCOUNTING,\n  ],\n  origin_owner_id: '<id>',\n  origin_owner_name: '<value>',\n)\n\nres = s.connect_sessions.create_connect_session(request: req)\n\nunless res.connect_session_token_auth_link.nil?\n  # handle response\nend"
  - target: $["paths"]["/connect_sessions/authenticate"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_authenticate_connect_session"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Shared::ConnectSessionAuthenticate.new(\n  token: '<value>',\n)\n\nres = s.connect_sessions.authenticate_connect_session(request: req)\n\nunless res.connect_session.nil?\n  # handle response\nend"
  - target: $["paths"]["/connectors/meta"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_list_connectors_meta"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.connectors.list_connectors_meta(include: 'field_path,unmapped_fields,resources,inactive,webhooks,static_fields')\n\nunless res.connectors_metas.nil?\n  # handle response\nend"
  - target: $["paths"]["/connectors/meta/{provider}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_get_connector_meta"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.connectors.get_connector_meta(provider: '<value>', include: 'field_path,unmapped_fields,resources,inactive,webhooks,static_fields')\n\nunless res.connectors_meta.nil?\n  # handle response\nend"
  - target: $["paths"]["/requests/logs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_list_logs"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::StackoneListLogsRequest.new(\n  order_by: Models::Operations::QueryParamOrderBy::DURATION,\n  order_direction: Models::Operations::QueryParamOrderDirection::ASC,\n  include: Models::Operations::QueryParamInclude::STEP_LOGS,\n  filter: Models::Operations::QueryParamFilter.new(\n    account_ids: '45355976281015164504,45355976281015164505',\n    start_date: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    end_date: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    request_ids: 'adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c',\n    source_types: 'DASHBOARD,SYNTHETIC_WEBHOOK',\n    http_methods: 'GET,POST',\n    providers: 'ashby,greenhouse',\n    services: 'hris,ats',\n    resources: 'employees,users',\n    child_resources: 'documents,time-off',\n    sub_resources: 'documents,employees',\n    actions: 'download,upload',\n    status_codes: '200,400',\n    success: true,\n    order_by: Models::Operations::StackoneListLogsQueryParamOrderBy::DURATION,\n    order_direction: Models::Operations::StackoneListLogsQueryParamOrderDirection::ASC,\n  ),\n)\n\nres = s.request_logs.list_logs(request: req)\n\nunless res.unified_logs_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/requests/logs/steps"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_list_step_logs"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::StackoneListStepLogsRequest.new(\n  order_by: Models::Operations::OrderBy::EVENT_DATETIME,\n  order_direction: Models::Operations::OrderDirection::ASC,\n  filter: Models::Operations::Filter.new(\n    account_ids: '45355976281015164504,45355976281015164505',\n    start_date: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    end_date: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    request_ids: 'adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c',\n    http_methods: 'GET,POST',\n    providers: 'ashby,greenhouse',\n    services: 'hris,ats',\n    resources: 'employees,users',\n    child_resources: 'documents,time-off',\n    sub_resources: 'documents,employees',\n    actions: 'download,upload',\n    status_codes: '200,400',\n    success: true,\n  ),\n)\n\nres = s.request_logs.list_step_logs(request: req)\n\nunless res.step_logs_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/requests/logs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_get_log"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.request_logs.get_log(id: '<id>', include: Models::Operations::Include::STEP_LOGS)\n\nunless res.unified_log_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/requests/platform-logs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_list_platform_logs"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::StackoneListPlatformLogsRequest.new(\n  order_by: Models::Operations::StackoneListPlatformLogsQueryParamOrderBy::DURATION,\n  order_direction: Models::Operations::StackoneListPlatformLogsQueryParamOrderDirection::ASC,\n  filter: Models::Operations::StackoneListPlatformLogsQueryParamFilter.new(\n    account_ids: '45355976281015164504,45355976281015164505',\n    start_date: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    end_date: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    request_ids: 'adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c',\n    source_types: 'DASHBOARD,SYNTHETIC_WEBHOOK',\n    http_methods: 'GET,POST',\n    categories: 'hris,ats',\n    resources: 'employees,users',\n    actions: 'download,upload',\n    status_codes: '200,400',\n    success: true,\n    order_by: Models::Operations::StackoneListPlatformLogsQueryParamRequestLogsOrderBy::EVENT_DATETIME,\n    order_direction: Models::Operations::StackoneListPlatformLogsQueryParamRequestLogsOrderDirection::ASC,\n  ),\n)\n\nres = s.request_logs.list_platform_logs(request: req)\n\nunless res.platform_logs_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_list_companies"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AccountingListCompaniesRequest.new(\n  fields_: 'id,remote_id,name,base_currency,fiscal_year_start_month,fiscal_year_start_day',\n  filter: Models::Operations::AccountingListCompaniesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.accounting.list_companies(request: req)\n\nunless res.accounting_companies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_get_company"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AccountingGetCompanyRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,base_currency,fiscal_year_start_month,fiscal_year_start_day',\n  x_account_id: '<id>',\n)\n\nres = s.accounting.get_company(request: req)\n\nunless res.accounting_company_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_list_company_accounts"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AccountingListCompanyAccountsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,company_id,remote_company_id,code,name,type,active',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.accounting.list_company_accounts(request: req)\n\nunless res.accounting_accounts_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}/accounts/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_get_company_account"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AccountingGetCompanyAccountRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,company_id,remote_company_id,code,name,type,active',\n  x_account_id: '<id>',\n)\n\nres = s.accounting.get_company_account(request: req)\n\nunless res.accounting_account_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}/journals"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_list_company_journals"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AccountingListCompanyJournalsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,company_id,remote_company_id,reference,memo,transaction_date,status,lines,created_at,updated_at,posted_at',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.accounting.list_company_journals(request: req)\n\nunless res.accounting_journals_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}/journals"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_create_company_journal"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.accounting.create_company_journal(id: '<id>', x_account_id: '<id>', accounting_journal_create_request_dto: Models::Shared::AccountingJournalCreateRequestDto.new(\n  reference: 'JRN-2024-001',\n  memo: 'Monthly closing entries',\n  currency_code: Models::Shared::CurrencyCode.new(\n    value: Models::Shared::AccountingJournalCreateRequestDtoValue::USD,\n    source_value: 'USD',\n  ),\n  exchange_rate: 1.0,\n  transaction_date: DateTime.iso8601('2024-03-20T10:00:00Z'),\n  lines: [\n    Models::Shared::CreateJournalLine.new(\n      account_id: 'acc_123456789',\n      description: 'Payment for office supplies',\n      amount: 10_010.0,\n      tax_rate_id: 'tax_123456789',\n      tax_amount: 10_010.0,\n    ),\n  ],\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}/journals/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_batch_create_company_journals"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.accounting.batch_create_company_journals(id: '<id>', x_account_id: '<id>', accounting_journal_batch_create_request_dto: Models::Shared::AccountingJournalBatchCreateRequestDto.new(\n  items: [],\n))\n\nunless res.batch_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}/journals/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_get_company_journal"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AccountingGetCompanyJournalRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,company_id,remote_company_id,reference,memo,transaction_date,status,lines,created_at,updated_at,posted_at',\n  x_account_id: '<id>',\n)\n\nres = s.accounting.get_company_journal(request: req)\n\nunless res.accounting_journal_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}/tax_rates"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_list_company_tax_rates"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AccountingListCompanyTaxRatesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,company_id,remote_company_id,name,code,rate,active',\n  filter: Models::Operations::AccountingListCompanyTaxRatesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.accounting.list_company_tax_rates(request: req)\n\nunless res.accounting_tax_rates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/accounting/companies/{id}/tax_rates/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "accounting_get_company_tax_rate"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AccountingGetCompanyTaxRateRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,company_id,remote_company_id,name,code,rate,active',\n  x_account_id: '<id>',\n)\n\nres = s.accounting.get_company_tax_rate(request: req)\n\nunless res.accounting_tax_rate_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_applications"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationsRequest.new(\n  fields_: 'id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate',\n  filter: Models::Operations::AtsListApplicationsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    created_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'documents',\n  include: 'attachments,custom_fields',\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_applications(request: req)\n\nunless res.applications_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_application"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.create_application(x_account_id: '<id>', ats_create_application_request_dto: Models::Shared::AtsCreateApplicationRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  job_id: '4071538b-3cac-4fbf-ac76-f78ed250ffdd',\n  job_posting_id: '1c702a20-8de8-4d03-ac18-cbf4ac42eb51',\n  location_id: 'dd8d41d1-5eb8-4408-9c87-9ba44604eae4',\n  application_status: nil,\n  questionnaires: [\n    Models::Shared::CreateQuestionnaire.new(\n      id: 'right_to_work',\n      answers: [\n        Models::Shared::CreateAnswer.new(\n          id: 'answer1',\n          type: Models::Shared::CreateAnswerType.new(\n            value: Models::Shared::CreateAnswerValue::SHORT_TEXT,\n            source_value: 'Short Text',\n          ),\n          values: [\n            'Yes',\n          ],\n        ),\n      ],\n    ),\n  ],\n  source: Models::Shared::AtsCreateApplicationRequestDtoSource.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'LinkedIn',\n  ),\n  candidate_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n  candidate: Models::Shared::AtsCreateApplicationRequestDtoCandidate.new(\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n    unified_custom_fields: {\n      \"my_project_custom_field_1\": 'REF-1236',\n      \"my_project_custom_field_2\": 'some other value',\n    },\n    phone_numbers: [\n      Models::Shared::PhoneNumber.new(\n        phone: '+447700112233',\n      ),\n    ],\n    name: 'Romain Sestier',\n    first_name: 'Romain',\n    last_name: 'Sestier',\n    email: 'sestier.romain123@gmail.com',\n    social_links: [\n      Models::Shared::SocialLink.new(\n        type: 'linkedin',\n        url: 'https://www.linkedin.com/in/romainsestier/',\n      ),\n    ],\n    company: 'Company Inc.',\n    title: 'Software Engineer',\n    hired_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    country: 'United States',\n    custom_fields: [\n      Models::Shared::CustomFields.new(\n        id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n        remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n        name: 'Training Completion Status',\n        value: 'Completed',\n        value_id: 'value_456',\n        remote_value_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n      ),\n    ],\n  ),\n  documents: [\n    Models::Shared::AtsDocumentsUploadRequestDto.new(\n      name: 'weather-forecast',\n      file_format: Models::Shared::AtsDocumentsUploadRequestDtoFileFormat.new(\n        value: Models::Shared::AtsDocumentsUploadRequestDtoValue::PDF,\n        source_value: 'application/pdf',\n      ),\n      content: 'VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE',\n      category_id: '6530',\n      path: '/path/to/file',\n      confidential: nil,\n      category: Models::Shared::AtsDocumentsUploadRequestDtoCategory.new(),\n    ),\n  ],\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetApplicationRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate',\n  expand: 'documents',\n  include: 'attachments,custom_fields',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_application(request: req)\n\nunless res.application_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_application"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.update_application(id: '<id>', x_account_id: '<id>', ats_update_application_request_dto: Models::Shared::AtsUpdateApplicationRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  custom_fields: [\n    Models::Shared::CustomFields.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Training Completion Status',\n      value: 'Completed',\n      value_id: 'value_456',\n      remote_value_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    ),\n  ],\n  application_status: Models::Shared::AtsUpdateApplicationRequestDtoApplicationStatus.new(\n    value: Models::Shared::AtsUpdateApplicationRequestDtoValue::HIRED,\n    source_value: 'Hired',\n  ),\n  source: Models::Shared::AtsUpdateApplicationRequestDtoSource.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'LinkedIn',\n  ),\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/changes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_changes"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationChangesRequest.new(\n  id: '<id>',\n  fields_: 'event_id,remote_event_id,created_at,effective_at,change_type,actor,new_values',\n  filter: Models::Operations::AtsListApplicationChangesQueryParamFilter.new(\n    created_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_application_changes(request: req)\n\nunless res.application_changes_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/documents"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_documents"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationDocumentsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format',\n  filter: Models::Operations::AtsListApplicationDocumentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_application_documents(request: req)\n\nunless res.ats_documents_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/upload"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_upload_application_document"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.upload_application_document(id: '<id>', x_account_id: '<id>', ats_documents_upload_request_dto: Models::Shared::AtsDocumentsUploadRequestDto.new(\n  name: 'weather-forecast',\n  file_format: nil,\n  content: 'VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE',\n  category_id: '6530',\n  path: '/path/to/file',\n  confidential: Models::Shared::AtsDocumentsUploadRequestDtoConfidential.new(\n    value: Models::Shared::AtsDocumentsUploadRequestDtoSchemasValue::TRUE,\n    source_value: 'public',\n  ),\n  category: Models::Shared::AtsDocumentsUploadRequestDtoCategory.new(),\n))\n\nunless res.write_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_document"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetApplicationDocumentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_application_document(request: req)\n\nunless res.ats_document_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_download_application_document"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsDownloadApplicationDocumentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  format: 'base64',\n  export_format: 'text/plain',\n  x_account_id: '<id>',\n)\n\nres = s.ats.download_application_document(request: req)\n\nunless res.body.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/move"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_move_application"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.move_application(id: '<id>', x_account_id: '<id>', ats_move_application_request_dto: Models::Shared::AtsMoveApplicationRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  interview_stage_id: 'f223d7f6-908b-48f0-9237-b201c307f609',\n))\n\nunless res.move_application_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/notes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_notes"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationNotesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at',\n  filter: Models::Operations::AtsListApplicationNotesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_application_notes(request: req)\n\nunless res.notes_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/notes"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_application_note"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.create_application_note(id: '<id>', x_account_id: '<id>', ats_create_notes_request_dto: Models::Shared::AtsCreateNotesRequestDto.new(\n  content: [\n    Models::Shared::NoteContentApiModel.new(\n      body: 'This candidate seems like a good fit for the role',\n    ),\n  ],\n  author_id: '1234567890',\n  visibility: Models::Shared::AtsCreateNotesRequestDtoVisibility.new(\n    value: Models::Shared::AtsCreateNotesRequestDtoValue::PUBLIC,\n    source_value: 'Public',\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/notes/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_note"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetApplicationNoteRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_application_note(request: req)\n\nunless res.note_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/notes/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_application_note"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.update_application_note(id: '<id>', sub_resource_id: '<id>', x_account_id: '<id>', ats_update_notes_request_dto: Models::Shared::AtsUpdateNotesRequestDto.new(\n  content: [\n    Models::Shared::NoteContentApiModel.new(\n      body: 'This candidate seems like a good fit for the role',\n    ),\n  ],\n  author_id: '1234567890',\n  visibility: Models::Shared::AtsUpdateNotesRequestDtoVisibility.new(\n    value: Models::Shared::AtsUpdateNotesRequestDtoValue::PUBLIC,\n    source_value: 'Public',\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/offers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_applications_offers"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationsOffersRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history',\n  filter: Models::Operations::AtsListApplicationsOffersQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_applications_offers(request: req)\n\nunless res.offers_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/offers/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_offer"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetApplicationOfferRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_application_offer(request: req)\n\nunless res.offers_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/reject"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_reject_application"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.reject_application(id: '<id>', x_account_id: '<id>', ats_reject_application_request_dto: Models::Shared::AtsRejectApplicationRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  rejected_reason_id: 'f223d7f6-908b-48f0-9237-b201c307f609',\n))\n\nunless res.reject_application_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_applications_scheduled_interviews"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationsScheduledInterviewsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at',\n  filter: Models::Operations::AtsListApplicationsScheduledInterviewsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_applications_scheduled_interviews(request: req)\n\nunless res.scheduled_interviews_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_scheduled_interview"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetApplicationScheduledInterviewRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_application_scheduled_interview(request: req)\n\nunless res.scheduled_interviews_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_scorecards"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationScorecardsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at',\n  filter: Models::Operations::AtsListApplicationScorecardsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_application_scorecards(request: req)\n\nunless res.scorecards_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_scorecard"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetApplicationScorecardRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_application_scorecard(request: req)\n\nunless res.scorecards_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/orders"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_order_assessments_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.order_assessments_request(x_account_id: '<id>', ats_create_candidates_assessments_request_dto: Models::Shared::AtsCreateCandidatesAssessmentsRequestDto.new(\n  id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n  package: Models::Shared::AtsCreateCandidatesAssessmentsRequestDtoPackage.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'Test 1',\n    description: 'Skills test to gauge a candidate\\'s proficiency in job-specific skills',\n  ),\n  application: Models::Shared::AtsCreateCandidatesAssessmentsRequestDtoApplication.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    application_status: Models::Shared::AtsCreateCandidatesAssessmentsRequestDtoApplicationStatus.new(\n      value: Models::Shared::AtsCreateCandidatesAssessmentsRequestDtoValue::HIRED,\n      source_value: 'Hired',\n    ),\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n  ),\n  job: Models::Shared::AtsCreateCandidatesAssessmentsRequestDtoJob.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    title: 'Software Engineer',\n    hiring_team: [\n      Models::Shared::AtsJobHiringTeam.new(\n        user_id: '123456',\n        remote_user_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n        first_name: 'John',\n        last_name: 'Doe',\n        email: 'john.doe@gmail.com',\n        role: 'Software Engineer',\n      ),\n    ],\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n  ),\n  candidate: Models::Shared::AtsCreateCandidatesAssessmentsRequestDtoCandidate.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    first_name: 'Romain',\n    last_name: 'Sestier',\n    emails: [\n      Models::Shared::CandidateEmail.new(\n        type: 'personal',\n        value: 'sestier.romain123@gmail.com',\n      ),\n    ],\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n    profile_url: 'https://exmaple.com/candidate?id=xyz',\n  ),\n  requester: Models::Shared::Requester.new(\n    user_id: '123456',\n    remote_user_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    first_name: 'John',\n    last_name: 'Doe',\n    email: 'john.doe@gmail.com',\n    role: 'Software Engineer',\n  ),\n  results_update_url: 'https://exmaple.com/integrations/results/update',\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_assessment_order_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/orders/{id}/result"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_assessments_result"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.update_assessments_result(id: '<id>', x_account_id: '<id>', ats_update_candidates_assessments_results_request_dto: Models::Shared::AtsUpdateCandidatesAssessmentsResultsRequestDto.new(\n  score: nil,\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  submission_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  summary: 'Test is passed',\n  result: Models::Shared::Result.new(\n    value: Models::Shared::AtsUpdateCandidatesAssessmentsResultsRequestDtoValue::PASSED,\n    source_value: 'Passed',\n  ),\n  result_url: 'https://exmaple.com/result?id=xyz',\n  attachments: [\n    Models::Shared::Attachment.new(\n      url: 'http://example.com/resume.pdf',\n      content_type: Models::Shared::AttachmentContentType.new(\n        value: Models::Shared::AttachmentValue::TEXT,\n        source_value: 'Text',\n      ),\n    ),\n  ],\n  candidate: Models::Shared::AtsUpdateCandidatesAssessmentsResultsRequestDtoCandidate.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    profile_url: 'https://exmaple.com/candidate?id=xyz',\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/packages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_assessments_packages"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListAssessmentsPackagesRequest.new(\n  filter: Models::Operations::AtsListAssessmentsPackagesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_assessments_packages(request: req)\n\nunless res.assessment_package_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/assessments/packages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_assessments_package"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetAssessmentsPackageRequest.new(\n  id: '<id>',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_assessments_package(request: req)\n\nunless res.assessment_package_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/orders"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_order_background_check_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.order_background_check_request(x_account_id: '<id>', ats_create_background_check_order_request_dto: Models::Shared::AtsCreateBackgroundCheckOrderRequestDto.new(\n  id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n  remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n  application: Models::Shared::AtsCreateBackgroundCheckOrderRequestDtoApplication.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    application_status: Models::Shared::AtsCreateBackgroundCheckOrderRequestDtoApplicationStatus.new(\n      value: Models::Shared::AtsCreateBackgroundCheckOrderRequestDtoValue::HIRED,\n      source_value: 'Hired',\n    ),\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n  ),\n  job: nil,\n  candidate: Models::Shared::AtsCreateBackgroundCheckOrderRequestDtoCandidate.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    first_name: 'Romain',\n    last_name: 'Sestier',\n    emails: [\n      Models::Shared::CandidateEmail.new(\n        type: 'personal',\n        value: 'sestier.romain123@gmail.com',\n      ),\n    ],\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n    profile_url: 'https://exmaple.com/candidate?id=xyz',\n  ),\n  requester: Models::Shared::AtsCreateBackgroundCheckOrderRequestDtoRequester.new(\n    user_id: '123456',\n    remote_user_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    first_name: 'John',\n    last_name: 'Doe',\n    email: 'john.doe@gmail.com',\n    role: 'Software Engineer',\n  ),\n  results_update_url: 'https://exmaple.com/integrations/results/update',\n  package: Models::Shared::AtsCreateBackgroundCheckOrderRequestDtoPackage.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'Test 1',\n    description: 'Skills test to gauge a candidate\\'s proficiency in job-specific skills',\n    tests: [\n      Models::Shared::Package.new(\n        id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n        remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n        name: 'Test 1',\n        description: 'Skills test to gauge a candidate\\'s proficiency in job-specific skills',\n      ),\n    ],\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_background_check_order_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/orders/{id}/result"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_background_check_result"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.update_background_check_result(id: '<id>', x_account_id: '<id>', ats_update_background_check_result_request_dto: Models::Shared::AtsUpdateBackgroundCheckResultRequestDto.new(\n  score: Models::Shared::AtsUpdateBackgroundCheckResultRequestDtoScore.new(\n    label: 'Percentage',\n    value: '80',\n    min: '0',\n    max: '100',\n  ),\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  submission_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  summary: 'Test is passed',\n  result: Models::Shared::AtsUpdateBackgroundCheckResultRequestDtoResult.new(\n    value: Models::Shared::AtsUpdateBackgroundCheckResultRequestDtoValue::PASSED,\n    source_value: 'Passed',\n  ),\n  result_url: 'https://exmaple.com/result?id=xyz',\n  attachments: [\n    Models::Shared::Attachment.new(\n      url: 'http://example.com/resume.pdf',\n      content_type: Models::Shared::AttachmentContentType.new(\n        value: Models::Shared::AttachmentValue::TEXT,\n        source_value: 'Text',\n      ),\n    ),\n  ],\n  candidate: Models::Shared::AtsUpdateBackgroundCheckResultRequestDtoCandidate.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    profile_url: 'https://exmaple.com/candidate?id=xyz',\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/packages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_background_check_packages"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListBackgroundCheckPackagesRequest.new(\n  fields_: 'id,remote_id,name,description,tests',\n  filter: Models::Operations::AtsListBackgroundCheckPackagesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_background_check_packages(request: req)\n\nunless res.background_check_package_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/packages"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_background_check_package"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.create_background_check_package(x_account_id: '<id>', ats_create_background_check_packages_request_dto: Models::Shared::AtsCreateBackgroundCheckPackagesRequestDto.new(\n  name: 'Test 1',\n  description: 'Skills test to gauge a candidate\\'s proficiency in job-specific skills',\n  tests: [\n    Models::Shared::CreatePackage.new(\n      name: 'Test 1',\n      description: 'Skills test to gauge a candidate\\'s proficiency in job-specific skills',\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/packages/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_delete_background_check_package"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.delete_background_check_package(id: '<id>', x_account_id: '<id>')\n\nunless res.delete_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/packages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_background_check_package"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetBackgroundCheckPackageRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,tests',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_background_check_package(request: req)\n\nunless res.background_check_package_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/background_checks/packages/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_background_check_package"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.update_background_check_package(id: '<id>', x_account_id: '<id>', ats_update_background_check_packages_request_dto: Models::Shared::AtsUpdateBackgroundCheckPackagesRequestDto.new(\n  name: 'Test 1',\n  description: 'Skills test to gauge a candidate\\'s proficiency in job-specific skills',\n  tests: [\n    Models::Shared::UpdatePackage.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Test 1',\n      description: 'Skills test to gauge a candidate\\'s proficiency in job-specific skills',\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_candidates"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListCandidatesRequest.new(\n  fields_: 'id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,country,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at',\n  filter: Models::Operations::AtsListCandidatesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    created_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  include: 'custom_fields',\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_candidates(request: req)\n\nunless res.candidates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_candidate"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.create_candidate(x_account_id: '<id>', ats_create_candidate_request_dto: Models::Shared::AtsCreateCandidateRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  phone_numbers: [\n    Models::Shared::PhoneNumber.new(\n      phone: '+447700112233',\n    ),\n  ],\n  name: 'Romain Sestier',\n  first_name: 'Romain',\n  last_name: 'Sestier',\n  email: 'sestier.romain123@gmail.com',\n  social_links: [\n    Models::Shared::SocialLink.new(\n      type: 'linkedin',\n      url: 'https://www.linkedin.com/in/romainsestier/',\n    ),\n  ],\n  company: 'Company Inc.',\n  title: 'Software Engineer',\n  hired_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  country: 'United States',\n  custom_fields: [\n    Models::Shared::CustomFields.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Training Completion Status',\n      value: 'Completed',\n      value_id: 'value_456',\n      remote_value_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    ),\n  ],\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_candidate"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetCandidateRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,country,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at',\n  include: 'custom_fields',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_candidate(request: req)\n\nunless res.candidate_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_candidate"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.update_candidate(id: '<id>', x_account_id: '<id>', ats_update_candidate_request_dto: Models::Shared::AtsUpdateCandidateRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  name: 'Romain Sestier',\n  first_name: 'Romain',\n  last_name: 'Sestier',\n  email: 'sestier.romain123@gmail.com',\n  emails: [\n    Models::Shared::CandidateEmail.new(\n      type: 'personal',\n      value: 'sestier.romain123@gmail.com',\n    ),\n  ],\n  social_links: [\n    Models::Shared::SocialLink.new(\n      type: 'linkedin',\n      url: 'https://www.linkedin.com/in/romainsestier/',\n    ),\n  ],\n  phone_numbers: [\n    Models::Shared::PhoneNumber.new(\n      phone: '+447700112233',\n    ),\n  ],\n  company: 'Company Inc.',\n  title: 'Software Engineer',\n  application_ids: [\n    '123e4567-e89b-12d3-a456-426614174000',\n    '523e1234-e89b-fdd2-a456-762545121101',\n  ],\n  hired_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  country: 'United States',\n  custom_fields: nil,\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_candidate_notes"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListCandidateNotesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at',\n  filter: Models::Operations::AtsListCandidateNotesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_candidate_notes(request: req)\n\nunless res.notes_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_candidate_note"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.create_candidate_note(id: '<id>', x_account_id: '<id>', ats_create_notes_request_dto: Models::Shared::AtsCreateNotesRequestDto.new(\n  content: [\n    Models::Shared::NoteContentApiModel.new(\n      body: 'This candidate seems like a good fit for the role',\n    ),\n  ],\n  author_id: '1234567890',\n  visibility: Models::Shared::AtsCreateNotesRequestDtoVisibility.new(\n    value: Models::Shared::AtsCreateNotesRequestDtoValue::PUBLIC,\n    source_value: 'Public',\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_candidate_note"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetCandidateNoteRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_candidate_note(request: req)\n\nunless res.note_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_custom_field_definitions"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationCustomFieldDefinitionsRequest.new(\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_application_custom_field_definitions(request: req)\n\nunless res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_custom_field_definition"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetApplicationCustomFieldDefinitionRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_application_custom_field_definition(request: req)\n\nunless res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_candidate_custom_field_definitions"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListCandidateCustomFieldDefinitionsRequest.new(\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: Models::Operations::AtsListCandidateCustomFieldDefinitionsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_candidate_custom_field_definitions(request: req)\n\nunless res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_candidate_custom_field_definition"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetCandidateCustomFieldDefinitionRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: Models::Operations::AtsGetCandidateCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_candidate_custom_field_definition(request: req)\n\nunless res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_job_custom_field_definitions"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListJobCustomFieldDefinitionsRequest.new(\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: Models::Operations::AtsListJobCustomFieldDefinitionsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_job_custom_field_definitions(request: req)\n\nunless res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/custom_field_definitions/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_job_custom_field_definition"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetJobCustomFieldDefinitionRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: Models::Operations::AtsGetJobCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_job_custom_field_definition(request: req)\n\nunless res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/departments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_departments"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListDepartmentsRequest.new(\n  fields_: 'id,remote_id,name',\n  filter: Models::Operations::AtsListDepartmentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_departments(request: req)\n\nunless res.departments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/departments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_department"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetDepartmentRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_department(request: req)\n\nunless res.department_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/documents/application_categories"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_application_document_categories"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListApplicationDocumentCategoriesRequest.new(\n  fields_: 'id,remote_id,name,active',\n  filter: Models::Operations::AtsListApplicationDocumentCategoriesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_application_document_categories(request: req)\n\nunless res.reference_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/documents/application_categories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_application_document_category"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetApplicationDocumentCategoryRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,active',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_application_document_category(request: req)\n\nunless res.reference_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/interview_stages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_interview_stages"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListInterviewStagesRequest.new(\n  fields_: 'id,remote_id,name,order,created_at,updated_at',\n  filter: Models::Operations::AtsListInterviewStagesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_interview_stages(request: req)\n\nunless res.interview_stages_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/interview_stages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_interview_stage"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetInterviewStageRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,order,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_interview_stage(request: req)\n\nunless res.interview_stage_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/interviews"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_interviews"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListInterviewsRequest.new(\n  fields_: 'id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at',\n  filter: Models::Operations::AtsListInterviewsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    created_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_interviews(request: req)\n\nunless res.interviews_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/interviews/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_interview"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetInterviewRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_interview(request: req)\n\nunless res.interviews_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/job_postings"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_job_postings"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListJobPostingsRequest.new(\n  fields_: 'id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,start_date,updated_at,created_at',\n  filter: Models::Operations::AtsListJobPostingsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    created_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  include: 'questionnaires',\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_job_postings(request: req)\n\nunless res.job_postings_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/job_postings/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_job_posting"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetJobPostingRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,start_date,updated_at,created_at',\n  include: 'questionnaires',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_job_posting(request: req)\n\nunless res.job_posting_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_jobs"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListJobsRequest.new(\n  fields_: 'id,remote_id,code,title,description,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at',\n  filter: Models::Operations::AtsListJobsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    created_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'job_postings,interview_stages',\n  include: 'custom_fields',\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_jobs(request: req)\n\nunless res.ats_jobs_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_job"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.create_job(x_account_id: '<id>', ats_create_job_request_dto: Models::Shared::AtsCreateJobRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  code: '184919',\n  title: 'Software Engineer',\n  description: 'Responsible for identifying business requirements',\n  job_status: Models::Shared::AtsCreateJobRequestDtoJobStatus.new(\n    value: Models::Shared::AtsCreateJobRequestDtoValue::PUBLISHED,\n    source_value: 'Published',\n  ),\n  department_ids: [\n    '308570',\n    '308571',\n    '308572',\n  ],\n  location_ids: [\n    '668570',\n    '678571',\n    '688572',\n  ],\n  hiring_team: [\n    Models::Shared::AtsJobHiringTeam.new(\n      user_id: '123456',\n      remote_user_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n      first_name: 'John',\n      last_name: 'Doe',\n      email: 'john.doe@gmail.com',\n      role: 'Software Engineer',\n    ),\n  ],\n  interview_stages: [\n    Models::Shared::InterviewStage.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": 'REF-1236',\n        \"my_project_custom_field_2\": 'some other value',\n      },\n      created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n      updated_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    ),\n  ],\n  custom_fields: [\n    Models::Shared::CustomFields.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Training Completion Status',\n      value: 'Completed',\n      value_id: 'value_456',\n      remote_value_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_job"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetJobRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,code,title,description,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at',\n  expand: 'job_postings,interview_stages',\n  include: 'custom_fields',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_job(request: req)\n\nunless res.ats_job_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_update_job"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.update_job(id: '<id>', x_account_id: '<id>', ats_update_job_request_dto: Models::Shared::AtsUpdateJobRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  code: '184919',\n  title: 'Software Engineer',\n  description: 'Responsible for identifying business requirements',\n  job_status: Models::Shared::AtsUpdateJobRequestDtoJobStatus.new(\n    value: Models::Shared::AtsUpdateJobRequestDtoValue::PUBLISHED,\n    source_value: 'Published',\n  ),\n  department_ids: [\n    '308570',\n    '308571',\n    '308572',\n  ],\n  location_ids: [\n    '668570',\n    '678571',\n    '688572',\n  ],\n  hiring_team: [\n    Models::Shared::AtsJobHiringTeam.new(\n      user_id: '123456',\n      remote_user_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n      first_name: 'John',\n      last_name: 'Doe',\n      email: 'john.doe@gmail.com',\n      role: 'Software Engineer',\n    ),\n  ],\n  interview_stages: nil,\n  custom_fields: nil,\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs/{id}/application_stages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_job_application_stages"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListJobApplicationStagesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,order,created_at,updated_at',\n  filter: Models::Operations::AtsListJobApplicationStagesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_job_application_stages(request: req)\n\nunless res.application_stages_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/jobs/{id}/application_stages/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_job_application_stage"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetJobApplicationStageRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,name,order,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_job_application_stage(request: req)\n\nunless res.application_stage_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/lists"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_lists"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListListsRequest.new(\n  fields_: 'id,remote_id,name,created_at,updated_at,items,type',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_lists(request: req)\n\nunless res.lists_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/lists/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_list"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetListRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,created_at,updated_at,items,type',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_list(request: req)\n\nunless res.list_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/locations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_locations"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListLocationsRequest.new(\n  fields_: 'id,remote_id,name',\n  filter: Models::Operations::AtsListLocationsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_locations(request: req)\n\nunless res.ats_locations_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/locations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_location"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetLocationRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_location(request: req)\n\nunless res.ats_location_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/offers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_offers"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListOffersRequest.new(\n  fields_: 'id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history',\n  filter: Models::Operations::AtsListOffersQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_offers(request: req)\n\nunless res.offers_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/offers"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_create_offer"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ats.create_offer(x_account_id: '<id>', ats_create_offer_request_dto: Models::Shared::AtsCreateOfferRequestDto.new(\n  start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  offer_status: Models::Shared::AtsCreateOfferRequestDtoOfferStatus.new(\n    value: Models::Shared::AtsCreateOfferRequestDtoValue::PENDING,\n    source_value: 'Pending',\n  ),\n  offer_history: [\n    Models::Shared::OfferHistory.new(\n      start_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n      created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n      updated_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/offers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_offer"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetOfferRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_offer(request: req)\n\nunless res.offers_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/rejected_reasons"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_rejected_reasons"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListRejectedReasonsRequest.new(\n  fields_: 'id,remote_id,label,type,rejected_reason_type',\n  filter: Models::Operations::AtsListRejectedReasonsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_rejected_reasons(request: req)\n\nunless res.rejected_reasons_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/rejected_reasons/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_rejected_reason"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetRejectedReasonRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,label,type,rejected_reason_type',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_rejected_reason(request: req)\n\nunless res.rejected_reason_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_list_users"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsListUsersRequest.new(\n  fields_: 'id,remote_id,first_name,last_name,name,email,phone',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.ats.list_users(request: req)\n\nunless res.users_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ats/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ats_get_user"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::AtsGetUserRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,first_name,last_name,name,email,phone',\n  x_account_id: '<id>',\n)\n\nres = s.ats.get_user(request: req)\n\nunless res.user_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_list_accounts"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::CrmListAccountsRequest.new(\n  fields_: 'id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at',\n  filter: Models::Operations::CrmListAccountsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.crm.list_accounts(request: req)\n\nunless res.accounts_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/accounts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_get_account"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::CrmGetAccountRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.crm.get_account(request: req)\n\nunless res.account_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/contacts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_list_contacts"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::CrmListContactsRequest.new(\n  fields_: 'id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at',\n  filter: Models::Operations::CrmListContactsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  include: 'custom_fields',\n  x_account_id: '<id>',\n)\n\nres = s.crm.list_contacts(request: req)\n\nunless res.contacts_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/contacts"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_create_contact"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.crm.create_contact(x_account_id: '<id>', crm_create_contact_request_dto: Models::Shared::CrmCreateContactRequestDto.new(\n  first_name: 'Steve',\n  last_name: 'Wozniak',\n  company_name: 'Apple Inc.',\n  emails: [\n    'steve@apple.com',\n  ],\n  phone_numbers: [\n    '123-456-7890',\n  ],\n  deal_ids: [\n    'deal-001',\n    'deal-002',\n  ],\n  account_ids: [\n    'account-123',\n    'account-456',\n  ],\n  custom_fields: [\n    Models::Shared::CustomFields.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Training Completion Status',\n      value: 'Completed',\n      value_id: 'value_456',\n      remote_value_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.contact_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/contacts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_get_contact"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::CrmGetContactRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at',\n  include: 'custom_fields',\n  x_account_id: '<id>',\n)\n\nres = s.crm.get_contact(request: req)\n\nunless res.contact_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/contacts/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_update_contact"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.crm.update_contact(id: '<id>', x_account_id: '<id>', crm_create_contact_request_dto: Models::Shared::CrmCreateContactRequestDto.new(\n  first_name: 'Steve',\n  last_name: 'Wozniak',\n  company_name: 'Apple Inc.',\n  emails: [\n    'steve@apple.com',\n  ],\n  phone_numbers: [\n    '123-456-7890',\n  ],\n  deal_ids: [\n    'deal-001',\n    'deal-002',\n  ],\n  account_ids: [\n    'account-123',\n    'account-456',\n  ],\n  custom_fields: [\n    Models::Shared::CustomFields.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Training Completion Status',\n      value: 'Completed',\n      value_id: 'value_456',\n      remote_value_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.contact_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/custom_field_definitions/contacts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_list_contact_custom_field_definitions"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::CrmListContactCustomFieldDefinitionsRequest.new(\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: Models::Operations::CrmListContactCustomFieldDefinitionsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.crm.list_contact_custom_field_definitions(request: req)\n\nunless res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/custom_field_definitions/contacts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_get_contact_custom_field_definition"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::CrmGetContactCustomFieldDefinitionRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: Models::Operations::CrmGetContactCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.crm.get_contact_custom_field_definition(request: req)\n\nunless res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/lists"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_list_lists"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::CrmListListsRequest.new(\n  fields_: 'id,remote_id,name,created_at,updated_at,items,type',\n  filter: Models::Operations::CrmListListsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.crm.list_lists(request: req)\n\nunless res.lists_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/crm/lists/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "crm_get_list"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::CrmGetListRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,created_at,updated_at,items,type',\n  x_account_id: '<id>',\n)\n\nres = s.crm.get_list(request: req)\n\nunless res.list_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/documents/drives"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "documents_list_drives"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::DocumentsListDrivesRequest.new(\n  fields_: 'id,remote_id,name,description,url,created_at,updated_at',\n  filter: Models::Operations::DocumentsListDrivesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.documents.list_drives(request: req)\n\nunless res.drives_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/documents/drives/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "documents_get_drive"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::DocumentsGetDriveRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,url,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.documents.get_drive(request: req)\n\nunless res.drive_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/documents/files"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "documents_list_files"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::DocumentsListFilesRequest.new(\n  fields_: 'id,remote_id,name,description,url,size,file_format,path,owner_id,remote_owner_id,folder_id,remote_folder_id,drive_id,remote_drive_id,export_formats,default_download_format,created_at,updated_at,has_content,has_children,all_parent_folder_ids,remote_all_parent_folder_ids',\n  filter: Models::Operations::DocumentsListFilesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    name: 'john_doe_resume.pdf',\n    content: 'FAQ of the project',\n    created_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    drive_id: '1234567890',\n    folder_id: '1234567890',\n  ),\n  folder_id: '1234567890',\n  nested_items: 'true',\n  include: 'all_parent_folder_ids',\n  x_account_id: '<id>',\n)\n\nres = s.documents.list_files(request: req)\n\nunless res.files_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/documents/files/upload"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "documents_upload_file"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.documents.upload_file(x_account_id: '<id>', unified_upload_request_dto: Models::Shared::UnifiedUploadRequestDto.new(\n  name: 'weather-forecast',\n  file_format: Models::Shared::UnifiedUploadRequestDtoFileFormat.new(\n    value: Models::Shared::UnifiedUploadRequestDtoValue::PDF,\n    source_value: 'application/pdf',\n  ),\n  content: 'VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE',\n  category_id: '6530',\n  path: '/path/to/file',\n  category: Models::Shared::UnifiedUploadRequestDtoCategory.new(\n    value: 'reports, resumes',\n    source_value: '550e8400-e29b-41d4-a716-446655440000, CUSTOM_CATEGORY_NAME',\n  ),\n  confidential: Models::Shared::UnifiedUploadRequestDtoConfidential.new(\n    value: Models::Shared::UnifiedUploadRequestDtoSchemasValue::TRUE,\n    source_value: 'public',\n  ),\n))\n\nunless res.write_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/documents/files/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "documents_get_file"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::DocumentsGetFileRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,url,size,file_format,path,owner_id,remote_owner_id,folder_id,remote_folder_id,drive_id,remote_drive_id,export_formats,default_download_format,created_at,updated_at,has_content,has_children,all_parent_folder_ids,remote_all_parent_folder_ids',\n  include: 'all_parent_folder_ids',\n  x_account_id: '<id>',\n)\n\nres = s.documents.get_file(request: req)\n\nunless res.file_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/documents/files/{id}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "documents_download_file"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::DocumentsDownloadFileRequest.new(\n  id: '<id>',\n  format: 'base64',\n  export_format: 'text/plain',\n  x_account_id: '<id>',\n)\n\nres = s.documents.download_file(request: req)\n\nunless res.body.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/documents/folders"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "documents_list_folders"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::DocumentsListFoldersRequest.new(\n  fields_: 'id,remote_id,name,description,url,size,path,owner_id,remote_owner_id,parent_folder_id,remote_parent_folder_id,drive_id,remote_drive_id,created_at,updated_at,has_content,has_children,is_root,all_parent_folder_ids,remote_all_parent_folder_ids',\n  filter: Models::Operations::DocumentsListFoldersQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    drive_id: '1234567890',\n    folder_id: '1234567890',\n  ),\n  folder_id: '1234567890',\n  nested_items: 'true',\n  include: 'all_parent_folder_ids',\n  x_account_id: '<id>',\n)\n\nres = s.documents.list_folders(request: req)\n\nunless res.folders_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/documents/folders/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "documents_get_folder"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::DocumentsGetFolderRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,url,size,path,owner_id,remote_owner_id,parent_folder_id,remote_parent_folder_id,drive_id,remote_drive_id,created_at,updated_at,has_content,has_children,is_root,all_parent_folder_ids,remote_all_parent_folder_ids',\n  include: 'all_parent_folder_ids',\n  x_account_id: '<id>',\n)\n\nres = s.documents.get_folder(request: req)\n\nunless res.folder_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/benefits"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_benefits"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListBenefitsRequest.new(\n  fields_: 'id,remote_id,name,benefit_type,provider,description,created_at,updated_at',\n  filter: Models::Operations::HrisListBenefitsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_benefits(request: req)\n\nunless res.hris_benefits_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/benefits/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_benefit"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetBenefitRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,benefit_type,provider,description,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_benefit(request: req)\n\nunless res.hris_benefit_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/companies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_companies"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListCompaniesRequest.new(\n  fields_: 'id,remote_id,name,full_name,display_name,created_at,updated_at',\n  filter: Models::Operations::HrisListCompaniesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_companies(request: req)\n\nunless res.companies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/companies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_company"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetCompanyRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,full_name,display_name,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_company(request: req)\n\nunless res.company_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/custom_field_definitions/employees"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_custom_field_definitions"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeCustomFieldDefinitionsRequest.new(\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: Models::Operations::HrisListEmployeeCustomFieldDefinitionsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_custom_field_definitions(request: req)\n\nunless res.custom_field_definitions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/custom_field_definitions/employees/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_custom_field_definition"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeeCustomFieldDefinitionRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,type,options',\n  filter: Models::Operations::HrisGetEmployeeCustomFieldDefinitionQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employee_custom_field_definition(request: req)\n\nunless res.custom_field_definition_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/documents/employee_categories"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_categories"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeCategoriesRequest.new(\n  fields_: 'id,remote_id,name,active',\n  filter: Models::Operations::HrisListEmployeeCategoriesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_categories(request: req)\n\nunless res.reference_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/documents/employee_categories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_document_category"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeeDocumentCategoryRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,active',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employee_document_category(request: req)\n\nunless res.reference_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employees"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeesRequest.new(\n  fields_: 'id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,company,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,company_id,remote_company_id,preferred_language,citizenships,home_location,work_location,employments,custom_fields,created_at,updated_at,benefits,employee_number,national_identity_number,national_identity_numbers,skills',\n  filter: Models::Operations::HrisListEmployeesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'company,employments,work_location,home_location,groups,skills',\n  include: 'avatar_url,avatar,custom_fields,job_description,benefits',\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employees(request: req)\n\nunless res.employees_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.create_employee(x_account_id: '<id>', hris_create_employee_request_dto: Models::Shared::HrisCreateEmployeeRequestDto.new(\n  first_name: 'Isaac',\n  last_name: 'Newton',\n  name: 'Isaac Newton',\n  display_name: 'Sir Isaac Newton',\n  avatar_url: 'https://example.com/avatar.png',\n  personal_email: 'isaac.newton@example.com',\n  personal_phone_number: '+1234567890',\n  work_email: 'newton@example.com',\n  work_phone_number: '+1234567890',\n  job_title: 'Physicist',\n  department_id: '3093',\n  team_id: '2913',\n  department: 'Physics',\n  manager_id: '67890',\n  gender: Models::Shared::HrisCreateEmployeeRequestDtoGender.new(),\n  preferred_language: Models::Shared::HrisCreateEmployeeRequestDtoPreferredLanguage.new(\n    value: Models::Shared::HrisCreateEmployeeRequestDtoSchemasValue::ENG,\n  ),\n  ethnicity: Models::Shared::HrisCreateEmployeeRequestDtoEthnicity.new(),\n  date_of_birth: DateTime.iso8601('1990-01-01T00:00:00.000Z'),\n  birthday: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  marital_status: Models::Shared::HrisCreateEmployeeRequestDtoMaritalStatus.new(),\n  avatar: Models::Shared::HrisCreateEmployeeRequestDtoAvatar.new(),\n  hire_date: DateTime.iso8601('2021-01-01T00:00:00.000Z'),\n  start_date: DateTime.iso8601('2021-01-01T00:00:00.000Z'),\n  employment_status: Models::Shared::HrisCreateEmployeeRequestDtoEmploymentStatus.new(),\n  termination_date: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  company_id: '1234567890',\n  citizenships: [\n    Models::Shared::CountryCodeEnum.new(\n      value: Models::Shared::CountryCodeEnumValue::US,\n    ),\n  ],\n  employment: nil,\n  custom_fields: [\n    Models::Shared::CustomFields.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Training Completion Status',\n      value: 'Completed',\n      value_id: 'value_456',\n      remote_value_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    ),\n  ],\n  benefits: [\n    Models::Shared::CreateHRISBenefit.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Health Insurance',\n      provider: 'Aetna',\n      description: 'Health insurance for employees',\n      created_at: DateTime.iso8601('2021-01-01T00:00:00Z'),\n      updated_at: DateTime.iso8601('2021-01-01T00:00:00Z'),\n    ),\n  ],\n  employee_number: '125',\n  national_identity_numbers: [\n    Models::Shared::NationalIdentityNumberApiModel.new(\n      value: '123456789',\n      type: Models::Shared::NationalIdentityNumberApiModelType.new(\n        value: Models::Shared::NationalIdentityNumberApiModelValue::SSN,\n      ),\n      country: Models::Shared::Country.new(\n        value: Models::Shared::NationalIdentityNumberApiModelSchemasValue::US,\n      ),\n    ),\n  ],\n  home_location: Models::Shared::HrisCreateEmployeeRequestDtoHomeLocation.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'Woolsthorpe Manor',\n    phone_number: '+44 1476 860 364',\n    street_1: 'Water Lane',\n    street_2: 'Woolsthorpe by Colsterworth',\n    city: 'Grantham',\n    zip_code: 'NG33 5NR',\n    country: Models::Shared::HrisCreateEmployeeRequestDtoSchemasCountry.new(\n      value: Models::Shared::HrisCreateEmployeeRequestDtoSchemasHomeLocationValue::US,\n    ),\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n    state: Models::Shared::State.new(),\n  ),\n  work_location: nil,\n  cost_centers: [\n    Models::Shared::CreateCostCenterApiModel.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'R&D',\n      distribution_percentage: 100.0,\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeeRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,company,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,company_id,remote_company_id,preferred_language,citizenships,home_location,work_location,employments,custom_fields,created_at,updated_at,benefits,employee_number,national_identity_number,national_identity_numbers,skills',\n  expand: 'company,employments,work_location,home_location,groups,skills',\n  include: 'avatar_url,avatar,custom_fields,job_description,benefits',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employee(request: req)\n\nunless res.employee_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_employee"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.update_employee(id: '<id>', x_account_id: '<id>', hris_update_employee_request_dto: Models::Shared::HrisUpdateEmployeeRequestDto.new(\n  first_name: 'Isaac',\n  last_name: 'Newton',\n  name: 'Isaac Newton',\n  display_name: 'Sir Isaac Newton',\n  avatar_url: 'https://example.com/avatar.png',\n  personal_email: 'isaac.newton@example.com',\n  personal_phone_number: '+1234567890',\n  work_email: 'newton@example.com',\n  work_phone_number: '+1234567890',\n  job_title: 'Physicist',\n  department_id: '3093',\n  team_id: '2913',\n  department: 'Physics',\n  manager_id: '67890',\n  gender: Models::Shared::HrisUpdateEmployeeRequestDtoGender.new(),\n  preferred_language: Models::Shared::HrisUpdateEmployeeRequestDtoPreferredLanguage.new(\n    value: Models::Shared::HrisUpdateEmployeeRequestDtoSchemasValue::ENG,\n  ),\n  ethnicity: Models::Shared::HrisUpdateEmployeeRequestDtoEthnicity.new(),\n  date_of_birth: DateTime.iso8601('1990-01-01T00:00:00.000Z'),\n  birthday: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  marital_status: Models::Shared::HrisUpdateEmployeeRequestDtoMaritalStatus.new(),\n  avatar: Models::Shared::HrisUpdateEmployeeRequestDtoAvatar.new(),\n  hire_date: DateTime.iso8601('2021-01-01T00:00:00.000Z'),\n  start_date: DateTime.iso8601('2021-01-01T00:00:00.000Z'),\n  employment_status: Models::Shared::HrisUpdateEmployeeRequestDtoEmploymentStatus.new(),\n  termination_date: DateTime.iso8601('2021-01-01T00:00:00Z'),\n  company_id: '1234567890',\n  citizenships: [\n    Models::Shared::CountryCodeEnum.new(\n      value: Models::Shared::CountryCodeEnumValue::US,\n    ),\n  ],\n  employment: nil,\n  custom_fields: [\n    Models::Shared::CustomFields.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      name: 'Training Completion Status',\n      value: 'Completed',\n      value_id: 'value_456',\n      remote_value_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n    ),\n  ],\n  benefits: nil,\n  employee_number: '125',\n  national_identity_numbers: [\n    Models::Shared::NationalIdentityNumberApiModel.new(\n      value: '123456789',\n      type: Models::Shared::NationalIdentityNumberApiModelType.new(\n        value: Models::Shared::NationalIdentityNumberApiModelValue::SSN,\n      ),\n      country: Models::Shared::Country.new(\n        value: Models::Shared::NationalIdentityNumberApiModelSchemasValue::US,\n      ),\n    ),\n  ],\n  home_location: Models::Shared::HrisUpdateEmployeeRequestDtoHomeLocation.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'Woolsthorpe Manor',\n    phone_number: '+44 1476 860 364',\n    street_1: 'Water Lane',\n    street_2: 'Woolsthorpe by Colsterworth',\n    city: 'Grantham',\n    zip_code: 'NG33 5NR',\n    country: Models::Shared::HrisUpdateEmployeeRequestDtoSchemasCountry.new(\n      value: Models::Shared::HrisUpdateEmployeeRequestDtoSchemasHomeLocationValue::US,\n    ),\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n    state: Models::Shared::HrisUpdateEmployeeRequestDtoState.new(),\n  ),\n  work_location: Models::Shared::HrisUpdateEmployeeRequestDtoWorkLocation.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'Woolsthorpe Manor',\n    phone_number: '+44 1476 860 364',\n    street_1: 'Water Lane',\n    street_2: 'Woolsthorpe by Colsterworth',\n    city: 'Grantham',\n    zip_code: 'NG33 5NR',\n    country: Models::Shared::HrisUpdateEmployeeRequestDtoSchemasWorkLocationCountry.new(\n      value: Models::Shared::HrisUpdateEmployeeRequestDtoSchemasWorkLocationValue::US,\n    ),\n    passthrough: {\n      \"other_known_names\": 'John Doe',\n    },\n    state: Models::Shared::HrisUpdateEmployeeRequestDtoSchemasState.new(),\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_documents"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeDocumentsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format',\n  filter: Models::Operations::HrisListEmployeeDocumentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_documents(request: req)\n\nunless res.hris_documents_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_upload_employee_document"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.upload_employee_document(id: '<id>', x_account_id: '<id>', hris_documents_upload_request_dto: Models::Shared::HrisDocumentsUploadRequestDto.new(\n  name: 'weather-forecast',\n  file_format: Models::Shared::FileFormat.new(\n    value: Models::Shared::HrisDocumentsUploadRequestDtoValue::PDF,\n    source_value: 'application/pdf',\n  ),\n  content: 'VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE',\n  category_id: '6530',\n  path: '/path/to/file',\n  confidential: Models::Shared::Confidential.new(\n    value: Models::Shared::HrisDocumentsUploadRequestDtoSchemasValue::TRUE,\n    source_value: 'public',\n  ),\n  category: Models::Shared::HrisDocumentsUploadRequestDtoCategory.new(),\n))\n\nunless res.write_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_batch_upload_employee_document"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.batch_upload_employee_document(id: '<id>', x_account_id: '<id>', hris_batch_document_upload_request_dto: Models::Shared::HrisBatchDocumentUploadRequestDto.new(\n  items: [\n    Models::Shared::HrisDocumentsUploadRequestDto.new(\n      name: 'weather-forecast',\n      file_format: Models::Shared::FileFormat.new(\n        value: Models::Shared::HrisDocumentsUploadRequestDtoValue::PDF,\n        source_value: 'application/pdf',\n      ),\n      content: 'VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE',\n      category_id: '6530',\n      path: '/path/to/file',\n      confidential: Models::Shared::Confidential.new(\n        value: Models::Shared::HrisDocumentsUploadRequestDtoSchemasValue::TRUE,\n        source_value: 'public',\n      ),\n      category: Models::Shared::HrisDocumentsUploadRequestDtoCategory.new(),\n    ),\n  ],\n))\n\nunless res.batch_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_document"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeeDocumentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employee_document(request: req)\n\nunless res.hris_document_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_download_employee_document"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisDownloadEmployeeDocumentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  format: 'base64',\n  export_format: 'text/plain',\n  x_account_id: '<id>',\n)\n\nres = s.hris.download_employee_document(request: req)\n\nunless res.body.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/employments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_employments"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeEmploymentsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager',\n  filter: Models::Operations::HrisListEmployeeEmploymentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'groups',\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_employments(request: req)\n\nunless res.employments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/employments"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee_employment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.create_employee_employment(id: '<id>', x_account_id: '<id>', hris_create_employment_request_dto: Models::Shared::HrisCreateEmploymentRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  job_title: 'Software Engineer',\n  pay_rate: '40.00',\n  pay_period: Models::Shared::HrisCreateEmploymentRequestDtoPayPeriod.new(\n    value: Models::Shared::HrisCreateEmploymentRequestDtoValue::HOUR,\n    source_value: 'Hour',\n  ),\n  pay_frequency: Models::Shared::HrisCreateEmploymentRequestDtoPayFrequency.new(\n    value: Models::Shared::HrisCreateEmploymentRequestDtoSchemasValue::HOURLY,\n    source_value: 'Hourly',\n  ),\n  pay_currency: 'USD',\n  effective_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  end_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  grade: Models::Shared::HrisCreateEmploymentRequestDtoGrade.new(\n    id: '1687-3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: '1687-4',\n    description: 'Mid-level employee demonstrating proficiency and autonomy.',\n  ),\n  work_time: Models::Shared::HrisCreateEmploymentRequestDtoWorkTime.new(\n    duration: 'P0Y0M0DT8H0M0S',\n    duration_unit: Models::Shared::HrisCreateEmploymentRequestDtoDurationUnit.new(\n      value: Models::Shared::HrisCreateEmploymentRequestDtoSchemasWorkTimeValue::MONTH,\n    ),\n  ),\n  payroll_code: 'PC1',\n  job_id: '5290',\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/employments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_employment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeeEmploymentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager',\n  expand: 'groups',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employee_employment(request: req)\n\nunless res.employment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/employments/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_employee_employment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.update_employee_employment(id: '<id>', sub_resource_id: '<id>', x_account_id: '<id>', hris_update_employment_request_dto: Models::Shared::HrisUpdateEmploymentRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  job_title: 'Software Engineer',\n  pay_rate: '40.00',\n  pay_period: Models::Shared::HrisUpdateEmploymentRequestDtoPayPeriod.new(\n    value: Models::Shared::HrisUpdateEmploymentRequestDtoValue::HOUR,\n    source_value: 'Hour',\n  ),\n  pay_frequency: Models::Shared::HrisUpdateEmploymentRequestDtoPayFrequency.new(\n    value: Models::Shared::HrisUpdateEmploymentRequestDtoSchemasValue::HOURLY,\n    source_value: 'Hourly',\n  ),\n  pay_currency: 'USD',\n  effective_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  end_date: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n  grade: Models::Shared::HrisUpdateEmploymentRequestDtoGrade.new(\n    id: '1687-3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: '1687-4',\n    description: 'Mid-level employee demonstrating proficiency and autonomy.',\n  ),\n  work_time: Models::Shared::HrisUpdateEmploymentRequestDtoWorkTime.new(\n    duration: 'P0Y0M0DT8H0M0S',\n    duration_unit: Models::Shared::HrisUpdateEmploymentRequestDtoDurationUnit.new(\n      value: Models::Shared::HrisUpdateEmploymentRequestDtoSchemasWorkTimeValue::MONTH,\n    ),\n  ),\n  payroll_code: 'PC1',\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/invite"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_invite_employee"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.invite_employee(id: '<id>', x_account_id: '<id>', hris_invite_employee_request_dto: Models::Shared::HrisInviteEmployeeRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.invite_employee_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/skills"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_skills"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeSkillsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,active,language,maximum_proficiency,minimum_proficiency',\n  filter: Models::Operations::HrisListEmployeeSkillsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_skills(request: req)\n\nunless res.entity_skills_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/skills"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee_skill"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.create_employee_skill(id: '<id>', x_account_id: '<id>', entity_skills_create_request_dto: Models::Shared::EntitySkillsCreateRequestDto.new(\n  id: '16873-IT345',\n  name: 'Information-Technology',\n  maximum_proficiency: Models::Shared::EntitySkillsCreateRequestDtoMaximumProficiency.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'Expert',\n  ),\n  minimum_proficiency: nil,\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/skills/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_skill"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeeSkillRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,name,active,language,maximum_proficiency,minimum_proficiency',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employee_skill(request: req)\n\nunless res.entity_skill_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/tasks"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_tasks"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeTasksRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at',\n  filter: Models::Operations::HrisListEmployeeTasksQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'attachments',\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_tasks(request: req)\n\nunless res.tasks_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/tasks/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_task"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeeTaskRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at',\n  expand: 'attachments',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employee_task(request: req)\n\nunless res.task_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/tasks/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_employee_task"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.update_employee_task(id: '<id>', sub_resource_id: '<id>', x_account_id: '<id>', update_task_request_dto: Models::Shared::UpdateTaskRequestDto.new(\n  comment: 'All required documents have been submitted',\n  status: Models::Shared::UpdateTaskRequestDtoStatus.new(\n    value: Models::Shared::UpdateTaskRequestDtoValue::OPEN,\n  ),\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_time_off_requests"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeTimeOffRequestsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy',\n  filter: Models::Operations::HrisListEmployeeTimeOffRequestsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'policy',\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_time_off_requests(request: req)\n\nunless res.time_off_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee_time_off_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.create_employee_time_off_request(id: '<id>', x_account_id: '<id>', hris_create_time_off_request_dto: Models::Shared::HrisCreateTimeOffRequestDto.new(\n  approver_id: '1687-4',\n  start_date: '2021-01-01T01:01:01.000',\n  end_date: '2021-01-01T01:01:01.000',\n  start_half_day: true,\n  end_half_day: true,\n  time_off_policy_id: 'cx280928933',\n  reason: Models::Shared::HrisCreateTimeOffRequestDtoReason.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n  ),\n  comment: 'Taking a day off for personal reasons',\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_cancel_employee_time_off_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.cancel_employee_time_off_request(id: '<id>', sub_resource_id: '<id>', x_account_id: '<id>')\n\nunless res.delete_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employees_time_off_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeesTimeOffRequestRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy',\n  expand: 'policy',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employees_time_off_request(request: req)\n\nunless res.time_off_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_employee_time_off_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.update_employee_time_off_request(id: '<id>', sub_resource_id: '<id>', x_account_id: '<id>', hris_create_time_off_request_dto: Models::Shared::HrisCreateTimeOffRequestDto.new(\n  approver_id: '1687-4',\n  start_date: '2021-01-01T01:01:01.000',\n  end_date: '2021-01-01T01:01:01.000',\n  start_half_day: true,\n  end_half_day: true,\n  time_off_policy_id: 'cx280928933',\n  reason: Models::Shared::HrisCreateTimeOffRequestDtoReason.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n  ),\n  comment: 'Taking a day off for personal reasons',\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off_balances"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_time_off_balances"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeTimeOffBalancesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,policy_id,remote_policy_id,policy,current_balance,initial_balance,balance_unit,balance_start_date,balance_expiry_date,updated_at',\n  filter: Models::Operations::HrisListEmployeeTimeOffBalancesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'policy',\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_time_off_balances(request: req)\n\nunless res.time_off_balances_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off_balances/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employee_time_off_balance"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeeTimeOffBalanceRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,policy_id,remote_policy_id,policy,current_balance,initial_balance,balance_unit,balance_start_date,balance_expiry_date,updated_at',\n  expand: 'policy',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employee_time_off_balance(request: req)\n\nunless res.time_off_balance_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off_policies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_time_off_policies"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeTimeOffPoliciesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at',\n  filter: Models::Operations::HrisListEmployeeTimeOffPoliciesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_time_off_policies(request: req)\n\nunless res.time_off_policies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employee_work_eligibility"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmployeeWorkEligibilityRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number',\n  filter: Models::Operations::HrisListEmployeeWorkEligibilityQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employee_work_eligibility(request: req)\n\nunless res.work_eligibility_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_create_employee_work_eligibility_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.create_employee_work_eligibility_request(id: '<id>', x_account_id: '<id>', hris_create_work_eligibility_request_dto: Models::Shared::HrisCreateWorkEligibilityRequestDto.new(\n  document: Models::Shared::HrisCreateWorkEligibilityRequestDtoDocument.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'My Document',\n    path: '/path/to/file',\n    category: Models::Shared::HrisCreateWorkEligibilityRequestDtoCategory.new(),\n    category_id: '6530',\n    created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    updated_at: DateTime.iso8601('2021-01-02T01:01:01.000Z'),\n    remote_url: 'https://example.com/file.pdf',\n    file_format: nil,\n  ),\n  issued_by: Models::Shared::HrisCreateWorkEligibilityRequestDtoIssuedBy.new(\n    value: Models::Shared::HrisCreateWorkEligibilityRequestDtoValue::US,\n  ),\n  number: '1234567890',\n  sub_type: 'H1B',\n  type: Models::Shared::HrisCreateWorkEligibilityRequestDtoType.new(),\n  valid_from: DateTime.iso8601('2021-01-01T00:00:00.000Z'),\n  valid_to: DateTime.iso8601('2021-01-01T00:00:00.000Z'),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employees_work_eligibility"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmployeesWorkEligibilityRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employees_work_eligibility(request: req)\n\nunless res.work_eligibility_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_update_employee_work_eligibility_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.hris.update_employee_work_eligibility_request(id: '<id>', sub_resource_id: '<id>', x_account_id: '<id>', hris_create_work_eligibility_request_dto: Models::Shared::HrisCreateWorkEligibilityRequestDto.new(\n  document: Models::Shared::HrisCreateWorkEligibilityRequestDtoDocument.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    name: 'My Document',\n    path: '/path/to/file',\n    category: Models::Shared::HrisCreateWorkEligibilityRequestDtoCategory.new(),\n    category_id: '6530',\n    created_at: DateTime.iso8601('2021-01-01T01:01:01.000Z'),\n    updated_at: DateTime.iso8601('2021-01-02T01:01:01.000Z'),\n    remote_url: 'https://example.com/file.pdf',\n    file_format: Models::Shared::HrisCreateWorkEligibilityRequestDtoFileFormat.new(\n      value: Models::Shared::HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue::PDF,\n      source_value: 'application/pdf',\n    ),\n  ),\n  issued_by: Models::Shared::HrisCreateWorkEligibilityRequestDtoIssuedBy.new(\n    value: Models::Shared::HrisCreateWorkEligibilityRequestDtoValue::US,\n  ),\n  number: '1234567890',\n  sub_type: 'H1B',\n  type: Models::Shared::HrisCreateWorkEligibilityRequestDtoType.new(),\n  valid_from: DateTime.iso8601('2021-01-01T00:00:00.000Z'),\n  valid_to: DateTime.iso8601('2021-01-01T00:00:00.000Z'),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nif res.status_code == 200\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_employments"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListEmploymentsRequest.new(\n  fields_: 'id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager',\n  filter: Models::Operations::HrisListEmploymentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'groups',\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_employments(request: req)\n\nunless res.employments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/employments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_employment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetEmploymentRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager',\n  expand: 'groups',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_employment(request: req)\n\nunless res.employment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_groups"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListGroupsRequest.new(\n  fields_: 'id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id',\n  filter: Models::Operations::HrisListGroupsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_groups(request: req)\n\nunless res.hris_groups_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/companies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_companies_groups"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListCompaniesGroupsRequest.new(\n  fields_: 'id,remote_id,name,full_name,display_name,created_at,updated_at',\n  filter: Models::Operations::HrisListCompaniesGroupsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_companies_groups(request: req)\n\nunless res.companies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/companies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_company_group"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetCompanyGroupRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,full_name,display_name,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_company_group(request: req)\n\nunless res.company_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/cost_centers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_cost_center_groups"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListCostCenterGroupsRequest.new(\n  fields_: 'id,remote_id,name,type,distribution_percentage,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id',\n  filter: Models::Operations::HrisListCostCenterGroupsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_cost_center_groups(request: req)\n\nunless res.hris_cost_center_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/cost_centers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_cost_center_group"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetCostCenterGroupRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,type,distribution_percentage,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_cost_center_group(request: req)\n\nunless res.hris_cost_center_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/departments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_department_groups"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListDepartmentGroupsRequest.new(\n  fields_: 'id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id',\n  filter: Models::Operations::HrisListDepartmentGroupsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_department_groups(request: req)\n\nunless res.hris_departments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/departments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_department_group"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetDepartmentGroupRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_department_group(request: req)\n\nunless res.hris_departments_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/divisions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_division_groups"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListDivisionGroupsRequest.new(\n  fields_: 'id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id',\n  filter: Models::Operations::HrisListDivisionGroupsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_division_groups(request: req)\n\nunless res.hris_divisions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/divisions/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_division_group"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetDivisionGroupRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_division_group(request: req)\n\nunless res.hris_divisions_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/teams"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_team_groups"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListTeamGroupsRequest.new(\n  fields_: 'id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids',\n  filter: Models::Operations::HrisListTeamGroupsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_team_groups(request: req)\n\nunless res.hris_teams_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/teams/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_team_group"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetTeamGroupRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_team_group(request: req)\n\nunless res.hris_teams_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/groups/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_group"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetGroupRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_group(request: req)\n\nunless res.hris_groups_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_jobs"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListJobsRequest.new(\n  fields_: 'id,remote_id,code,title,description,status,created_at,updated_at',\n  filter: Models::Operations::HrisListJobsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_jobs(request: req)\n\nunless res.hris_jobs_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_job"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetJobRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,code,title,description,status,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_job(request: req)\n\nunless res.hris_job_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/locations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_locations"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListLocationsRequest.new(\n  fields_: 'id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at',\n  filter: Models::Operations::HrisListLocationsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_locations(request: req)\n\nunless res.hris_locations_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/locations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_location"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetLocationRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_location(request: req)\n\nunless res.hris_location_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/positions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_positions"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListPositionsRequest.new(\n  filter: Models::Operations::HrisListPositionsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  status: Models::Operations::Status::OPEN,\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_positions(request: req)\n\nunless res.positions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/positions/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_position"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetPositionRequest.new(\n  id: '<id>',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_position(request: req)\n\nunless res.position_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/shifts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_shifts"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListShiftsRequest.new(\n  filter: Models::Operations::HrisListShiftsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_shifts(request: req)\n\nunless res.hris_shifts_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/shifts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_shift"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetShiftRequest.new(\n  id: '<id>',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_shift(request: req)\n\nunless res.hris_shift_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/tasks"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_tasks"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListTasksRequest.new(\n  fields_: 'id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at',\n  filter: Models::Operations::HrisListTasksQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'attachments',\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_tasks(request: req)\n\nunless res.tasks_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/tasks/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_task"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetTaskRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at',\n  expand: 'attachments',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_task(request: req)\n\nunless res.task_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_entries"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_time_entries"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListTimeEntriesRequest.new(\n  fields_: 'id,remote_id,employee_id,remote_employee_id,start_time,end_time,hours_worked,break_duration,labor_type,location,status,created_at,updated_at',\n  filter: Models::Operations::HrisListTimeEntriesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n    start_time: '2020-01-01T00:00:00.000Z',\n    end_time: '2020-01-01T00:00:00.000Z',\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_time_entries(request: req)\n\nunless res.time_entries_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_entries/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_time_entries"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetTimeEntriesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,start_time,end_time,hours_worked,break_duration,labor_type,location,status,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_time_entries(request: req)\n\nunless res.time_entries_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_time_off_requests"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListTimeOffRequestsRequest.new(\n  fields_: 'id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy',\n  filter: nil,\n  expand: 'policy',\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_time_off_requests(request: req)\n\nunless res.time_off_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_time_off_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetTimeOffRequestRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy',\n  expand: 'policy',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_time_off_request(request: req)\n\nunless res.time_off_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off_policies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_list_time_off_policies"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisListTimeOffPoliciesRequest.new(\n  fields_: 'id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at',\n  filter: Models::Operations::HrisListTimeOffPoliciesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.hris.list_time_off_policies(request: req)\n\nunless res.time_off_policies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/hris/time_off_policies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "hris_get_time_off_policy"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::HrisGetTimeOffPolicyRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at',\n  x_account_id: '<id>',\n)\n\nres = s.hris.get_time_off_policy(request: req)\n\nunless res.time_off_policy_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/groups"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_list_groups"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::IamListGroupsRequest.new(\n  fields_: 'id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at',\n  filter: nil,\n  expand: 'roles',\n  x_account_id: '<id>',\n)\n\nres = s.iam.list_groups(request: req)\n\nunless res.iam_groups_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/groups/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_get_group"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::IamGetGroupRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at',\n  expand: 'roles',\n  x_account_id: '<id>',\n)\n\nres = s.iam.get_group(request: req)\n\nunless res.iam_group_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/policies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_list_policies"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::IamListPoliciesRequest.new(\n  fields_: 'id,remote_id,name,permissions,description,created_at,updated_at',\n  filter: nil,\n  expand: 'permissions',\n  x_account_id: '<id>',\n)\n\nres = s.iam.list_policies(request: req)\n\nunless res.iam_policies_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/policies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_get_policy"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::IamGetPolicyRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,permissions,description,created_at,updated_at',\n  expand: 'permissions',\n  x_account_id: '<id>',\n)\n\nres = s.iam.get_policy(request: req)\n\nunless res.iam_policy_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/roles"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_list_roles"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::IamListRolesRequest.new(\n  fields_: 'id,remote_id,name,type,policies,description,created_at,updated_at',\n  filter: Models::Operations::IamListRolesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'policies',\n  x_account_id: '<id>',\n)\n\nres = s.iam.list_roles(request: req)\n\nunless res.iam_roles_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/roles/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_get_role"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::IamGetRoleRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,type,policies,description,created_at,updated_at',\n  expand: 'policies',\n  x_account_id: '<id>',\n)\n\nres = s.iam.get_role(request: req)\n\nunless res.iam_role_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_list_users"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::IamListUsersRequest.new(\n  fields_: 'id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled',\n  filter: Models::Operations::IamListUsersQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  expand: 'roles,groups',\n  x_account_id: '<id>',\n)\n\nres = s.iam.list_users(request: req)\n\nunless res.iam_users_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/users/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_delete_user"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.iam.delete_user(id: '<id>', x_account_id: '<id>')\n\nunless res.delete_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_get_user"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::IamGetUserRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled',\n  expand: 'roles,groups',\n  x_account_id: '<id>',\n)\n\nres = s.iam.get_user(request: req)\n\nunless res.iam_user_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/iam/users/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "iam_update_user"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.iam.update_user(id: '<id>', x_account_id: '<id>', iam_update_user_request_dto: Models::Shared::IamUpdateUserRequestDto.new(\n  primary_email_address: 'han@stackone.com',\n  first_name: 'Han',\n  last_name: 'Solo',\n  name: 'Han Solo',\n  username: 'hansolo1977',\n  is_bot_user: true,\n  status: Models::Shared::IamUpdateUserRequestDtoStatus.new(\n    value: Models::Shared::IamUpdateUserRequestDtoValue::ENABLED,\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/assignments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_assignments"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListAssignmentsRequest.new(\n  fields_: 'id,remote_id,external_reference,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status,progress,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,certificate_url,result,completed_at',\n  filter: Models::Operations::LmsListAssignmentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  user_id: 'c28xyrc55866bvuv',\n  remote_user_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_assignments(request: req)\n\nunless res.assignments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/assignments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_assignment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetAssignmentRequest.new(\n  id: '<id>',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_assignment(request: req)\n\nunless res.assignment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/categories"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_categories"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListCategoriesRequest.new(\n  fields_: 'id,remote_id,name,active,hierarchy,level,language',\n  filter: Models::Operations::LmsListCategoriesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_categories(request: req)\n\nunless res.categories_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/categories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_category"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetCategoryRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,active,hierarchy,level,language',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_category(request: req)\n\nunless res.category_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/completions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_completions"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListCompletionsRequest.new(\n  fields_: 'id,remote_id,external_id,remote_external_id,external_reference,content_id,remote_content_id,course_id,remote_course_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,time_spent,certificate_url',\n  filter: Models::Operations::LmsListCompletionsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_completions(request: req)\n\nunless res.completions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/completions/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_completion"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetCompletionRequest.new(\n  id: '<id>',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_completion(request: req)\n\nunless res.completion_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_content"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListContentRequest.new(\n  fields_: 'id,remote_id,external_reference,course_ids,remote_course_ids,title,description,additional_data,languages,content_url,mobile_launch_content_url,content_type,cover_url,active,duration,order,categories,skills,updated_at,created_at,provider,localizations,tags,authors',\n  filter: Models::Operations::LmsListContentQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_content(request: req)\n\nunless res.content_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content"]["put"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_upsert_content"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.lms.upsert_content(x_account_id: '<id>', lms_upsert_content_request_dto: Models::Shared::LmsUpsertContentRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  external_reference: 'SOFTWARE-ENG-LV1-TRAINING-VIDEO-1',\n  title: 'Software Engineer Lv 1',\n  description: 'This video acts as learning content for software engineers.',\n  languages: [\n    Models::Shared::LanguageEnum.new(\n      value: Models::Shared::LanguageEnumValue::EN_GB,\n    ),\n  ],\n  content_url: 'https://www.youtube.com/watch?v=16873',\n  mobile_launch_content_url: 'https://www.mobile.youtube.com/watch?v=16873',\n  cover_url: 'https://www.googledrive.com/?v=16873',\n  active: true,\n  duration: 'P3Y6M4DT12H30M5S',\n  skills: [\n    Models::Shared::CreateSkillsApiModel.new(\n      id: '12345',\n      name: 'Sales Techniques',\n    ),\n  ],\n  order: 1.0,\n  localizations: [\n    Models::Shared::LocalizationModel.new(\n      title: 'Software Engineer Lv 1',\n      description: 'This course acts as learning resource for software engineers.',\n    ),\n    Models::Shared::LocalizationModel.new(\n      title: 'Software Engineer: A comprehensive guide',\n      description: 'This course acts as learning resource for software engineers.',\n    ),\n  ],\n  tags: [\n    'Sales Techniques',\n    'Customer Service',\n  ],\n  authors: [\n    Models::Shared::AuthorModel.new(\n      id: '123',\n      name: 'John Doe',\n    ),\n  ],\n  updated_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  created_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  categories: [\n    Models::Shared::CreateCategoriesApiModel.new(\n      id: '16873-IT345',\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": 'REF-1236',\n        \"my_project_custom_field_2\": 'some other value',\n      },\n      name: 'Information-Technology',\n      language: Models::Shared::CreateCategoriesApiModelLanguage.new(\n        value: Models::Shared::CreateCategoriesApiModelSchemasLanguageValue::EN_GB,\n      ),\n    ),\n  ],\n  additional_data: [\n    Models::Shared::AdditionalData.new(\n      id: 'learning_outcomes',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      value: 'This is additional data',\n    ),\n  ],\n))\n\nunless res.upsert_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_batch_upsert_content"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.lms.batch_upsert_content(x_account_id: '<id>', lms_batch_upsert_content_request_dto: Models::Shared::LmsBatchUpsertContentRequestDto.new(\n  items: [\n    Models::Shared::LmsUpsertContentRequestDto.new(\n      unified_custom_fields: {\n        \"my_project_custom_field_1\": 'REF-1236',\n        \"my_project_custom_field_2\": 'some other value',\n      },\n      external_reference: 'SOFTWARE-ENG-LV1-TRAINING-VIDEO-1',\n      title: 'Software Engineer Lv 1',\n      description: 'This video acts as learning content for software engineers.',\n      languages: [\n        Models::Shared::LanguageEnum.new(\n          value: Models::Shared::LanguageEnumValue::EN_GB,\n        ),\n      ],\n      content_url: 'https://www.youtube.com/watch?v=16873',\n      mobile_launch_content_url: 'https://www.mobile.youtube.com/watch?v=16873',\n      cover_url: 'https://www.googledrive.com/?v=16873',\n      active: true,\n      duration: 'P3Y6M4DT12H30M5S',\n      skills: [\n        Models::Shared::CreateSkillsApiModel.new(\n          id: '12345',\n          name: 'Sales Techniques',\n        ),\n      ],\n      order: 1.0,\n      localizations: [\n        Models::Shared::LocalizationModel.new(\n          title: 'Software Engineer Lv 1',\n          description: 'This course acts as learning resource for software engineers.',\n        ),\n        Models::Shared::LocalizationModel.new(\n          title: 'Software Engineer: A comprehensive guide',\n          description: 'This course acts as learning resource for software engineers.',\n        ),\n      ],\n      tags: [\n        'Sales Techniques',\n        'Customer Service',\n      ],\n      authors: [\n        Models::Shared::AuthorModel.new(\n          id: '123',\n          name: 'John Doe',\n        ),\n      ],\n      updated_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n      created_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n      categories: [\n        Models::Shared::CreateCategoriesApiModel.new(\n          id: '16873-IT345',\n          unified_custom_fields: {\n            \"my_project_custom_field_1\": 'REF-1236',\n            \"my_project_custom_field_2\": 'some other value',\n          },\n          name: 'Information-Technology',\n          language: Models::Shared::CreateCategoriesApiModelLanguage.new(\n            value: Models::Shared::CreateCategoriesApiModelSchemasLanguageValue::EN_GB,\n          ),\n        ),\n      ],\n      additional_data: [\n        Models::Shared::AdditionalData.new(\n          id: 'learning_outcomes',\n          remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n          value: 'This is additional data',\n        ),\n      ],\n    ),\n  ],\n))\n\nunless res.batch_result_api_model.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_content"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetContentRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,external_reference,course_ids,remote_course_ids,title,description,additional_data,languages,content_url,mobile_launch_content_url,content_type,cover_url,active,duration,order,categories,skills,updated_at,created_at,provider,localizations,tags,authors',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_content(request: req)\n\nunless res.content_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/content/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_update_content"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.lms.update_content(id: '<id>', x_account_id: '<id>', lms_create_content_request_dto: Models::Shared::LmsCreateContentRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  external_reference: 'SOFTWARE-ENG-LV1-TRAINING-VIDEO-1',\n  title: 'Software Engineer Lv 1',\n  description: 'This video acts as learning content for software engineers.',\n  languages: [\n    Models::Shared::LanguageEnum.new(\n      value: Models::Shared::LanguageEnumValue::EN_GB,\n    ),\n  ],\n  content_url: 'https://www.youtube.com/watch?v=16873',\n  mobile_launch_content_url: 'https://www.mobile.youtube.com/watch?v=16873',\n  cover_url: 'https://www.googledrive.com/?v=16873',\n  active: true,\n  duration: 'P3Y6M4DT12H30M5S',\n  skills: [\n    Models::Shared::CreateSkillsApiModel.new(\n      id: '12345',\n      name: 'Sales Techniques',\n    ),\n  ],\n  order: 1.0,\n  localizations: [\n    Models::Shared::LocalizationModel.new(\n      title: 'Software Engineer Lv 1',\n      description: 'This course acts as learning resource for software engineers.',\n    ),\n    Models::Shared::LocalizationModel.new(\n      title: 'Software Engineer Lv 1',\n      description: 'This video acts as learning content for software engineers.',\n    ),\n  ],\n  tags: [\n    'Sales Techniques',\n    'Customer Service',\n  ],\n  authors: [\n    Models::Shared::AuthorModel.new(\n      id: '123',\n      name: 'John Doe',\n    ),\n  ],\n  updated_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  created_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  categories: [\n    Models::Shared::CreateCategoriesApiModel.new(\n      name: 'Technology',\n    ),\n  ],\n  additional_data: [\n    Models::Shared::AdditionalData.new(\n      id: 'learning_outcomes',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      value: 'This is additional data',\n    ),\n  ],\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/courses"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_courses"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListCoursesRequest.new(\n  fields_: 'id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,cover_url,url,active,duration,categories,skills,updated_at,created_at,content,provider,localizations,authors',\n  filter: Models::Operations::LmsListCoursesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_courses(request: req)\n\nunless res.course_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/courses/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_course"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetCourseRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,cover_url,url,active,duration,categories,skills,updated_at,created_at,content,provider,localizations,authors',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_course(request: req)\n\nunless res.course_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/skills"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_skills"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListSkillsRequest.new(\n  fields_: 'id,remote_id,name,active,hierarchy,language',\n  filter: Models::Operations::LmsListSkillsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_skills(request: req)\n\nunless res.skills_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/skills/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_skill"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetSkillRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,active,hierarchy,language',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_skill(request: req)\n\nunless res.skill_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_users"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListUsersRequest.new(\n  fields_: 'id,remote_id,external_reference,active,email,phone_number,created_at,updated_at,name',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_users(request: req)\n\nunless res.users_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_user"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetUserRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,external_reference,active,email,phone_number,created_at,updated_at,name',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_user(request: req)\n\nunless res.user_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/assignments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_user_assignments"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListUserAssignmentsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,external_reference,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status,progress,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,certificate_url,result,completed_at',\n  filter: Models::Operations::LmsListUserAssignmentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  user_id: 'c28xyrc55866bvuv',\n  remote_user_id: 'e3cb75bf-aa84-466e-a6c1-b8322b257a48',\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_user_assignments(request: req)\n\nunless res.assignments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/assignments"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_create_user_assignment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.lms.create_user_assignment(id: '<id>', x_account_id: '<id>', lms_create_assignment_request_dto: Models::Shared::LmsCreateAssignmentRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  learning_object_id: 'e3gd34-23tr21-er234-345er56',\n  learning_object_external_reference: 'learning-content-123',\n  progress: 40.0,\n  created_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  due_date: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  status: Models::Shared::LmsCreateAssignmentRequestDtoStatus.new(\n    value: Models::Shared::LmsCreateAssignmentRequestDtoValue::IN_PROGRESS,\n  ),\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/assignments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_user_assignment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetUserAssignmentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_user_assignment(request: req)\n\nunless res.assignment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_list_user_completions"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsListUserCompletionsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,external_id,remote_external_id,external_reference,content_id,remote_content_id,course_id,remote_course_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,time_spent,certificate_url',\n  filter: Models::Operations::LmsListUserCompletionsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.lms.list_user_completions(request: req)\n\nunless res.completions_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_create_user_completion"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.lms.create_user_completion(id: '<id>', x_account_id: '<id>', lms_create_completion_request_dto: Models::Shared::LmsCreateCompletionRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  completed_at: DateTime.iso8601('2021-07-21T14:00:00.000Z'),\n  learning_object_id: 'e3gd34-23tr21-er234-345er56',\n  learning_object_external_reference: 'learning-content-123',\n  time_spent: 'PT1H30M45S',\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/completions/{subResourceId}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_delete_user_completion"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.lms.delete_user_completion(id: '<id>', sub_resource_id: '<id>', x_account_id: '<id>')\n\nunless res.delete_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/lms/users/{id}/completions/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "lms_get_user_completion"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::LmsGetUserCompletionRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  x_account_id: '<id>',\n)\n\nres = s.lms.get_user_completion(request: req)\n\nunless res.completion_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/campaigns"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_campaigns"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingListCampaignsRequest.new(\n  fields_: 'id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages',\n  filter: Models::Operations::MarketingListCampaignsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.marketing.list_campaigns(request: req)\n\nunless res.campaigns_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/campaigns/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_campaign"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingGetCampaignRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages',\n  x_account_id: '<id>',\n)\n\nres = s.marketing.get_campaign(request: req)\n\nunless res.campaign_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/content_blocks"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_content_blocks"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingListContentBlocksRequest.new(\n  fields_: 'id,remote_id,name,type,content,status,tags,created_at,updated_at',\n  filter: Models::Operations::MarketingListContentBlocksQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.marketing.list_content_blocks(request: req)\n\nunless res.content_blocks_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/content_blocks"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_content_block"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.create_content_block(x_account_id: '<id>', marketing_create_content_blocks_request_dto: Models::Shared::MarketingCreateContentBlocksRequestDto.new(\n  type: Models::Shared::MarketingCreateContentBlocksRequestDtoType.new(\n    value: Models::Shared::MarketingCreateContentBlocksRequestDtoValue::HTML,\n    source_value: 'text',\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_content_block"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingGetContentBlockRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,type,content,status,tags,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.marketing.get_content_block(request: req)\n\nunless res.content_block_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_content_block"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.update_content_block(id: '<id>', x_account_id: '<id>', marketing_create_content_blocks_request_dto: Models::Shared::MarketingCreateContentBlocksRequestDto.new(\n  type: Models::Shared::MarketingCreateContentBlocksRequestDtoType.new(\n    value: Models::Shared::MarketingCreateContentBlocksRequestDtoValue::HTML,\n    source_value: 'text',\n  ),\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/email"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_email_templates"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingListEmailTemplatesRequest.new(\n  fields_: 'id,remote_id,name,messages,created_at,updated_at,tags',\n  filter: Models::Operations::MarketingListEmailTemplatesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.marketing.list_email_templates(request: req)\n\nunless res.email_templates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/email"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_email_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.create_email_template(x_account_id: '<id>', marketing_create_email_template_request_dto: Models::Shared::MarketingCreateEmailTemplateRequestDto.new(\n  messages: [\n    Models::Shared::EmailMessages.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      message_type: nil,\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_email_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingGetEmailTemplateRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,messages,created_at,updated_at,tags',\n  x_account_id: '<id>',\n)\n\nres = s.marketing.get_email_template(request: req)\n\nunless res.email_template_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_email_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.update_email_template(id: '<id>', x_account_id: '<id>', marketing_create_email_template_request_dto: Models::Shared::MarketingCreateEmailTemplateRequestDto.new(\n  messages: [\n    Models::Shared::EmailMessages.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      message_type: Models::Shared::MessageType.new(\n        value: Models::Shared::EmailMessagesValue::EMAIL,\n        source_value: 'Email',\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/in_app"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_in_app_templates"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingListInAppTemplatesRequest.new(\n  fields_: 'id,remote_id,name,messages,created_at,updated_at,tags',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.marketing.list_in_app_templates(request: req)\n\nunless res.in_app_templates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/in_app"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_in_app_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.create_in_app_template(x_account_id: '<id>', marketing_create_in_app_template_request_dto: Models::Shared::MarketingCreateInAppTemplateRequestDto.new(\n  messages: [\n    Models::Shared::InAppMessages.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      message_type: Models::Shared::InAppMessagesMessageType.new(\n        value: Models::Shared::InAppMessagesValue::EMAIL,\n        source_value: 'Email',\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_in_app_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingGetInAppTemplateRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,messages,created_at,updated_at,tags',\n  x_account_id: '<id>',\n)\n\nres = s.marketing.get_in_app_template(request: req)\n\nunless res.in_app_template_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_in_app_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.update_in_app_template(id: '<id>', x_account_id: '<id>', marketing_create_in_app_template_request_dto: Models::Shared::MarketingCreateInAppTemplateRequestDto.new(\n  messages: [\n    Models::Shared::InAppMessages.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      message_type: Models::Shared::InAppMessagesMessageType.new(\n        value: Models::Shared::InAppMessagesValue::EMAIL,\n        source_value: 'Email',\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/push"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_push_templates"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingListPushTemplatesRequest.new(\n  fields_: 'id,remote_id,name,messages,created_at,updated_at,tags',\n  filter: Models::Operations::MarketingListPushTemplatesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.marketing.list_push_templates(request: req)\n\nunless res.push_templates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/push"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_push_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.create_push_template(x_account_id: '<id>', marketing_create_push_template_request_dto: Models::Shared::MarketingCreatePushTemplateRequestDto.new(\n  messages: [\n    Models::Shared::PushMessages.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      message_type: Models::Shared::PushMessagesMessageType.new(\n        value: Models::Shared::PushMessagesValue::EMAIL,\n        source_value: 'Email',\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_push_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingGetPushTemplateRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,messages,created_at,updated_at,tags',\n  x_account_id: '<id>',\n)\n\nres = s.marketing.get_push_template(request: req)\n\nunless res.push_template_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_push_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.update_push_template(id: '<id>', x_account_id: '<id>', marketing_create_push_template_request_dto: Models::Shared::MarketingCreatePushTemplateRequestDto.new(\n  messages: [\n    Models::Shared::PushMessages.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      message_type: Models::Shared::PushMessagesMessageType.new(\n        value: Models::Shared::PushMessagesValue::EMAIL,\n        source_value: 'Email',\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/sms"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_list_sms_templates"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingListSmsTemplatesRequest.new(\n  fields_: 'id,remote_id,name,messages,created_at,updated_at,tags',\n  filter: Models::Operations::MarketingListSmsTemplatesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.marketing.list_sms_templates(request: req)\n\nunless res.sms_templates_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/sms"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_create_sms_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.create_sms_template(x_account_id: '<id>', marketing_create_sms_template_request_dto: Models::Shared::MarketingCreateSmsTemplateRequestDto.new(\n  messages: [\n    Models::Shared::SmsMessages.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      message_type: Models::Shared::SmsMessagesMessageType.new(\n        value: Models::Shared::SmsMessagesValue::EMAIL,\n        source_value: 'Email',\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_get_sms_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MarketingGetSmsTemplateRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,messages,created_at,updated_at,tags',\n  x_account_id: '<id>',\n)\n\nres = s.marketing.get_sms_template(request: req)\n\nunless res.sms_template_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "marketing_update_sms_template"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.marketing.update_sms_template(id: '<id>', x_account_id: '<id>', marketing_create_sms_template_request_dto: Models::Shared::MarketingCreateSmsTemplateRequestDto.new(\n  messages: [\n    Models::Shared::SmsMessages.new(\n      id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n      message_type: Models::Shared::SmsMessagesMessageType.new(\n        value: Models::Shared::SmsMessagesValue::EMAIL,\n        source_value: 'Email',\n      ),\n    ),\n  ],\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/conversations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_list_conversations"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingListConversationsRequest.new(\n  fields_: 'id,remote_id,participants,name,private,created_at,last_message_at',\n  filter: Models::Operations::MessagingListConversationsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.messaging.list_conversations(request: req)\n\nunless res.messaging_conversations_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/conversations"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_create_conversation"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.messaging.create_conversation(x_account_id: '<id>', messaging_create_conversation_request_dto: Models::Shared::MessagingCreateConversationRequestDto.new(\n  participants: [\n    'c28xIQ1',\n    'c28xIQ2',\n  ],\n  name: 'Project Discussion',\n  private: true,\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/conversations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_get_conversation"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingGetConversationRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,participants,name,private,created_at,last_message_at',\n  x_account_id: '<id>',\n)\n\nres = s.messaging.get_conversation(request: req)\n\nunless res.messaging_conversation_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/conversations/{id}/messages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_list_conversation_messages"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingListConversationMessagesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,content,parent_message_id,remote_parent_message_id,attachments,author,created_at,updated_at',\n  filter: Models::Operations::MessagingListConversationMessagesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.messaging.list_conversation_messages(request: req)\n\nunless res.messaging_messages_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/messages"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_send_message"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.messaging.send_message(x_account_id: '<id>', messaging_message_send_request_dto: Models::Shared::MessagingMessageSendRequestDto.new(\n  content: 'Hello, world!',\n  recipient: 'c28xyrc55866bvuv',\n  sender: '+34820398402',\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/messages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_get_message"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingGetMessageRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,content,parent_message_id,remote_parent_message_id,attachments,author,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.messaging.get_message(request: req)\n\nunless res.messaging_message_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/messages/{id}/attachments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_list_attachments"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingListAttachmentsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,file_name,file_size,file_type',\n  filter: Models::Operations::MessagingListAttachmentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.messaging.list_attachments(request: req)\n\nunless res.messaging_attachments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/messages/{id}/attachments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_get_attachment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingGetAttachmentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,file_name,file_size,file_type',\n  x_account_id: '<id>',\n)\n\nres = s.messaging.get_attachment(request: req)\n\nunless res.messaging_attachment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/messages/{id}/attachments/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_download_messaging_attachment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingDownloadMessagingAttachmentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  format: 'base64',\n  export_format: 'text/plain',\n  x_account_id: '<id>',\n)\n\nres = s.messaging.download_messaging_attachment(request: req)\n\nunless res.body.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_list_users"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingListUsersRequest.new(\n  fields_: 'id,remote_id,email,username,name,first_name,last_name,bot,active',\n  filter: Models::Operations::MessagingListUsersQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.messaging.list_users(request: req)\n\nunless res.messaging_users_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/messaging/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "messaging_get_user"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::MessagingGetUserRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,email,username,name,first_name,last_name,bot,active',\n  x_account_id: '<id>',\n)\n\nres = s.messaging.get_user(request: req)\n\nunless res.messaging_user_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/proxy"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "stackone_proxy_request"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.proxy.proxy_request(x_account_id: '<id>', proxy_request_body: Models::Shared::ProxyRequestBody.new(\n  url: 'https://api.sample-integration.com/v1',\n  path: '/employees/directory',\n  headers: {\n    \"Content-Type\": 'application/json',\n  },\n))\n\nif res.status_code == 200\n  # handle response\nend"
  - target: $["paths"]["/unified/screening/orders"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "screening_create_screening_order"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.screening.create_screening_order(x_account_id: '<id>', screening_create_order_request_dto: Models::Shared::ScreeningCreateOrderRequestDto.new(\n  passthrough: {\n    \"other_known_names\": 'John Doe',\n  },\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  package_id: '54321',\n  candidate: Models::Shared::ScreeningOrderCandidate.new(\n    first_name: 'John',\n    last_name: 'Doe',\n    email: 'john.doe@example.com',\n  ),\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/screening/packages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "screening_list_screening_packages"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::ScreeningListScreeningPackagesRequest.new(\n  fields_: 'id,remote_id,name,description',\n  filter: Models::Operations::ScreeningListScreeningPackagesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.screening.list_screening_packages(request: req)\n\nunless res.screening_packages_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/screening/packages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "screening_get_screening_package"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::ScreeningGetScreeningPackageRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,description',\n  x_account_id: '<id>',\n)\n\nres = s.screening.get_screening_package(request: req)\n\nunless res.screening_package_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/screening/results/webhook"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "screening_webhook_screening_result"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.screening.webhook_screening_result(x_account_id: '<id>', screening_result_webhook: Models::Shared::ScreeningResultWebhook.new(\n  event: Models::Shared::Event::SCREENING_RESULTS_COMPLETED,\n  data: Models::Shared::ScreeningResult.new(\n    id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    remote_id: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',\n    unified_custom_fields: {\n      \"my_project_custom_field_1\": 'REF-1236',\n      \"my_project_custom_field_2\": 'some other value',\n    },\n    order_id: '12345',\n    score: Models::Shared::ScreeningResultScore.new(\n      label: 'Overall Risk',\n      value: '75',\n      min: '0',\n      max: '100',\n    ),\n    start_date: DateTime.iso8601('2023-01-01T00:00:00Z'),\n    submission_date: DateTime.iso8601('2023-01-02T00:00:00Z'),\n    summary: 'Background check completed successfully',\n    status: Models::Shared::ScreeningResultStatus::COMPLETED,\n    result_url: 'https://example.com/results/12345',\n  ),\n))\n\nunless res.screening_result_webhook.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/projects"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_projects"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListProjectsRequest.new(\n  fields_: 'id,remote_id,organization_id,remote_organization_id,name,description,created_at,updated_at',\n  filter: Models::Operations::TicketingListProjectsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_projects(request: req)\n\nunless res.ticketing_projects_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/projects/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_get_project"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingGetProjectRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,organization_id,remote_organization_id,name,description,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.get_project(request: req)\n\nunless res.ticketing_project_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/projects/{id}/components"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_project_components"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListProjectComponentsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,organization_id,remote_organization_id,project_id,remote_project_id,name,description,created_at,updated_at',\n  filter: nil,\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_project_components(request: req)\n\nunless res.ticketing_components_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/projects/{id}/components/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_get_project_component"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingGetProjectComponentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,organization_id,remote_organization_id,project_id,remote_project_id,name,description,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.get_project_component(request: req)\n\nunless res.ticketing_component_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/projects/{id}/ticket_types"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_project_ticket_types"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListProjectTicketTypesRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,project_id,remote_project_id',\n  filter: Models::Operations::TicketingListProjectTicketTypesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_project_ticket_types(request: req)\n\nunless res.ticketing_ticket_type_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/ticket_types"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_ticket_types"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListTicketTypesRequest.new(\n  fields_: 'id,remote_id,name,project_id,remote_project_id',\n  filter: Models::Operations::TicketingListTicketTypesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_ticket_types(request: req)\n\nunless res.ticketing_ticket_type_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/ticket_types/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_get_ticket_type"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingGetTicketTypeRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,name,project_id,remote_project_id',\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.get_ticket_type(request: req)\n\nunless res.ticketing_ticket_type_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_tickets"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListTicketsRequest.new(\n  fields_: 'id,remote_id,type,ticket_number,title,creator_id,remote_creator_id,reporters,assignees,content,parent_id,remote_parent_id,closed_at,ticket_url,status,priority,tags,projects,components,organization,created_at,updated_at',\n  filter: Models::Operations::TicketingListTicketsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_tickets(request: req)\n\nunless res.ticketing_tickets_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets"]["post"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_create_ticket"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ticketing.create_ticket(x_account_id: '<id>', ticketing_ticket_create_request_dto: Models::Shared::TicketingTicketCreateRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  title: 'System outage in production environment',\n  creator_id: 'user-001',\n  reporters: [\n    'user-001',\n    'user-002',\n  ],\n  assignees: [\n    'user-001',\n    'user-002',\n  ],\n  content: [\n    Models::Shared::TicketingContent.new(\n      plain: 'This is some content',\n      html: '<p>This is some content</p>',\n    ),\n  ],\n  parent_id: 'ticket-002',\n  priority: Models::Shared::TicketingTicketCreateRequestDtoPriority.new(\n    id: '001',\n    value: Models::Shared::TicketingTicketCreateRequestDtoValue::MEDIUM,\n    source_value: 'Normal',\n  ),\n  tags: [\n    'tag-001',\n    'tag-002',\n  ],\n  organization_id: 'organization-001',\n  project_id: 'project-001',\n  component_ids: '[\"component-001\",\"component-002\"]',\n  type: 'ticket-type-001',\n))\n\nunless res.create_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_get_ticket"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingGetTicketRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,type,ticket_number,title,creator_id,remote_creator_id,reporters,assignees,content,parent_id,remote_parent_id,closed_at,ticket_url,status,priority,tags,projects,components,organization,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.get_ticket(request: req)\n\nunless res.ticketing_ticket_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_update_ticket"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nres = s.ticketing.update_ticket(id: '<id>', x_account_id: '<id>', ticketing_ticket_update_request_dto: Models::Shared::TicketingTicketUpdateRequestDto.new(\n  unified_custom_fields: {\n    \"my_project_custom_field_1\": 'REF-1236',\n    \"my_project_custom_field_2\": 'some other value',\n  },\n  title: 'System outage in production environment',\n  reporters: [\n    'user-001',\n    'user-002',\n  ],\n  assignees: [\n    'user-001',\n    'user-002',\n  ],\n  content: [\n    Models::Shared::TicketingContent.new(\n      plain: 'This is some content',\n      html: '<p>This is some content</p>',\n    ),\n  ],\n  parent_id: 'ticket-002',\n  priority: Models::Shared::TicketingTicketUpdateRequestDtoPriority.new(\n    id: '001',\n    value: Models::Shared::TicketingTicketUpdateRequestDtoValue::MEDIUM,\n    source_value: 'Normal',\n  ),\n  tags: [\n    'tag-001',\n    'tag-002',\n  ],\n  project_id: 'project-001',\n  component_ids: '[\"component-001\",\"component-002\"]',\n  status: Models::Shared::TicketingTicketUpdateRequestDtoStatus.new(\n    id: '001',\n    type: Models::Shared::TicketingTicketUpdateRequestDtoType.new(\n      value: Models::Shared::TicketingTicketUpdateRequestDtoSchemasValue::TO_DO,\n      source_value: 'New',\n    ),\n    name: 'Backlog',\n  ),\n))\n\nunless res.update_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/attachments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_attachments"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListAttachmentsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,ticket_id,remote_ticket_id,user_id,remote_user_id,file_name,file_format,file_url,size,created_at,updated_at',\n  filter: Models::Operations::TicketingListAttachmentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_attachments(request: req)\n\nunless res.ticketing_attachments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/attachments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_get_attachment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingGetAttachmentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,ticket_id,remote_ticket_id,user_id,remote_user_id,file_name,file_format,file_url,size,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.get_attachment(request: req)\n\nunless res.ticketing_attachment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/attachments/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_download_ticketing_attachment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingDownloadTicketingAttachmentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  format: 'base64',\n  export_format: 'text/plain',\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.download_ticketing_attachment(request: req)\n\nunless res.body.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/comments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_comments"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListCommentsRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,ticket_id,remote_ticket_id,content,user_id,remote_user_id,internal,created_at,updated_at',\n  filter: Models::Operations::TicketingListCommentsQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_comments(request: req)\n\nunless res.ticketing_comments_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/comments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_get_comment"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingGetCommentRequest.new(\n  id: '<id>',\n  sub_resource_id: '<id>',\n  fields_: 'id,remote_id,ticket_id,remote_ticket_id,content,user_id,remote_user_id,internal,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.get_comment(request: req)\n\nunless res.ticketing_comment_result.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/statuses"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_ticket_statuses"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListTicketStatusesRequest.new(\n  id: '<id>',\n  filter: Models::Operations::TicketingListTicketStatusesQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_ticket_statuses(request: req)\n\nunless res.ticketing_ticket_statuses_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_list_users"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingListUsersRequest.new(\n  fields_: 'id,remote_id,type,name,primary_email,primary_phone,username,active,first_name,last_name,customer_account_reference,created_at,updated_at',\n  filter: Models::Operations::TicketingListUsersQueryParamFilter.new(\n    updated_after: DateTime.iso8601('2020-01-01T00:00:00.000Z'),\n  ),\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.list_users(request: req)\n\nunless res.ticketing_users_paginated.nil?\n  # handle response\nend"
  - target: $["paths"]["/unified/ticketing/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "ruby"
          "label": "ticketing_get_user"
          "source": "require 'stackone_client'\n\nModels = ::StackOne::Models\ns = ::StackOne::StackOne.new(\n      security: Models::Shared::Security.new(\n        username: '',\n        password: '',\n      ),\n    )\n\nreq = Models::Operations::TicketingGetUserRequest.new(\n  id: '<id>',\n  fields_: 'id,remote_id,type,name,primary_email,primary_phone,username,active,first_name,last_name,customer_account_reference,created_at,updated_at',\n  x_account_id: '<id>',\n)\n\nres = s.ticketing.get_user(request: req)\n\nunless res.ticketing_user_result.nil?\n  # handle response\nend"
